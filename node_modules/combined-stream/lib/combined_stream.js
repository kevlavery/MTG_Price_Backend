var util = require('util');
var Stream = require('stream').Stream;
var DelayedStream = require('delayed-stream');
var defer = require('./defer.js');

module.exports = CombinedStream;
function CombinedStream() ***REMOVED***
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
***REMOVED***
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) ***REMOVED***
  var combinedStream = new this();

  options = options || ***REMOVED******REMOVED***;
  for (var option in options) ***REMOVED***
    combinedStream[option] = options[option];
  ***REMOVED***

  return combinedStream;
***REMOVED***;

CombinedStream.isStreamLike = function(stream) ***REMOVED***
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
***REMOVED***;

CombinedStream.prototype.append = function(stream) ***REMOVED***
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) ***REMOVED***
    if (!(stream instanceof DelayedStream)) ***REMOVED***
      var newStream = DelayedStream.create(stream, ***REMOVED***
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      ***REMOVED***);
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    ***REMOVED***

    this._handleErrors(stream);

    if (this.pauseStreams) ***REMOVED***
      stream.pause();
    ***REMOVED***
  ***REMOVED***

  this._streams.push(stream);
  return this;
***REMOVED***;

CombinedStream.prototype.pipe = function(dest, options) ***REMOVED***
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
***REMOVED***;

CombinedStream.prototype._getNext = function() ***REMOVED***
  this._currentStream = null;
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') ***REMOVED***
    this.end();
    return;
  ***REMOVED***

  if (typeof stream !== 'function') ***REMOVED***
    this._pipeNext(stream);
    return;
  ***REMOVED***

  var getStream = stream;
  getStream(function(stream) ***REMOVED***
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) ***REMOVED***
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    ***REMOVED***

    defer(this._pipeNext.bind(this, stream));
  ***REMOVED***.bind(this));
***REMOVED***;

CombinedStream.prototype._pipeNext = function(stream) ***REMOVED***
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) ***REMOVED***
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, ***REMOVED***end: false***REMOVED***);
    return;
  ***REMOVED***

  var value = stream;
  this.write(value);
  this._getNext();
***REMOVED***;

CombinedStream.prototype._handleErrors = function(stream) ***REMOVED***
  var self = this;
  stream.on('error', function(err) ***REMOVED***
    self._emitError(err);
  ***REMOVED***);
***REMOVED***;

CombinedStream.prototype.write = function(data) ***REMOVED***
  this.emit('data', data);
***REMOVED***;

CombinedStream.prototype.pause = function() ***REMOVED***
  if (!this.pauseStreams) ***REMOVED***
    return;
  ***REMOVED***

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
***REMOVED***;

CombinedStream.prototype.resume = function() ***REMOVED***
  if (!this._released) ***REMOVED***
    this._released = true;
    this.writable = true;
    this._getNext();
  ***REMOVED***

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
***REMOVED***;

CombinedStream.prototype.end = function() ***REMOVED***
  this._reset();
  this.emit('end');
***REMOVED***;

CombinedStream.prototype.destroy = function() ***REMOVED***
  this._reset();
  this.emit('close');
***REMOVED***;

CombinedStream.prototype._reset = function() ***REMOVED***
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
***REMOVED***;

CombinedStream.prototype._checkDataSize = function() ***REMOVED***
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) ***REMOVED***
    return;
  ***REMOVED***

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
***REMOVED***;

CombinedStream.prototype._updateDataSize = function() ***REMOVED***
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) ***REMOVED***
    if (!stream.dataSize) ***REMOVED***
      return;
    ***REMOVED***

    self.dataSize += stream.dataSize;
  ***REMOVED***);

  if (this._currentStream && this._currentStream.dataSize) ***REMOVED***
    this.dataSize += this._currentStream.dataSize;
  ***REMOVED***
***REMOVED***;

CombinedStream.prototype._emitError = function(err) ***REMOVED***
  this._reset();
  this.emit('error', err);
***REMOVED***;
