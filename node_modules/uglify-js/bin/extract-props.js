#! /usr/bin/env node

"use strict";

var U2 = require("../tools/node");
var fs = require("fs");
var yargs = require("yargs");
var ARGS = yargs
    .describe("o", "Output file")
    .argv;
var files = ARGS._.slice();
var output = ***REMOVED***
    vars: ***REMOVED******REMOVED***,
    props: ***REMOVED******REMOVED***
***REMOVED***;

if (ARGS.o) try ***REMOVED***
    output = JSON.parse(fs.readFileSync(ARGS.o, "utf8"));
***REMOVED*** catch(ex) ***REMOVED******REMOVED***

files.forEach(getProps);

if (ARGS.o) ***REMOVED***
    fs.writeFileSync(ARGS.o, JSON.stringify(output, null, 2), "utf8");
***REMOVED*** else ***REMOVED***
    console.log("%s", JSON.stringify(output, null, 2));
***REMOVED***

function getProps(filename) ***REMOVED***
    var code = fs.readFileSync(filename, "utf8");
    var ast = U2.parse(code);

    ast.walk(new U2.TreeWalker(function(node)***REMOVED***
        if (node instanceof U2.AST_ObjectKeyVal) ***REMOVED***
            add(node.key);
        ***REMOVED***
        else if (node instanceof U2.AST_ObjectProperty) ***REMOVED***
            add(node.key.name);
        ***REMOVED***
        else if (node instanceof U2.AST_Dot) ***REMOVED***
            add(node.property);
        ***REMOVED***
        else if (node instanceof U2.AST_Sub) ***REMOVED***
            addStrings(node.property);
        ***REMOVED***
    ***REMOVED***));

    function addStrings(node) ***REMOVED***
        var out = ***REMOVED******REMOVED***;
        try ***REMOVED***
            (function walk(node)***REMOVED***
                node.walk(new U2.TreeWalker(function(node)***REMOVED***
                    if (node instanceof U2.AST_Seq) ***REMOVED***
                        walk(node.cdr);
                        return true;
                    ***REMOVED***
                    if (node instanceof U2.AST_String) ***REMOVED***
                        add(node.value);
                        return true;
                    ***REMOVED***
                    if (node instanceof U2.AST_Conditional) ***REMOVED***
                        walk(node.consequent);
                        walk(node.alternative);
                        return true;
                    ***REMOVED***
                    throw out;
                ***REMOVED***));
            ***REMOVED***)(node);
        ***REMOVED*** catch(ex) ***REMOVED***
            if (ex !== out) throw ex;
        ***REMOVED***
    ***REMOVED***

    function add(name) ***REMOVED***
        output.props[name] = true;
    ***REMOVED***
***REMOVED***
