/***********************************************************************

  A JavaScript tokenizer / parser / beautifier / compressor.
  https://github.com/mishoo/UglifyJS2

  -------------------------------- (C) ---------------------------------

                           Author: Mihai Bazon
                         <mihai.bazon@gmail.com>
                       http://mihai.bazon.net/blog

  Distributed under the BSD license:

    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above
          copyright notice, this list of conditions and the following
          disclaimer.

        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

 ***********************************************************************/

"use strict";

function Compressor(options, false_by_default) ***REMOVED***
    if (!(this instanceof Compressor))
        return new Compressor(options, false_by_default);
    TreeTransformer.call(this, this.before, this.after);
    this.options = defaults(options, ***REMOVED***
        angular       : false,
        booleans      : !false_by_default,
        cascade       : !false_by_default,
        collapse_vars : !false_by_default,
        comparisons   : !false_by_default,
        conditionals  : !false_by_default,
        dead_code     : !false_by_default,
        drop_console  : false,
        drop_debugger : !false_by_default,
        evaluate      : !false_by_default,
        expression    : false,
        global_defs   : ***REMOVED******REMOVED***,
        hoist_funs    : !false_by_default,
        hoist_vars    : false,
        if_return     : !false_by_default,
        join_vars     : !false_by_default,
        keep_fargs    : true,
        keep_fnames   : false,
        keep_infinity : false,
        loops         : !false_by_default,
        negate_iife   : !false_by_default,
        passes        : 1,
        properties    : !false_by_default,
        pure_getters  : !false_by_default && "strict",
        pure_funcs    : null,
        reduce_vars   : !false_by_default,
        screw_ie8     : true,
        sequences     : !false_by_default,
        side_effects  : !false_by_default,
        switches      : !false_by_default,
        top_retain    : null,
        toplevel      : !!(options && options["top_retain"]),
        unsafe        : false,
        unsafe_comps  : false,
        unsafe_math   : false,
        unsafe_proto  : false,
        unsafe_regexp : false,
        unused        : !false_by_default,
        warnings      : true,
    ***REMOVED***, true);
    var pure_funcs = this.options["pure_funcs"];
    if (typeof pure_funcs == "function") ***REMOVED***
        this.pure_funcs = pure_funcs;
    ***REMOVED*** else ***REMOVED***
        this.pure_funcs = pure_funcs ? function(node) ***REMOVED***
            return pure_funcs.indexOf(node.expression.print_to_string()) < 0;
        ***REMOVED*** : return_true;
    ***REMOVED***
    var top_retain = this.options["top_retain"];
    if (top_retain instanceof RegExp) ***REMOVED***
        this.top_retain = function(def) ***REMOVED***
            return top_retain.test(def.name);
        ***REMOVED***;
    ***REMOVED*** else if (typeof top_retain == "function") ***REMOVED***
        this.top_retain = top_retain;
    ***REMOVED*** else if (top_retain) ***REMOVED***
        if (typeof top_retain == "string") ***REMOVED***
            top_retain = top_retain.split(/,/);
        ***REMOVED***
        this.top_retain = function(def) ***REMOVED***
            return top_retain.indexOf(def.name) >= 0;
        ***REMOVED***;
    ***REMOVED***
    var sequences = this.options["sequences"];
    this.sequences_limit = sequences == 1 ? 200 : sequences | 0;
    this.warnings_produced = ***REMOVED******REMOVED***;
***REMOVED***;

Compressor.prototype = new TreeTransformer;
merge(Compressor.prototype, ***REMOVED***
    option: function(key) ***REMOVED*** return this.options[key] ***REMOVED***,
    compress: function(node) ***REMOVED***
        if (this.option("expression")) ***REMOVED***
            node = node.process_expression(true);
        ***REMOVED***
        var passes = +this.options.passes || 1;
        for (var pass = 0; pass < passes && pass < 3; ++pass) ***REMOVED***
            if (pass > 0 || this.option("reduce_vars"))
                node.reset_opt_flags(this, true);
            node = node.transform(this);
        ***REMOVED***
        if (this.option("expression")) ***REMOVED***
            node = node.process_expression(false);
        ***REMOVED***
        return node;
    ***REMOVED***,
    info: function() ***REMOVED***
        if (this.options.warnings == "verbose") ***REMOVED***
            AST_Node.warn.apply(AST_Node, arguments);
        ***REMOVED***
    ***REMOVED***,
    warn: function(text, props) ***REMOVED***
        if (this.options.warnings) ***REMOVED***
            // only emit unique warnings
            var message = string_template(text, props);
            if (!(message in this.warnings_produced)) ***REMOVED***
                this.warnings_produced[message] = true;
                AST_Node.warn.apply(AST_Node, arguments);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***,
    clear_warnings: function() ***REMOVED***
        this.warnings_produced = ***REMOVED******REMOVED***;
    ***REMOVED***,
    before: function(node, descend, in_list) ***REMOVED***
        if (node._squeezed) return node;
        var was_scope = false;
        if (node instanceof AST_Scope) ***REMOVED***
            node = node.hoist_declarations(this);
            was_scope = true;
        ***REMOVED***
        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()
        // would call AST_Node.transform() if a different instance of AST_Node is
        // produced after OPT().
        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.
        // Migrate and defer all children's AST_Node.transform() to below, which
        // will now happen after this parent AST_Node has been properly substituted
        // thus gives a consistent AST snapshot.
        descend(node, this);
        // Existing code relies on how AST_Node.optimize() worked, and omitting the
        // following replacement call would result in degraded efficiency of both
        // output and performance.
        descend(node, this);
        var opt = node.optimize(this);
        if (was_scope && opt instanceof AST_Scope) ***REMOVED***
            opt.drop_unused(this);
            descend(opt, this);
        ***REMOVED***
        if (opt === node) opt._squeezed = true;
        return opt;
    ***REMOVED***
***REMOVED***);

(function()***REMOVED***

    function OPT(node, optimizer) ***REMOVED***
        node.DEFMETHOD("optimize", function(compressor)***REMOVED***
            var self = this;
            if (self._optimized) return self;
            if (compressor.has_directive("use asm")) return self;
            var opt = optimizer(self, compressor);
            opt._optimized = true;
            return opt;
        ***REMOVED***);
    ***REMOVED***;

    OPT(AST_Node, function(self, compressor)***REMOVED***
        return self;
    ***REMOVED***);

    AST_Node.DEFMETHOD("equivalent_to", function(node)***REMOVED***
        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();
    ***REMOVED***);

    AST_Node.DEFMETHOD("process_expression", function(insert, compressor) ***REMOVED***
        var self = this;
        var tt = new TreeTransformer(function(node) ***REMOVED***
            if (insert && node instanceof AST_SimpleStatement) ***REMOVED***
                return make_node(AST_Return, node, ***REMOVED***
                    value: node.body
                ***REMOVED***);
            ***REMOVED***
            if (!insert && node instanceof AST_Return) ***REMOVED***
                if (compressor) ***REMOVED***
                    var value = node.value && node.value.drop_side_effect_free(compressor, true);
                    return value ? make_node(AST_SimpleStatement, node, ***REMOVED***
                        body: value
                    ***REMOVED***) : make_node(AST_EmptyStatement, node);
                ***REMOVED***
                return make_node(AST_SimpleStatement, node, ***REMOVED***
                    body: node.value || make_node(AST_UnaryPrefix, node, ***REMOVED***
                        operator: "void",
                        expression: make_node(AST_Number, node, ***REMOVED***
                            value: 0
                        ***REMOVED***)
                    ***REMOVED***)
                ***REMOVED***);
            ***REMOVED***
            if (node instanceof AST_Lambda && node !== self) ***REMOVED***
                return node;
            ***REMOVED***
            if (node instanceof AST_Block) ***REMOVED***
                var index = node.body.length - 1;
                if (index >= 0) ***REMOVED***
                    node.body[index] = node.body[index].transform(tt);
                ***REMOVED***
            ***REMOVED***
            if (node instanceof AST_If) ***REMOVED***
                node.body = node.body.transform(tt);
                if (node.alternative) ***REMOVED***
                    node.alternative = node.alternative.transform(tt);
                ***REMOVED***
            ***REMOVED***
            if (node instanceof AST_With) ***REMOVED***
                node.body = node.body.transform(tt);
            ***REMOVED***
            return node;
        ***REMOVED***);
        return self.transform(tt);
    ***REMOVED***);

    AST_Node.DEFMETHOD("reset_opt_flags", function(compressor, rescan)***REMOVED***
        var reduce_vars = rescan && compressor.option("reduce_vars");
        var toplevel = compressor.option("toplevel");
        var safe_ids = Object.create(null);
        var suppressor = new TreeWalker(function(node) ***REMOVED***
            if (node instanceof AST_Symbol) ***REMOVED***
                var d = node.definition();
                if (node instanceof AST_SymbolRef) d.references.push(node);
                d.fixed = false;
            ***REMOVED***
        ***REMOVED***);
        var tw = new TreeWalker(function(node, descend)***REMOVED***
            node._squeezed = false;
            node._optimized = false;
            if (reduce_vars) ***REMOVED***
                if (node instanceof AST_Toplevel) node.globals.each(reset_def);
                if (node instanceof AST_Scope) node.variables.each(reset_def);
                if (node instanceof AST_SymbolRef) ***REMOVED***
                    var d = node.definition();
                    d.references.push(node);
                    if (d.fixed === undefined || !is_safe(d)
                        || is_modified(node, 0, node.fixed_value() instanceof AST_Lambda)) ***REMOVED***
                        d.fixed = false;
                    ***REMOVED*** else ***REMOVED***
                        var parent = tw.parent();
                        if (parent instanceof AST_Assign && parent.operator == "=" && node === parent.right
                            || parent instanceof AST_Call && node !== parent.expression
                            || parent instanceof AST_Return && node === parent.value && node.scope !== d.scope
                            || parent instanceof AST_VarDef && node === parent.value) ***REMOVED***
                            d.escaped = true;
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
                if (node instanceof AST_SymbolCatch) ***REMOVED***
                    node.definition().fixed = false;
                ***REMOVED***
                if (node instanceof AST_VarDef) ***REMOVED***
                    var d = node.name.definition();
                    if (d.fixed == null) ***REMOVED***
                        if (node.value) ***REMOVED***
                            d.fixed = function() ***REMOVED***
                                return node.value;
                            ***REMOVED***;
                            mark(d, false);
                            descend();
                        ***REMOVED*** else ***REMOVED***
                            d.fixed = null;
                        ***REMOVED***
                        mark(d, true);
                        return true;
                    ***REMOVED*** else if (node.value) ***REMOVED***
                        d.fixed = false;
                    ***REMOVED***
                ***REMOVED***
                if (node instanceof AST_Defun) ***REMOVED***
                    var d = node.name.definition();
                    if (!toplevel && d.global || is_safe(d)) ***REMOVED***
                        d.fixed = false;
                    ***REMOVED*** else ***REMOVED***
                        d.fixed = node;
                        mark(d, true);
                    ***REMOVED***
                    var save_ids = safe_ids;
                    safe_ids = Object.create(null);
                    descend();
                    safe_ids = save_ids;
                    return true;
                ***REMOVED***
                if (node instanceof AST_Function) ***REMOVED***
                    push();
                    var iife;
                    if (!node.name
                        && (iife = tw.parent()) instanceof AST_Call
                        && iife.expression === node) ***REMOVED***
                        // Virtually turn IIFE parameters into variable definitions:
                        //   (function(a,b) ***REMOVED***...***REMOVED***)(c,d) => (function() ***REMOVED***var a=c,b=d; ...***REMOVED***)()
                        // So existing transformation rules can work on them.
                        node.argnames.forEach(function(arg, i) ***REMOVED***
                            var d = arg.definition();
                            if (!node.uses_arguments && d.fixed === undefined) ***REMOVED***
                                d.fixed = function() ***REMOVED***
                                    return iife.args[i] || make_node(AST_Undefined, iife);
                                ***REMOVED***;
                                mark(d, true);
                            ***REMOVED*** else ***REMOVED***
                                d.fixed = false;
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                    descend();
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_Accessor) ***REMOVED***
                    var save_ids = safe_ids;
                    safe_ids = Object.create(null);
                    descend();
                    safe_ids = save_ids;
                    return true;
                ***REMOVED***
                if (node instanceof AST_Binary
                    && (node.operator == "&&" || node.operator == "||")) ***REMOVED***
                    node.left.walk(tw);
                    push();
                    node.right.walk(tw);
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_Conditional) ***REMOVED***
                    node.condition.walk(tw);
                    push();
                    node.consequent.walk(tw);
                    pop();
                    push();
                    node.alternative.walk(tw);
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_If || node instanceof AST_DWLoop) ***REMOVED***
                    node.condition.walk(tw);
                    push();
                    node.body.walk(tw);
                    pop();
                    if (node.alternative) ***REMOVED***
                        push();
                        node.alternative.walk(tw);
                        pop();
                    ***REMOVED***
                    return true;
                ***REMOVED***
                if (node instanceof AST_LabeledStatement) ***REMOVED***
                    push();
                    node.body.walk(tw);
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_For) ***REMOVED***
                    if (node.init) node.init.walk(tw);
                    push();
                    if (node.condition) node.condition.walk(tw);
                    node.body.walk(tw);
                    if (node.step) node.step.walk(tw);
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_ForIn) ***REMOVED***
                    node.init.walk(suppressor);
                    node.object.walk(tw);
                    push();
                    node.body.walk(tw);
                    pop();
                    return true;
                ***REMOVED***
                if (node instanceof AST_Try) ***REMOVED***
                    push();
                    walk_body(node, tw);
                    pop();
                    if (node.bcatch) ***REMOVED***
                        push();
                        node.bcatch.walk(tw);
                        pop();
                    ***REMOVED***
                    if (node.bfinally) node.bfinally.walk(tw);
                    return true;
                ***REMOVED***
                if (node instanceof AST_SwitchBranch) ***REMOVED***
                    push();
                    descend();
                    pop();
                    return true;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);
        this.walk(tw);

        function mark(def, safe) ***REMOVED***
            safe_ids[def.id] = safe;
        ***REMOVED***

        function is_safe(def) ***REMOVED***
            if (safe_ids[def.id]) ***REMOVED***
                if (def.fixed == null) ***REMOVED***
                    var orig = def.orig[0];
                    if (orig instanceof AST_SymbolFunarg || orig.name == "arguments") return false;
                    def.fixed = make_node(AST_Undefined, orig);
                ***REMOVED***
                return true;
            ***REMOVED***
        ***REMOVED***

        function push() ***REMOVED***
            safe_ids = Object.create(safe_ids);
        ***REMOVED***

        function pop() ***REMOVED***
            safe_ids = Object.getPrototypeOf(safe_ids);
        ***REMOVED***

        function reset_def(def) ***REMOVED***
            def.escaped = false;
            if (def.scope.uses_eval) ***REMOVED***
                def.fixed = false;
            ***REMOVED*** else if (toplevel || !def.global || def.orig[0] instanceof AST_SymbolConst) ***REMOVED***
                def.fixed = undefined;
            ***REMOVED*** else ***REMOVED***
                def.fixed = false;
            ***REMOVED***
            def.references = [];
            def.should_replace = undefined;
        ***REMOVED***

        function is_modified(node, level, func) ***REMOVED***
            var parent = tw.parent(level);
            if (is_lhs(node, parent)
                || !func && parent instanceof AST_Call && parent.expression === node) ***REMOVED***
                return true;
            ***REMOVED*** else if (parent instanceof AST_PropAccess && parent.expression === node) ***REMOVED***
                return !func && is_modified(parent, level + 1);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);

    AST_SymbolRef.DEFMETHOD("fixed_value", function() ***REMOVED***
        var fixed = this.definition().fixed;
        if (!fixed || fixed instanceof AST_Node) return fixed;
        return fixed();
    ***REMOVED***);

    function is_reference_const(ref) ***REMOVED***
        if (!(ref instanceof AST_SymbolRef)) return false;
        var orig = ref.definition().orig;
        for (var i = orig.length; --i >= 0;) ***REMOVED***
            if (orig[i] instanceof AST_SymbolConst) return true;
        ***REMOVED***
    ***REMOVED***

    function find_variable(compressor, name) ***REMOVED***
        var scope, i = 0;
        while (scope = compressor.parent(i++)) ***REMOVED***
            if (scope instanceof AST_Scope) break;
            if (scope instanceof AST_Catch) ***REMOVED***
                scope = scope.argname.definition().scope;
                break;
            ***REMOVED***
        ***REMOVED***
        return scope.find_variable(name);
    ***REMOVED***

    function make_node(ctor, orig, props) ***REMOVED***
        if (!props) props = ***REMOVED******REMOVED***;
        if (orig) ***REMOVED***
            if (!props.start) props.start = orig.start;
            if (!props.end) props.end = orig.end;
        ***REMOVED***
        return new ctor(props);
    ***REMOVED***;

    function make_node_from_constant(val, orig) ***REMOVED***
        switch (typeof val) ***REMOVED***
          case "string":
            return make_node(AST_String, orig, ***REMOVED***
                value: val
            ***REMOVED***);
          case "number":
            if (isNaN(val)) return make_node(AST_NaN, orig);
            if (isFinite(val)) ***REMOVED***
                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, ***REMOVED***
                    operator: "-",
                    expression: make_node(AST_Number, orig, ***REMOVED*** value: -val ***REMOVED***)
                ***REMOVED***) : make_node(AST_Number, orig, ***REMOVED*** value: val ***REMOVED***);
            ***REMOVED***
            return val < 0 ? make_node(AST_UnaryPrefix, orig, ***REMOVED***
                operator: "-",
                expression: make_node(AST_Infinity, orig)
            ***REMOVED***) : make_node(AST_Infinity, orig);
          case "boolean":
            return make_node(val ? AST_True : AST_False, orig);
          case "undefined":
            return make_node(AST_Undefined, orig);
          default:
            if (val === null) ***REMOVED***
                return make_node(AST_Null, orig, ***REMOVED*** value: null ***REMOVED***);
            ***REMOVED***
            if (val instanceof RegExp) ***REMOVED***
                return make_node(AST_RegExp, orig, ***REMOVED*** value: val ***REMOVED***);
            ***REMOVED***
            throw new Error(string_template("Can't handle constant of type: ***REMOVED***type***REMOVED***", ***REMOVED***
                type: typeof val
            ***REMOVED***));
        ***REMOVED***
    ***REMOVED***;

    // we shouldn't compress (1,func)(something) to
    // func(something) because that changes the meaning of
    // the func (becomes lexical instead of global).
    function maintain_this_binding(parent, orig, val) ***REMOVED***
        if (parent instanceof AST_UnaryPrefix && parent.operator == "delete"
            || parent instanceof AST_Call && parent.expression === orig
                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == "eval")) ***REMOVED***
            return make_node(AST_Seq, orig, ***REMOVED***
                car: make_node(AST_Number, orig, ***REMOVED***
                    value: 0
                ***REMOVED***),
                cdr: val
            ***REMOVED***);
        ***REMOVED***
        return val;
    ***REMOVED***

    function as_statement_array(thing) ***REMOVED***
        if (thing === null) return [];
        if (thing instanceof AST_BlockStatement) return thing.body;
        if (thing instanceof AST_EmptyStatement) return [];
        if (thing instanceof AST_Statement) return [ thing ];
        throw new Error("Can't convert thing to statement array");
    ***REMOVED***;

    function is_empty(thing) ***REMOVED***
        if (thing === null) return true;
        if (thing instanceof AST_EmptyStatement) return true;
        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;
        return false;
    ***REMOVED***;

    function loop_body(x) ***REMOVED***
        if (x instanceof AST_Switch) return x;
        if (x instanceof AST_For || x instanceof AST_ForIn || x instanceof AST_DWLoop) ***REMOVED***
            return (x.body instanceof AST_BlockStatement ? x.body : x);
        ***REMOVED***
        return x;
    ***REMOVED***;

    function is_iife_call(node) ***REMOVED***
        if (node instanceof AST_Call && !(node instanceof AST_New)) ***REMOVED***
            return node.expression instanceof AST_Function || is_iife_call(node.expression);
        ***REMOVED***
        return false;
    ***REMOVED***

    function tighten_body(statements, compressor) ***REMOVED***
        var CHANGED, max_iter = 10;
        do ***REMOVED***
            CHANGED = false;
            if (compressor.option("angular")) ***REMOVED***
                statements = process_for_angular(statements);
            ***REMOVED***
            statements = eliminate_spurious_blocks(statements);
            if (compressor.option("dead_code")) ***REMOVED***
                statements = eliminate_dead_code(statements, compressor);
            ***REMOVED***
            if (compressor.option("if_return")) ***REMOVED***
                statements = handle_if_return(statements, compressor);
            ***REMOVED***
            if (compressor.sequences_limit > 0) ***REMOVED***
                statements = sequencesize(statements, compressor);
            ***REMOVED***
            if (compressor.option("join_vars")) ***REMOVED***
                statements = join_consecutive_vars(statements, compressor);
            ***REMOVED***
            if (compressor.option("collapse_vars")) ***REMOVED***
                statements = collapse_single_use_vars(statements, compressor);
            ***REMOVED***
        ***REMOVED*** while (CHANGED && max_iter-- > 0);

        return statements;

        function collapse_single_use_vars(statements, compressor) ***REMOVED***
            // Iterate statements backwards looking for a statement with a var/const
            // declaration immediately preceding it. Grab the rightmost var definition
            // and if it has exactly one reference then attempt to replace its reference
            // in the statement with the var value and then erase the var definition.

            var self = compressor.self();
            var var_defs_removed = false;
            var toplevel = compressor.option("toplevel");
            for (var stat_index = statements.length; --stat_index >= 0;) ***REMOVED***
                var stat = statements[stat_index];
                if (stat instanceof AST_Definitions) continue;

                // Process child blocks of statement if present.
                [stat, stat.body, stat.alternative, stat.bcatch, stat.bfinally].forEach(function(node) ***REMOVED***
                    node && node.body && collapse_single_use_vars(node.body, compressor);
                ***REMOVED***);

                // The variable definition must precede a statement.
                if (stat_index <= 0) break;
                var prev_stat_index = stat_index - 1;
                var prev_stat = statements[prev_stat_index];
                if (!(prev_stat instanceof AST_Definitions)) continue;
                var var_defs = prev_stat.definitions;
                if (var_defs == null) continue;

                var var_names_seen = ***REMOVED******REMOVED***;
                var side_effects_encountered = false;
                var lvalues_encountered = false;
                var lvalues = ***REMOVED******REMOVED***;

                // Scan variable definitions from right to left.
                for (var var_defs_index = var_defs.length; --var_defs_index >= 0;) ***REMOVED***

                    // Obtain var declaration and var name with basic sanity check.
                    var var_decl = var_defs[var_defs_index];
                    if (var_decl.value == null) break;
                    var var_name = var_decl.name.name;
                    if (!var_name || !var_name.length) break;

                    // Bail if we've seen a var definition of same name before.
                    if (var_name in var_names_seen) break;
                    var_names_seen[var_name] = true;

                    // Only interested in cases with just one reference to the variable.
                    var def = self.find_variable && self.find_variable(var_name);
                    if (!def || !def.references || def.references.length !== 1
                        || var_name == "arguments" || (!toplevel && def.global)) ***REMOVED***
                        side_effects_encountered = true;
                        continue;
                    ***REMOVED***
                    var ref = def.references[0];

                    // Don't replace ref if eval() or with statement in scope.
                    if (ref.scope.uses_eval || ref.scope.uses_with) break;

                    // Constant single use vars can be replaced in any scope.
                    if (var_decl.value.is_constant()) ***REMOVED***
                        var ctt = new TreeTransformer(function(node) ***REMOVED***
                            var parent = ctt.parent();
                            if (parent instanceof AST_IterationStatement
                                && (parent.condition === node || parent.init === node)) ***REMOVED***
                                return node;
                            ***REMOVED***
                            if (node === ref)
                                return replace_var(node, parent, true);
                        ***REMOVED***);
                        stat.transform(ctt);
                        continue;
                    ***REMOVED***

                    // Restrict var replacement to constants if side effects encountered.
                    if (side_effects_encountered |= lvalues_encountered) continue;

                    var value_has_side_effects = var_decl.value.has_side_effects(compressor);
                    // Non-constant single use vars can only be replaced in same scope.
                    if (ref.scope !== self) ***REMOVED***
                        side_effects_encountered |= value_has_side_effects;
                        continue;
                    ***REMOVED***

                    // Detect lvalues in var value.
                    var tw = new TreeWalker(function(node)***REMOVED***
                        if (node instanceof AST_SymbolRef && is_lvalue(node, tw.parent())) ***REMOVED***
                            lvalues[node.name] = lvalues_encountered = true;
                        ***REMOVED***
                    ***REMOVED***);
                    var_decl.value.walk(tw);

                    // Replace the non-constant single use var in statement if side effect free.
                    var unwind = false;
                    var tt = new TreeTransformer(
                        function preorder(node) ***REMOVED***
                            if (unwind) return node;
                            var parent = tt.parent();
                            if (node instanceof AST_Lambda
                                || node instanceof AST_Try
                                || node instanceof AST_With
                                || node instanceof AST_Case
                                || node instanceof AST_IterationStatement
                                || (parent instanceof AST_If          && node !== parent.condition)
                                || (parent instanceof AST_Conditional && node !== parent.condition)
                                || (node instanceof AST_SymbolRef
                                    && value_has_side_effects
                                    && !are_references_in_scope(node.definition(), self))
                                || (parent instanceof AST_Binary
                                    && (parent.operator == "&&" || parent.operator == "||")
                                    && node === parent.right)
                                || (parent instanceof AST_Switch && node !== parent.expression)) ***REMOVED***
                                return side_effects_encountered = unwind = true, node;
                            ***REMOVED***
                            function are_references_in_scope(def, scope) ***REMOVED***
                                if (def.orig.length === 1
                                    && def.orig[0] instanceof AST_SymbolDefun) return true;
                                if (def.scope !== scope) return false;
                                var refs = def.references;
                                for (var i = 0, len = refs.length; i < len; i++) ***REMOVED***
                                    if (refs[i].scope !== scope) return false;
                                ***REMOVED***
                                return true;
                            ***REMOVED***
                        ***REMOVED***,
                        function postorder(node) ***REMOVED***
                            if (unwind) return node;
                            if (node === ref)
                                return unwind = true, replace_var(node, tt.parent(), false);
                            if (side_effects_encountered |= node.has_side_effects(compressor))
                                return unwind = true, node;
                            if (lvalues_encountered && node instanceof AST_SymbolRef && node.name in lvalues) ***REMOVED***
                                side_effects_encountered = true;
                                return unwind = true, node;
                            ***REMOVED***
                        ***REMOVED***
                    );
                    stat.transform(tt);
                ***REMOVED***
            ***REMOVED***

            // Remove extraneous empty statments in block after removing var definitions.
            // Leave at least one statement in `statements`.
            if (var_defs_removed) for (var i = statements.length; --i >= 0;) ***REMOVED***
                if (statements.length > 1 && statements[i] instanceof AST_EmptyStatement)
                    statements.splice(i, 1);
            ***REMOVED***

            return statements;

            function is_lvalue(node, parent) ***REMOVED***
                return node instanceof AST_SymbolRef && is_lhs(node, parent);
            ***REMOVED***
            function replace_var(node, parent, is_constant) ***REMOVED***
                if (is_lvalue(node, parent)) return node;

                // Remove var definition and return its value to the TreeTransformer to replace.
                var value = maintain_this_binding(parent, node, var_decl.value);
                var_decl.value = null;

                var_defs.splice(var_defs_index, 1);
                if (var_defs.length === 0) ***REMOVED***
                    statements[prev_stat_index] = make_node(AST_EmptyStatement, self);
                    var_defs_removed = true;
                ***REMOVED***
                // Further optimize statement after substitution.
                stat.reset_opt_flags(compressor);

                compressor.info("Collapsing " + (is_constant ? "constant" : "variable") +
                    " " + var_name + " [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", node.start);
                CHANGED = true;
                return value;
            ***REMOVED***
        ***REMOVED***

        function process_for_angular(statements) ***REMOVED***
            function has_inject(comment) ***REMOVED***
                return /@ngInject/.test(comment.value);
            ***REMOVED***
            function make_arguments_names_list(func) ***REMOVED***
                return func.argnames.map(function(sym)***REMOVED***
                    return make_node(AST_String, sym, ***REMOVED*** value: sym.name ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
            function make_array(orig, elements) ***REMOVED***
                return make_node(AST_Array, orig, ***REMOVED*** elements: elements ***REMOVED***);
            ***REMOVED***
            function make_injector(func, name) ***REMOVED***
                return make_node(AST_SimpleStatement, func, ***REMOVED***
                    body: make_node(AST_Assign, func, ***REMOVED***
                        operator: "=",
                        left: make_node(AST_Dot, name, ***REMOVED***
                            expression: make_node(AST_SymbolRef, name, name),
                            property: "$inject"
                        ***REMOVED***),
                        right: make_array(func, make_arguments_names_list(func))
                    ***REMOVED***)
                ***REMOVED***);
            ***REMOVED***
            function check_expression(body) ***REMOVED***
                if (body && body.args) ***REMOVED***
                    // if this is a function call check all of arguments passed
                    body.args.forEach(function(argument, index, array) ***REMOVED***
                        var comments = argument.start.comments_before;
                        // if the argument is function preceded by @ngInject
                        if (argument instanceof AST_Lambda && comments.length && has_inject(comments[0])) ***REMOVED***
                            // replace the function with an array of names of its parameters and function at the end
                            array[index] = make_array(argument, make_arguments_names_list(argument).concat(argument));
                        ***REMOVED***
                    ***REMOVED***);
                    // if this is chained call check previous one recursively
                    if (body.expression && body.expression.expression) ***REMOVED***
                        check_expression(body.expression.expression);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            return statements.reduce(function(a, stat)***REMOVED***
                a.push(stat);

                if (stat.body && stat.body.args) ***REMOVED***
                    check_expression(stat.body);
                ***REMOVED*** else ***REMOVED***
                    var token = stat.start;
                    var comments = token.comments_before;
                    if (comments && comments.length > 0) ***REMOVED***
                        var last = comments.pop();
                        if (has_inject(last)) ***REMOVED***
                            // case 1: defun
                            if (stat instanceof AST_Defun) ***REMOVED***
                                a.push(make_injector(stat, stat.name));
                            ***REMOVED***
                            else if (stat instanceof AST_Definitions) ***REMOVED***
                                stat.definitions.forEach(function(def) ***REMOVED***
                                    if (def.value && def.value instanceof AST_Lambda) ***REMOVED***
                                        a.push(make_injector(def.value, def.name));
                                    ***REMOVED***
                                ***REMOVED***);
                            ***REMOVED***
                            else ***REMOVED***
                                compressor.warn("Unknown statement marked with @ngInject [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", token);
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***

                return a;
            ***REMOVED***, []);
        ***REMOVED***

        function eliminate_spurious_blocks(statements) ***REMOVED***
            var seen_dirs = [];
            return statements.reduce(function(a, stat)***REMOVED***
                if (stat instanceof AST_BlockStatement) ***REMOVED***
                    CHANGED = true;
                    a.push.apply(a, eliminate_spurious_blocks(stat.body));
                ***REMOVED*** else if (stat instanceof AST_EmptyStatement) ***REMOVED***
                    CHANGED = true;
                ***REMOVED*** else if (stat instanceof AST_Directive) ***REMOVED***
                    if (seen_dirs.indexOf(stat.value) < 0) ***REMOVED***
                        a.push(stat);
                        seen_dirs.push(stat.value);
                    ***REMOVED*** else ***REMOVED***
                        CHANGED = true;
                    ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                    a.push(stat);
                ***REMOVED***
                return a;
            ***REMOVED***, []);
        ***REMOVED***;

        function handle_if_return(statements, compressor) ***REMOVED***
            var self = compressor.self();
            var multiple_if_returns = has_multiple_if_returns(statements);
            var in_lambda = self instanceof AST_Lambda;
            var ret = []; // Optimized statements, build from tail to front
            loop: for (var i = statements.length; --i >= 0;) ***REMOVED***
                var stat = statements[i];
                switch (true) ***REMOVED***
                  case (in_lambda && stat instanceof AST_Return && !stat.value && ret.length == 0):
                    CHANGED = true;
                    // note, ret.length is probably always zero
                    // because we drop unreachable code before this
                    // step.  nevertheless, it's good to check.
                    continue loop;
                  case stat instanceof AST_If:
                    if (stat.body instanceof AST_Return) ***REMOVED***
                        //---
                        // pretty silly case, but:
                        // if (foo()) return; return; ==> foo(); return;
                        if (((in_lambda && ret.length == 0)
                             || (ret[0] instanceof AST_Return && !ret[0].value))
                            && !stat.body.value && !stat.alternative) ***REMOVED***
                            CHANGED = true;
                            var cond = make_node(AST_SimpleStatement, stat.condition, ***REMOVED***
                                body: stat.condition
                            ***REMOVED***);
                            ret.unshift(cond);
                            continue loop;
                        ***REMOVED***
                        //---
                        // if (foo()) return x; return y; ==> return foo() ? x : y;
                        if (ret[0] instanceof AST_Return && stat.body.value && ret[0].value && !stat.alternative) ***REMOVED***
                            CHANGED = true;
                            stat = stat.clone();
                            stat.alternative = ret[0];
                            ret[0] = stat.transform(compressor);
                            continue loop;
                        ***REMOVED***
                        //---
                        // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;
                        if (multiple_if_returns && (ret.length == 0 || ret[0] instanceof AST_Return)
                            && stat.body.value && !stat.alternative && in_lambda) ***REMOVED***
                            CHANGED = true;
                            stat = stat.clone();
                            stat.alternative = ret[0] || make_node(AST_Return, stat, ***REMOVED***
                                value: null
                            ***REMOVED***);
                            ret[0] = stat.transform(compressor);
                            continue loop;
                        ***REMOVED***
                        //---
                        // if (foo()) return; [ else x... ]; y... ==> if (!foo()) ***REMOVED*** x...; y... ***REMOVED***
                        if (!stat.body.value && in_lambda) ***REMOVED***
                            CHANGED = true;
                            stat = stat.clone();
                            stat.condition = stat.condition.negate(compressor);
                            var body = as_statement_array(stat.alternative).concat(ret);
                            var funs = extract_functions_from_statement_array(body);
                            stat.body = make_node(AST_BlockStatement, stat, ***REMOVED***
                                body: body
                            ***REMOVED***);
                            stat.alternative = null;
                            ret = funs.concat([ stat.transform(compressor) ]);
                            continue loop;
                        ***REMOVED***

                        //---
                        // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;
                        //
                        // if sequences is not enabled, this can lead to an endless loop (issue #866).
                        // however, with sequences on this helps producing slightly better output for
                        // the example code.
                        if (compressor.option("sequences")
                            && i > 0 && statements[i - 1] instanceof AST_If && statements[i - 1].body instanceof AST_Return
                            && ret.length == 1 && in_lambda && ret[0] instanceof AST_SimpleStatement
                            && !stat.alternative) ***REMOVED***
                            CHANGED = true;
                            ret.push(make_node(AST_Return, ret[0], ***REMOVED***
                                value: null
                            ***REMOVED***).transform(compressor));
                            ret.unshift(stat);
                            continue loop;
                        ***REMOVED***
                    ***REMOVED***

                    var ab = aborts(stat.body);
                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;
                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)
                               || (ab instanceof AST_Continue && self === loop_body(lct))
                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) ***REMOVED***
                        if (ab.label) ***REMOVED***
                            remove(ab.label.thedef.references, ab);
                        ***REMOVED***
                        CHANGED = true;
                        var body = as_statement_array(stat.body).slice(0, -1);
                        stat = stat.clone();
                        stat.condition = stat.condition.negate(compressor);
                        stat.body = make_node(AST_BlockStatement, stat, ***REMOVED***
                            body: as_statement_array(stat.alternative).concat(ret)
                        ***REMOVED***);
                        stat.alternative = make_node(AST_BlockStatement, stat, ***REMOVED***
                            body: body
                        ***REMOVED***);
                        ret = [ stat.transform(compressor) ];
                        continue loop;
                    ***REMOVED***

                    var ab = aborts(stat.alternative);
                    var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;
                    if (ab && ((ab instanceof AST_Return && !ab.value && in_lambda)
                               || (ab instanceof AST_Continue && self === loop_body(lct))
                               || (ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct))) ***REMOVED***
                        if (ab.label) ***REMOVED***
                            remove(ab.label.thedef.references, ab);
                        ***REMOVED***
                        CHANGED = true;
                        stat = stat.clone();
                        stat.body = make_node(AST_BlockStatement, stat.body, ***REMOVED***
                            body: as_statement_array(stat.body).concat(ret)
                        ***REMOVED***);
                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, ***REMOVED***
                            body: as_statement_array(stat.alternative).slice(0, -1)
                        ***REMOVED***);
                        ret = [ stat.transform(compressor) ];
                        continue loop;
                    ***REMOVED***

                    ret.unshift(stat);
                    break;
                  default:
                    ret.unshift(stat);
                    break;
                ***REMOVED***
            ***REMOVED***
            return ret;

            function has_multiple_if_returns(statements) ***REMOVED***
                var n = 0;
                for (var i = statements.length; --i >= 0;) ***REMOVED***
                    var stat = statements[i];
                    if (stat instanceof AST_If && stat.body instanceof AST_Return) ***REMOVED***
                        if (++n > 1) return true;
                    ***REMOVED***
                ***REMOVED***
                return false;
            ***REMOVED***
        ***REMOVED***;

        function eliminate_dead_code(statements, compressor) ***REMOVED***
            var has_quit = false;
            var orig = statements.length;
            var self = compressor.self();
            statements = statements.reduce(function(a, stat)***REMOVED***
                if (has_quit) ***REMOVED***
                    extract_declarations_from_unreachable_code(compressor, stat, a);
                ***REMOVED*** else ***REMOVED***
                    if (stat instanceof AST_LoopControl) ***REMOVED***
                        var lct = compressor.loopcontrol_target(stat);
                        if ((stat instanceof AST_Break
                             && !(lct instanceof AST_IterationStatement)
                             && loop_body(lct) === self) || (stat instanceof AST_Continue
                                                             && loop_body(lct) === self)) ***REMOVED***
                            if (stat.label) ***REMOVED***
                                remove(stat.label.thedef.references, stat);
                            ***REMOVED***
                        ***REMOVED*** else ***REMOVED***
                            a.push(stat);
                        ***REMOVED***
                    ***REMOVED*** else ***REMOVED***
                        a.push(stat);
                    ***REMOVED***
                    if (aborts(stat)) has_quit = true;
                ***REMOVED***
                return a;
            ***REMOVED***, []);
            CHANGED = statements.length != orig;
            return statements;
        ***REMOVED***;

        function sequencesize(statements, compressor) ***REMOVED***
            if (statements.length < 2) return statements;
            var seq = [], ret = [];
            function push_seq() ***REMOVED***
                seq = AST_Seq.from_array(seq);
                if (seq) ret.push(make_node(AST_SimpleStatement, seq, ***REMOVED***
                    body: seq
                ***REMOVED***));
                seq = [];
            ***REMOVED***;
            statements.forEach(function(stat)***REMOVED***
                if (stat instanceof AST_SimpleStatement) ***REMOVED***
                    if (seqLength(seq) >= compressor.sequences_limit) push_seq();
                    var body = stat.body;
                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);
                    if (body) seq.push(body);
                ***REMOVED*** else ***REMOVED***
                    push_seq();
                    ret.push(stat);
                ***REMOVED***
            ***REMOVED***);
            push_seq();
            ret = sequencesize_2(ret, compressor);
            CHANGED = ret.length != statements.length;
            return ret;
        ***REMOVED***;

        function seqLength(a) ***REMOVED***
            for (var len = 0, i = 0; i < a.length; ++i) ***REMOVED***
                var stat = a[i];
                if (stat instanceof AST_Seq) ***REMOVED***
                    len += stat.len();
                ***REMOVED*** else ***REMOVED***
                    len++;
                ***REMOVED***
            ***REMOVED***
            return len;
        ***REMOVED***;

        function sequencesize_2(statements, compressor) ***REMOVED***
            function cons_seq(right) ***REMOVED***
                ret.pop();
                var left = prev.body;
                if (left instanceof AST_Seq) ***REMOVED***
                    left.add(right);
                ***REMOVED*** else ***REMOVED***
                    left = AST_Seq.cons(left, right);
                ***REMOVED***
                return left.transform(compressor);
            ***REMOVED***;
            var ret = [], prev = null;
            statements.forEach(function(stat)***REMOVED***
                if (prev) ***REMOVED***
                    if (stat instanceof AST_For) ***REMOVED***
                        var opera = ***REMOVED******REMOVED***;
                        try ***REMOVED***
                            prev.body.walk(new TreeWalker(function(node)***REMOVED***
                                if (node instanceof AST_Binary && node.operator == "in")
                                    throw opera;
                            ***REMOVED***));
                            if (stat.init && !(stat.init instanceof AST_Definitions)) ***REMOVED***
                                stat.init = cons_seq(stat.init);
                            ***REMOVED***
                            else if (!stat.init) ***REMOVED***
                                stat.init = prev.body.drop_side_effect_free(compressor);
                                ret.pop();
                            ***REMOVED***
                        ***REMOVED*** catch(ex) ***REMOVED***
                            if (ex !== opera) throw ex;
                        ***REMOVED***
                    ***REMOVED***
                    else if (stat instanceof AST_If) ***REMOVED***
                        stat.condition = cons_seq(stat.condition);
                    ***REMOVED***
                    else if (stat instanceof AST_With) ***REMOVED***
                        stat.expression = cons_seq(stat.expression);
                    ***REMOVED***
                    else if (stat instanceof AST_Exit && stat.value) ***REMOVED***
                        stat.value = cons_seq(stat.value);
                    ***REMOVED***
                    else if (stat instanceof AST_Exit) ***REMOVED***
                        stat.value = cons_seq(make_node(AST_Undefined, stat).transform(compressor));
                    ***REMOVED***
                    else if (stat instanceof AST_Switch) ***REMOVED***
                        stat.expression = cons_seq(stat.expression);
                    ***REMOVED***
                ***REMOVED***
                ret.push(stat);
                prev = stat instanceof AST_SimpleStatement ? stat : null;
            ***REMOVED***);
            return ret;
        ***REMOVED***;

        function join_consecutive_vars(statements, compressor) ***REMOVED***
            var prev = null;
            return statements.reduce(function(a, stat)***REMOVED***
                if (stat instanceof AST_Definitions && prev && prev.TYPE == stat.TYPE) ***REMOVED***
                    prev.definitions = prev.definitions.concat(stat.definitions);
                    CHANGED = true;
                ***REMOVED***
                else if (stat instanceof AST_For
                         && prev instanceof AST_Var
                         && (!stat.init || stat.init.TYPE == prev.TYPE)) ***REMOVED***
                    CHANGED = true;
                    a.pop();
                    if (stat.init) ***REMOVED***
                        stat.init.definitions = prev.definitions.concat(stat.init.definitions);
                    ***REMOVED*** else ***REMOVED***
                        stat.init = prev;
                    ***REMOVED***
                    a.push(stat);
                    prev = stat;
                ***REMOVED***
                else ***REMOVED***
                    prev = stat;
                    a.push(stat);
                ***REMOVED***
                return a;
            ***REMOVED***, []);
        ***REMOVED***;

    ***REMOVED***;

    function extract_functions_from_statement_array(statements) ***REMOVED***
        var funs = [];
        for (var i = statements.length - 1; i >= 0; --i) ***REMOVED***
            var stat = statements[i];
            if (stat instanceof AST_Defun) ***REMOVED***
                statements.splice(i, 1);
                funs.unshift(stat);
            ***REMOVED***
        ***REMOVED***
        return funs;
    ***REMOVED***

    function extract_declarations_from_unreachable_code(compressor, stat, target) ***REMOVED***
        if (!(stat instanceof AST_Defun)) ***REMOVED***
            compressor.warn("Dropping unreachable code [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", stat.start);
        ***REMOVED***
        stat.walk(new TreeWalker(function(node)***REMOVED***
            if (node instanceof AST_Definitions) ***REMOVED***
                compressor.warn("Declarations in unreachable code! [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", node.start);
                node.remove_initializers();
                target.push(node);
                return true;
            ***REMOVED***
            if (node instanceof AST_Defun) ***REMOVED***
                target.push(node);
                return true;
            ***REMOVED***
            if (node instanceof AST_Scope) ***REMOVED***
                return true;
            ***REMOVED***
        ***REMOVED***));
    ***REMOVED***;

    function is_undefined(node, compressor) ***REMOVED***
        return node.is_undefined
            || node instanceof AST_Undefined
            || node instanceof AST_UnaryPrefix
                && node.operator == "void"
                && !node.expression.has_side_effects(compressor);
    ***REMOVED***

    // may_throw_on_access()
    // returns true if this node may be null, undefined or contain `AST_Accessor`
    (function(def) ***REMOVED***
        AST_Node.DEFMETHOD("may_throw_on_access", function(compressor) ***REMOVED***
            var pure_getters = compressor.option("pure_getters");
            return !pure_getters || this._throw_on_access(pure_getters);
        ***REMOVED***);

        function is_strict(pure_getters) ***REMOVED***
            return /strict/.test(pure_getters);
        ***REMOVED***

        def(AST_Node, is_strict);
        def(AST_Null, return_true);
        def(AST_Undefined, return_true);
        def(AST_Constant, return_false);
        def(AST_Array, return_false);
        def(AST_Object, function(pure_getters) ***REMOVED***
            if (!is_strict(pure_getters)) return false;
            for (var i = this.properties.length; --i >=0;)
                if (this.properties[i].value instanceof AST_Accessor) return true;
            return false;
        ***REMOVED***);
        def(AST_Function, return_false);
        def(AST_UnaryPostfix, return_false);
        def(AST_UnaryPrefix, function() ***REMOVED***
            return this.operator == "void";
        ***REMOVED***);
        def(AST_Binary, function(pure_getters) ***REMOVED***
            switch (this.operator) ***REMOVED***
              case "&&":
                return this.left._throw_on_access(pure_getters);
              case "||":
                return this.left._throw_on_access(pure_getters)
                    && this.right._throw_on_access(pure_getters);
              default:
                return false;
            ***REMOVED***
        ***REMOVED***)
        def(AST_Assign, function(pure_getters) ***REMOVED***
            return this.operator == "="
                && this.right._throw_on_access(pure_getters);
        ***REMOVED***)
        def(AST_Conditional, function(pure_getters) ***REMOVED***
            return this.consequent._throw_on_access(pure_getters)
                || this.alternative._throw_on_access(pure_getters);
        ***REMOVED***)
        def(AST_Seq, function(pure_getters) ***REMOVED***
            return this.cdr._throw_on_access(pure_getters);
        ***REMOVED***);
        def(AST_SymbolRef, function(pure_getters) ***REMOVED***
            if (this.is_undefined) return true;
            if (!is_strict(pure_getters)) return false;
            var fixed = this.fixed_value();
            return !fixed || fixed._throw_on_access(pure_getters);
        ***REMOVED***);
    ***REMOVED***)(function(node, func) ***REMOVED***
        node.DEFMETHOD("_throw_on_access", func);
    ***REMOVED***);

    /* -----[ boolean/negation helpers ]----- */

    // methods to determine whether an expression has a boolean result type
    (function (def)***REMOVED***
        var unary_bool = [ "!", "delete" ];
        var binary_bool = [ "in", "instanceof", "==", "!=", "===", "!==", "<", "<=", ">=", ">" ];
        def(AST_Node, return_false);
        def(AST_UnaryPrefix, function()***REMOVED***
            return member(this.operator, unary_bool);
        ***REMOVED***);
        def(AST_Binary, function()***REMOVED***
            return member(this.operator, binary_bool) ||
                ( (this.operator == "&&" || this.operator == "||") &&
                  this.left.is_boolean() && this.right.is_boolean() );
        ***REMOVED***);
        def(AST_Conditional, function()***REMOVED***
            return this.consequent.is_boolean() && this.alternative.is_boolean();
        ***REMOVED***);
        def(AST_Assign, function()***REMOVED***
            return this.operator == "=" && this.right.is_boolean();
        ***REMOVED***);
        def(AST_Seq, function()***REMOVED***
            return this.cdr.is_boolean();
        ***REMOVED***);
        def(AST_True, return_true);
        def(AST_False, return_true);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("is_boolean", func);
    ***REMOVED***);

    // methods to determine if an expression has a numeric result type
    (function (def)***REMOVED***
        def(AST_Node, return_false);
        def(AST_Number, return_true);
        var unary = makePredicate("+ - ~ ++ --");
        def(AST_Unary, function()***REMOVED***
            return unary(this.operator);
        ***REMOVED***);
        var binary = makePredicate("- * / % & | ^ << >> >>>");
        def(AST_Binary, function(compressor)***REMOVED***
            return binary(this.operator) || this.operator == "+"
                && this.left.is_number(compressor)
                && this.right.is_number(compressor);
        ***REMOVED***);
        def(AST_Assign, function(compressor)***REMOVED***
            return binary(this.operator.slice(0, -1))
                || this.operator == "=" && this.right.is_number(compressor);
        ***REMOVED***);
        def(AST_Seq, function(compressor)***REMOVED***
            return this.cdr.is_number(compressor);
        ***REMOVED***);
        def(AST_Conditional, function(compressor)***REMOVED***
            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("is_number", func);
    ***REMOVED***);

    // methods to determine if an expression has a string result type
    (function (def)***REMOVED***
        def(AST_Node, return_false);
        def(AST_String, return_true);
        def(AST_UnaryPrefix, function()***REMOVED***
            return this.operator == "typeof";
        ***REMOVED***);
        def(AST_Binary, function(compressor)***REMOVED***
            return this.operator == "+" &&
                (this.left.is_string(compressor) || this.right.is_string(compressor));
        ***REMOVED***);
        def(AST_Assign, function(compressor)***REMOVED***
            return (this.operator == "=" || this.operator == "+=") && this.right.is_string(compressor);
        ***REMOVED***);
        def(AST_Seq, function(compressor)***REMOVED***
            return this.cdr.is_string(compressor);
        ***REMOVED***);
        def(AST_Conditional, function(compressor)***REMOVED***
            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("is_string", func);
    ***REMOVED***);

    var unary_side_effects = makePredicate("delete ++ --");

    function is_lhs(node, parent) ***REMOVED***
        if (parent instanceof AST_Unary && unary_side_effects(parent.operator)) return parent.expression;
        if (parent instanceof AST_Assign && parent.left === node) return node;
    ***REMOVED***

    (function (def)***REMOVED***
        AST_Node.DEFMETHOD("resolve_defines", function(compressor) ***REMOVED***
            if (!compressor.option("global_defs")) return;
            var def = this._find_defs(compressor, "");
            if (def) ***REMOVED***
                var node, parent = this, level = 0;
                do ***REMOVED***
                    node = parent;
                    parent = compressor.parent(level++);
                ***REMOVED*** while (parent instanceof AST_PropAccess && parent.expression === node);
                if (is_lhs(node, parent)) ***REMOVED***
                    compressor.warn('global_defs ' + this.print_to_string() + ' redefined [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]', this.start);
                ***REMOVED*** else ***REMOVED***
                    return def;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);
        function to_node(value, orig) ***REMOVED***
            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);
            if (Array.isArray(value)) return make_node(AST_Array, orig, ***REMOVED***
                elements: value.map(function(value) ***REMOVED***
                    return to_node(value, orig);
                ***REMOVED***)
            ***REMOVED***);
            if (value && typeof value == "object") ***REMOVED***
                var props = [];
                for (var key in value) ***REMOVED***
                    props.push(make_node(AST_ObjectKeyVal, orig, ***REMOVED***
                        key: key,
                        value: to_node(value[key], orig)
                    ***REMOVED***));
                ***REMOVED***
                return make_node(AST_Object, orig, ***REMOVED***
                    properties: props
                ***REMOVED***);
            ***REMOVED***
            return make_node_from_constant(value, orig);
        ***REMOVED***
        def(AST_Node, noop);
        def(AST_Dot, function(compressor, suffix)***REMOVED***
            return this.expression._find_defs(compressor, "." + this.property + suffix);
        ***REMOVED***);
        def(AST_SymbolRef, function(compressor, suffix)***REMOVED***
            if (!this.global()) return;
            var name;
            var defines = compressor.option("global_defs");
            if (defines && HOP(defines, (name = this.name + suffix))) ***REMOVED***
                var node = to_node(defines[name], this);
                var top = compressor.find_parent(AST_Toplevel);
                node.walk(new TreeWalker(function(node) ***REMOVED***
                    if (node instanceof AST_SymbolRef) ***REMOVED***
                        node.scope = top;
                        node.thedef = top.def_global(node);
                    ***REMOVED***
                ***REMOVED***));
                return node;
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("_find_defs", func);
    ***REMOVED***);

    function best_of_expression(ast1, ast2) ***REMOVED***
        return ast1.print_to_string().length >
            ast2.print_to_string().length
            ? ast2 : ast1;
    ***REMOVED***

    function best_of_statement(ast1, ast2) ***REMOVED***
        return best_of_expression(make_node(AST_SimpleStatement, ast1, ***REMOVED***
            body: ast1
        ***REMOVED***), make_node(AST_SimpleStatement, ast2, ***REMOVED***
            body: ast2
        ***REMOVED***)).body;
    ***REMOVED***

    function best_of(compressor, ast1, ast2) ***REMOVED***
        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);
    ***REMOVED***

    // methods to evaluate a constant expression
    (function (def)***REMOVED***
        // If the node has been successfully reduced to a constant,
        // then its value is returned; otherwise the element itself
        // is returned.
        // They can be distinguished as constant value is never a
        // descendant of AST_Node.
        AST_Node.DEFMETHOD("evaluate", function(compressor)***REMOVED***
            if (!compressor.option("evaluate")) return this;
            try ***REMOVED***
                var val = this._eval(compressor);
                return !val || val instanceof RegExp || typeof val != "object" ? val : this;
            ***REMOVED*** catch(ex) ***REMOVED***
                if (ex !== def) throw ex;
                return this;
            ***REMOVED***
        ***REMOVED***);
        var unaryPrefix = makePredicate("! ~ - + void");
        AST_Node.DEFMETHOD("is_constant", function()***REMOVED***
            // Accomodate when compress option evaluate=false
            // as well as the common constant expressions !0 and -1
            if (this instanceof AST_Constant) ***REMOVED***
                return !(this instanceof AST_RegExp);
            ***REMOVED*** else ***REMOVED***
                return this instanceof AST_UnaryPrefix
                    && this.expression instanceof AST_Constant
                    && unaryPrefix(this.operator);
            ***REMOVED***
        ***REMOVED***);
        // Obtain the constant value of an expression already known to be constant.
        // Result only valid iff this.is_constant() is true.
        AST_Node.DEFMETHOD("constant_value", function(compressor)***REMOVED***
            // Accomodate when option evaluate=false.
            if (this instanceof AST_Constant && !(this instanceof AST_RegExp)) ***REMOVED***
                return this.value;
            ***REMOVED***
            // Accomodate the common constant expressions !0 and -1 when option evaluate=false.
            if (this instanceof AST_UnaryPrefix
                && this.expression instanceof AST_Constant) switch (this.operator) ***REMOVED***
              case "!":
                return !this.expression.value;
              case "~":
                return ~this.expression.value;
              case "-":
                return -this.expression.value;
              case "+":
                return +this.expression.value;
              default:
                throw new Error(string_template("Cannot evaluate unary expression ***REMOVED***value***REMOVED***", ***REMOVED***
                    value: this.print_to_string()
                ***REMOVED***));
            ***REMOVED***
            var result = this.evaluate(compressor);
            if (result !== this) ***REMOVED***
                return result;
            ***REMOVED***
            throw new Error(string_template("Cannot evaluate constant [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", this.start));
        ***REMOVED***);
        def(AST_Statement, function()***REMOVED***
            throw new Error(string_template("Cannot evaluate a statement [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", this.start));
        ***REMOVED***);
        def(AST_Lambda, function()***REMOVED***
            throw def;
        ***REMOVED***);
        function ev(node, compressor) ***REMOVED***
            if (!compressor) throw new Error("Compressor must be passed");

            return node._eval(compressor);
        ***REMOVED***;
        def(AST_Node, function()***REMOVED***
            throw def;          // not constant
        ***REMOVED***);
        def(AST_Constant, function()***REMOVED***
            return this.getValue();
        ***REMOVED***);
        def(AST_Array, function(compressor)***REMOVED***
            if (compressor.option("unsafe")) ***REMOVED***
                return this.elements.map(function(element) ***REMOVED***
                    return ev(element, compressor);
                ***REMOVED***);
            ***REMOVED***
            throw def;
        ***REMOVED***);
        def(AST_Object, function(compressor)***REMOVED***
            if (compressor.option("unsafe")) ***REMOVED***
                var val = ***REMOVED******REMOVED***;
                for (var i = 0, len = this.properties.length; i < len; i++) ***REMOVED***
                    var prop = this.properties[i];
                    var key = prop.key;
                    if (key instanceof AST_Symbol) ***REMOVED***
                        key = key.name;
                    ***REMOVED*** else if (key instanceof AST_Node) ***REMOVED***
                        key = ev(key, compressor);
                    ***REMOVED***
                    if (typeof Object.prototype[key] === 'function') ***REMOVED***
                        throw def;
                    ***REMOVED***
                    val[key] = ev(prop.value, compressor);
                ***REMOVED***
                return val;
            ***REMOVED***
            throw def;
        ***REMOVED***);
        def(AST_UnaryPrefix, function(compressor)***REMOVED***
            var e = this.expression;
            switch (this.operator) ***REMOVED***
              case "!": return !ev(e, compressor);
              case "typeof":
                // Function would be evaluated to an array and so typeof would
                // incorrectly return 'object'. Hence making is a special case.
                if (e instanceof AST_Function) return typeof function()***REMOVED******REMOVED***;

                e = ev(e, compressor);

                // typeof <RegExp> returns "object" or "function" on different platforms
                // so cannot evaluate reliably
                if (e instanceof RegExp) throw def;

                return typeof e;
              case "void": return void ev(e, compressor);
              case "~": return ~ev(e, compressor);
              case "-": return -ev(e, compressor);
              case "+": return +ev(e, compressor);
            ***REMOVED***
            throw def;
        ***REMOVED***);
        def(AST_Binary, function(c)***REMOVED***
            var left = this.left, right = this.right, result;
            switch (this.operator) ***REMOVED***
              case "&&"  : result = ev(left, c) &&  ev(right, c); break;
              case "||"  : result = ev(left, c) ||  ev(right, c); break;
              case "|"   : result = ev(left, c) |   ev(right, c); break;
              case "&"   : result = ev(left, c) &   ev(right, c); break;
              case "^"   : result = ev(left, c) ^   ev(right, c); break;
              case "+"   : result = ev(left, c) +   ev(right, c); break;
              case "*"   : result = ev(left, c) *   ev(right, c); break;
              case "/"   : result = ev(left, c) /   ev(right, c); break;
              case "%"   : result = ev(left, c) %   ev(right, c); break;
              case "-"   : result = ev(left, c) -   ev(right, c); break;
              case "<<"  : result = ev(left, c) <<  ev(right, c); break;
              case ">>"  : result = ev(left, c) >>  ev(right, c); break;
              case ">>>" : result = ev(left, c) >>> ev(right, c); break;
              case "=="  : result = ev(left, c) ==  ev(right, c); break;
              case "===" : result = ev(left, c) === ev(right, c); break;
              case "!="  : result = ev(left, c) !=  ev(right, c); break;
              case "!==" : result = ev(left, c) !== ev(right, c); break;
              case "<"   : result = ev(left, c) <   ev(right, c); break;
              case "<="  : result = ev(left, c) <=  ev(right, c); break;
              case ">"   : result = ev(left, c) >   ev(right, c); break;
              case ">="  : result = ev(left, c) >=  ev(right, c); break;
              default:
                  throw def;
            ***REMOVED***
            if (isNaN(result) && c.find_parent(AST_With)) ***REMOVED***
                // leave original expression as is
                throw def;
            ***REMOVED***
            return result;
        ***REMOVED***);
        def(AST_Conditional, function(compressor)***REMOVED***
            return ev(this.condition, compressor)
                ? ev(this.consequent, compressor)
                : ev(this.alternative, compressor);
        ***REMOVED***);
        def(AST_SymbolRef, function(compressor)***REMOVED***
            if (!compressor.option("reduce_vars") || this._evaluating) throw def;
            this._evaluating = true;
            try ***REMOVED***
                var fixed = this.fixed_value();
                if (!fixed) throw def;
                var value = ev(fixed, compressor);
                if (!HOP(fixed, "_eval")) fixed._eval = function() ***REMOVED***
                    return value;
                ***REMOVED***;
                if (value && typeof value == "object" && this.definition().escaped) throw def;
                return value;
            ***REMOVED*** finally ***REMOVED***
                this._evaluating = false;
            ***REMOVED***
        ***REMOVED***);
        def(AST_PropAccess, function(compressor)***REMOVED***
            if (compressor.option("unsafe")) ***REMOVED***
                var key = this.property;
                if (key instanceof AST_Node) ***REMOVED***
                    key = ev(key, compressor);
                ***REMOVED***
                var val = ev(this.expression, compressor);
                if (val && HOP(val, key)) ***REMOVED***
                    return val[key];
                ***REMOVED***
            ***REMOVED***
            throw def;
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("_eval", func);
    ***REMOVED***);

    // method to negate an expression
    (function(def)***REMOVED***
        function basic_negation(exp) ***REMOVED***
            return make_node(AST_UnaryPrefix, exp, ***REMOVED***
                operator: "!",
                expression: exp
            ***REMOVED***);
        ***REMOVED***
        function best(orig, alt, first_in_statement) ***REMOVED***
            var negated = basic_negation(orig);
            if (first_in_statement) ***REMOVED***
                var stat = make_node(AST_SimpleStatement, alt, ***REMOVED***
                    body: alt
                ***REMOVED***);
                return best_of_expression(negated, stat) === stat ? alt : negated;
            ***REMOVED***
            return best_of_expression(negated, alt);
        ***REMOVED***
        def(AST_Node, function()***REMOVED***
            return basic_negation(this);
        ***REMOVED***);
        def(AST_Statement, function()***REMOVED***
            throw new Error("Cannot negate a statement");
        ***REMOVED***);
        def(AST_Function, function()***REMOVED***
            return basic_negation(this);
        ***REMOVED***);
        def(AST_UnaryPrefix, function()***REMOVED***
            if (this.operator == "!")
                return this.expression;
            return basic_negation(this);
        ***REMOVED***);
        def(AST_Seq, function(compressor)***REMOVED***
            var self = this.clone();
            self.cdr = self.cdr.negate(compressor);
            return self;
        ***REMOVED***);
        def(AST_Conditional, function(compressor, first_in_statement)***REMOVED***
            var self = this.clone();
            self.consequent = self.consequent.negate(compressor);
            self.alternative = self.alternative.negate(compressor);
            return best(this, self, first_in_statement);
        ***REMOVED***);
        def(AST_Binary, function(compressor, first_in_statement)***REMOVED***
            var self = this.clone(), op = this.operator;
            if (compressor.option("unsafe_comps")) ***REMOVED***
                switch (op) ***REMOVED***
                  case "<=" : self.operator = ">"  ; return self;
                  case "<"  : self.operator = ">=" ; return self;
                  case ">=" : self.operator = "<"  ; return self;
                  case ">"  : self.operator = "<=" ; return self;
                ***REMOVED***
            ***REMOVED***
            switch (op) ***REMOVED***
              case "==" : self.operator = "!="; return self;
              case "!=" : self.operator = "=="; return self;
              case "===": self.operator = "!=="; return self;
              case "!==": self.operator = "==="; return self;
              case "&&":
                self.operator = "||";
                self.left = self.left.negate(compressor, first_in_statement);
                self.right = self.right.negate(compressor);
                return best(this, self, first_in_statement);
              case "||":
                self.operator = "&&";
                self.left = self.left.negate(compressor, first_in_statement);
                self.right = self.right.negate(compressor);
                return best(this, self, first_in_statement);
            ***REMOVED***
            return basic_negation(this);
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("negate", function(compressor, first_in_statement)***REMOVED***
            return func.call(this, compressor, first_in_statement);
        ***REMOVED***);
    ***REMOVED***);

    AST_Call.DEFMETHOD("has_pure_annotation", function(compressor) ***REMOVED***
        if (!compressor.option("side_effects")) return false;
        if (this.pure !== undefined) return this.pure;
        var pure = false;
        var comments, last_comment;
        if (this.start
            && (comments = this.start.comments_before)
            && comments.length
            && /[@#]__PURE__/.test((last_comment = comments[comments.length - 1]).value)) ***REMOVED***
            pure = last_comment;
        ***REMOVED***
        return this.pure = pure;
    ***REMOVED***);

    // determine if expression has side effects
    (function(def)***REMOVED***
        def(AST_Node, return_true);

        def(AST_EmptyStatement, return_false);
        def(AST_Constant, return_false);
        def(AST_This, return_false);

        def(AST_Call, function(compressor)***REMOVED***
            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) return true;
            for (var i = this.args.length; --i >= 0;) ***REMOVED***
                if (this.args[i].has_side_effects(compressor))
                    return true;
            ***REMOVED***
            return false;
        ***REMOVED***);

        function any(list, compressor) ***REMOVED***
            for (var i = list.length; --i >= 0;)
                if (list[i].has_side_effects(compressor))
                    return true;
            return false;
        ***REMOVED***

        def(AST_Block, function(compressor)***REMOVED***
            return any(this.body, compressor);
        ***REMOVED***);
        def(AST_Switch, function(compressor)***REMOVED***
            return this.expression.has_side_effects(compressor)
                || any(this.body, compressor);
        ***REMOVED***);
        def(AST_Case, function(compressor)***REMOVED***
            return this.expression.has_side_effects(compressor)
                || any(this.body, compressor);
        ***REMOVED***);
        def(AST_Try, function(compressor)***REMOVED***
            return any(this.body, compressor)
                || this.bcatch && this.bcatch.has_side_effects(compressor)
                || this.bfinally && this.bfinally.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_If, function(compressor)***REMOVED***
            return this.condition.has_side_effects(compressor)
                || this.body && this.body.has_side_effects(compressor)
                || this.alternative && this.alternative.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_LabeledStatement, function(compressor)***REMOVED***
            return this.body.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_SimpleStatement, function(compressor)***REMOVED***
            return this.body.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Defun, return_true);
        def(AST_Function, return_false);
        def(AST_Binary, function(compressor)***REMOVED***
            return this.left.has_side_effects(compressor)
                || this.right.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Assign, return_true);
        def(AST_Conditional, function(compressor)***REMOVED***
            return this.condition.has_side_effects(compressor)
                || this.consequent.has_side_effects(compressor)
                || this.alternative.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Unary, function(compressor)***REMOVED***
            return unary_side_effects(this.operator)
                || this.expression.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_SymbolRef, function(compressor)***REMOVED***
            return this.undeclared();
        ***REMOVED***);
        def(AST_Object, function(compressor)***REMOVED***
            return any(this.properties, compressor);
        ***REMOVED***);
        def(AST_ObjectProperty, function(compressor)***REMOVED***
            return this.value.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Array, function(compressor)***REMOVED***
            return any(this.elements, compressor);
        ***REMOVED***);
        def(AST_Dot, function(compressor)***REMOVED***
            return this.expression.may_throw_on_access(compressor)
                || this.expression.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Sub, function(compressor)***REMOVED***
            return this.expression.may_throw_on_access(compressor)
                || this.expression.has_side_effects(compressor)
                || this.property.has_side_effects(compressor);
        ***REMOVED***);
        def(AST_Seq, function(compressor)***REMOVED***
            return this.car.has_side_effects(compressor)
                || this.cdr.has_side_effects(compressor);
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("has_side_effects", func);
    ***REMOVED***);

    // tell me if a statement aborts
    function aborts(thing) ***REMOVED***
        return thing && thing.aborts();
    ***REMOVED***;
    (function(def)***REMOVED***
        def(AST_Statement, return_null);
        def(AST_Jump, return_this);
        function block_aborts()***REMOVED***
            var n = this.body.length;
            return n > 0 && aborts(this.body[n - 1]);
        ***REMOVED***;
        def(AST_BlockStatement, block_aborts);
        def(AST_SwitchBranch, block_aborts);
        def(AST_If, function()***REMOVED***
            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("aborts", func);
    ***REMOVED***);

    /* -----[ optimizers ]----- */

    OPT(AST_Directive, function(self, compressor)***REMOVED***
        if (compressor.has_directive(self.value) !== self) ***REMOVED***
            return make_node(AST_EmptyStatement, self);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Debugger, function(self, compressor)***REMOVED***
        if (compressor.option("drop_debugger"))
            return make_node(AST_EmptyStatement, self);
        return self;
    ***REMOVED***);

    OPT(AST_LabeledStatement, function(self, compressor)***REMOVED***
        if (self.body instanceof AST_Break
            && compressor.loopcontrol_target(self.body) === self.body) ***REMOVED***
            return make_node(AST_EmptyStatement, self);
        ***REMOVED***
        return self.label.references.length == 0 ? self.body : self;
    ***REMOVED***);

    OPT(AST_Block, function(self, compressor)***REMOVED***
        self.body = tighten_body(self.body, compressor);
        return self;
    ***REMOVED***);

    OPT(AST_BlockStatement, function(self, compressor)***REMOVED***
        self.body = tighten_body(self.body, compressor);
        switch (self.body.length) ***REMOVED***
          case 1: return self.body[0];
          case 0: return make_node(AST_EmptyStatement, self);
        ***REMOVED***
        return self;
    ***REMOVED***);

    AST_Scope.DEFMETHOD("drop_unused", function(compressor)***REMOVED***
        var self = this;
        if (compressor.has_directive("use asm")) return self;
        var toplevel = compressor.option("toplevel");
        if (compressor.option("unused")
            && (!(self instanceof AST_Toplevel) || toplevel)
            && !self.uses_eval
            && !self.uses_with) ***REMOVED***
            var assign_as_unused = !/keep_assign/.test(compressor.option("unused"));
            var drop_funcs = /funcs/.test(toplevel);
            var drop_vars = /vars/.test(toplevel);
            if (!(self instanceof AST_Toplevel) || toplevel == true) ***REMOVED***
                drop_funcs = drop_vars = true;
            ***REMOVED***
            var in_use = [];
            var in_use_ids = Object.create(null); // avoid expensive linear scans of in_use
            if (self instanceof AST_Toplevel && compressor.top_retain) ***REMOVED***
                self.variables.each(function(def) ***REMOVED***
                    if (compressor.top_retain(def) && !(def.id in in_use_ids)) ***REMOVED***
                        in_use_ids[def.id] = true;
                        in_use.push(def);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
            var initializations = new Dictionary();
            // pass 1: find out which symbols are directly used in
            // this scope (not in nested scopes).
            var scope = this;
            var tw = new TreeWalker(function(node, descend)***REMOVED***
                if (node !== self) ***REMOVED***
                    if (node instanceof AST_Defun) ***REMOVED***
                        if (!drop_funcs && scope === self) ***REMOVED***
                            var node_def = node.name.definition();
                            if (!(node_def.id in in_use_ids)) ***REMOVED***
                                in_use_ids[node_def.id] = true;
                                in_use.push(node_def);
                            ***REMOVED***
                        ***REMOVED***
                        initializations.add(node.name.name, node);
                        return true; // don't go in nested scopes
                    ***REMOVED***
                    if (node instanceof AST_Definitions && scope === self) ***REMOVED***
                        node.definitions.forEach(function(def)***REMOVED***
                            if (!drop_vars) ***REMOVED***
                                var node_def = def.name.definition();
                                if (!(node_def.id in in_use_ids)) ***REMOVED***
                                    in_use_ids[node_def.id] = true;
                                    in_use.push(node_def);
                                ***REMOVED***
                            ***REMOVED***
                            if (def.value) ***REMOVED***
                                initializations.add(def.name.name, def.value);
                                if (def.value.has_side_effects(compressor)) ***REMOVED***
                                    def.value.walk(tw);
                                ***REMOVED***
                            ***REMOVED***
                        ***REMOVED***);
                        return true;
                    ***REMOVED***
                    if (assign_as_unused
                        && node instanceof AST_Assign
                        && node.operator == "="
                        && node.left instanceof AST_SymbolRef
                        && !is_reference_const(node.left)
                        && scope === self) ***REMOVED***
                        node.right.walk(tw);
                        return true;
                    ***REMOVED***
                    if (node instanceof AST_SymbolRef) ***REMOVED***
                        var node_def = node.definition();
                        if (!(node_def.id in in_use_ids)) ***REMOVED***
                            in_use_ids[node_def.id] = true;
                            in_use.push(node_def);
                        ***REMOVED***
                        return true;
                    ***REMOVED***
                    if (node instanceof AST_Scope) ***REMOVED***
                        var save_scope = scope;
                        scope = node;
                        descend();
                        scope = save_scope;
                        return true;
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***);
            self.walk(tw);
            // pass 2: for every used symbol we need to walk its
            // initialization code to figure out if it uses other
            // symbols (that may not be in_use).
            for (var i = 0; i < in_use.length; ++i) ***REMOVED***
                in_use[i].orig.forEach(function(decl)***REMOVED***
                    // undeclared globals will be instanceof AST_SymbolRef
                    var init = initializations.get(decl.name);
                    if (init) init.forEach(function(init)***REMOVED***
                        var tw = new TreeWalker(function(node)***REMOVED***
                            if (node instanceof AST_SymbolRef) ***REMOVED***
                                var node_def = node.definition();
                                if (!(node_def.id in in_use_ids)) ***REMOVED***
                                    in_use_ids[node_def.id] = true;
                                    in_use.push(node_def);
                                ***REMOVED***
                            ***REMOVED***
                        ***REMOVED***);
                        init.walk(tw);
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
            // pass 3: we should drop declarations not in_use
            var tt = new TreeTransformer(
                function before(node, descend, in_list) ***REMOVED***
                    if (node instanceof AST_Function
                        && node.name
                        && !compressor.option("keep_fnames")) ***REMOVED***
                        var def = node.name.definition();
                        // any declarations with same name will overshadow
                        // name of this anonymous function and can therefore
                        // never be used anywhere
                        if (!(def.id in in_use_ids) || def.orig.length > 1)
                            node.name = null;
                    ***REMOVED***
                    if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) ***REMOVED***
                        var trim = !compressor.option("keep_fargs");
                        for (var a = node.argnames, i = a.length; --i >= 0;) ***REMOVED***
                            var sym = a[i];
                            if (!(sym.definition().id in in_use_ids)) ***REMOVED***
                                sym.__unused = true;
                                if (trim) ***REMOVED***
                                    a.pop();
                                    compressor[sym.unreferenced() ? "warn" : "info"]("Dropping unused function argument ***REMOVED***name***REMOVED*** [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", ***REMOVED***
                                        name : sym.name,
                                        file : sym.start.file,
                                        line : sym.start.line,
                                        col  : sym.start.col
                                    ***REMOVED***);
                                ***REMOVED***
                            ***REMOVED***
                            else ***REMOVED***
                                trim = false;
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***
                    if (drop_funcs && node instanceof AST_Defun && node !== self) ***REMOVED***
                        if (!(node.name.definition().id in in_use_ids)) ***REMOVED***
                            compressor[node.name.unreferenced() ? "warn" : "info"]("Dropping unused function ***REMOVED***name***REMOVED*** [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", ***REMOVED***
                                name : node.name.name,
                                file : node.name.start.file,
                                line : node.name.start.line,
                                col  : node.name.start.col
                            ***REMOVED***);
                            return make_node(AST_EmptyStatement, node);
                        ***REMOVED***
                        return node;
                    ***REMOVED***
                    if (drop_vars && node instanceof AST_Definitions && !(tt.parent() instanceof AST_ForIn && tt.parent().init === node)) ***REMOVED***
                        var def = node.definitions.filter(function(def)***REMOVED***
                            if (def.value) def.value = def.value.transform(tt);
                            var sym = def.name.definition();
                            if (sym.id in in_use_ids) return true;
                            if (sym.orig[0] instanceof AST_SymbolCatch) ***REMOVED***
                                def.value = def.value && def.value.drop_side_effect_free(compressor);
                                return true;
                            ***REMOVED***
                            var w = ***REMOVED***
                                name : def.name.name,
                                file : def.name.start.file,
                                line : def.name.start.line,
                                col  : def.name.start.col
                            ***REMOVED***;
                            if (def.value && (def._unused_side_effects = def.value.drop_side_effect_free(compressor))) ***REMOVED***
                                compressor.warn("Side effects in initialization of unused variable ***REMOVED***name***REMOVED*** [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", w);
                                return true;
                            ***REMOVED***
                            compressor[def.name.unreferenced() ? "warn" : "info"]("Dropping unused variable ***REMOVED***name***REMOVED*** [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", w);
                            return false;
                        ***REMOVED***);
                        // place uninitialized names at the start
                        def = mergeSort(def, function(a, b)***REMOVED***
                            if (!a.value && b.value) return -1;
                            if (!b.value && a.value) return 1;
                            return 0;
                        ***REMOVED***);
                        // for unused names whose initialization has
                        // side effects, we can cascade the init. code
                        // into the next one, or next statement.
                        var side_effects = [];
                        for (var i = 0; i < def.length;) ***REMOVED***
                            var x = def[i];
                            if (x._unused_side_effects) ***REMOVED***
                                side_effects.push(x._unused_side_effects);
                                def.splice(i, 1);
                            ***REMOVED*** else ***REMOVED***
                                if (side_effects.length > 0) ***REMOVED***
                                    side_effects.push(x.value);
                                    x.value = AST_Seq.from_array(side_effects);
                                    side_effects = [];
                                ***REMOVED***
                                ++i;
                            ***REMOVED***
                        ***REMOVED***
                        if (side_effects.length > 0) ***REMOVED***
                            side_effects = make_node(AST_BlockStatement, node, ***REMOVED***
                                body: [ make_node(AST_SimpleStatement, node, ***REMOVED***
                                    body: AST_Seq.from_array(side_effects)
                                ***REMOVED***) ]
                            ***REMOVED***);
                        ***REMOVED*** else ***REMOVED***
                            side_effects = null;
                        ***REMOVED***
                        if (def.length == 0 && !side_effects) ***REMOVED***
                            return make_node(AST_EmptyStatement, node);
                        ***REMOVED***
                        if (def.length == 0) ***REMOVED***
                            return in_list ? MAP.splice(side_effects.body) : side_effects;
                        ***REMOVED***
                        node.definitions = def;
                        if (side_effects) ***REMOVED***
                            side_effects.body.unshift(node);
                            return in_list ? MAP.splice(side_effects.body) : side_effects;
                        ***REMOVED***
                        return node;
                    ***REMOVED***
                    if (drop_vars && assign_as_unused
                        && node instanceof AST_Assign
                        && node.operator == "="
                        && node.left instanceof AST_SymbolRef) ***REMOVED***
                        var def = node.left.definition();
                        if (!(def.id in in_use_ids)
                            && self.variables.get(def.name) === def) ***REMOVED***
                            return maintain_this_binding(tt.parent(), node, node.right.transform(tt));
                        ***REMOVED***
                    ***REMOVED***
                    // certain combination of unused name + side effect leads to:
                    //    https://github.com/mishoo/UglifyJS2/issues/44
                    //    https://github.com/mishoo/UglifyJS2/issues/1830
                    // that's an invalid AST.
                    // We fix it at this stage by moving the `var` outside the `for`.
                    if (node instanceof AST_For) ***REMOVED***
                        descend(node, this);
                        if (node.init instanceof AST_BlockStatement) ***REMOVED***
                            var block = node.init;
                            node.init = block.body.pop();
                            block.body.push(node);
                            return in_list ? MAP.splice(block.body) : block;
                        ***REMOVED*** else if (is_empty(node.init)) ***REMOVED***
                            node.init = null;
                        ***REMOVED***
                        return node;
                    ***REMOVED***
                    if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) ***REMOVED***
                        descend(node, this);
                        if (node.body instanceof AST_BlockStatement) ***REMOVED***
                            var block = node.body;
                            node.body = block.body.pop();
                            block.body.push(node);
                            return in_list ? MAP.splice(block.body) : block;
                        ***REMOVED***
                        return node;
                    ***REMOVED***
                    if (node instanceof AST_Scope && node !== self)
                        return node;
                ***REMOVED***
            );
            self.transform(tt);
        ***REMOVED***
    ***REMOVED***);

    AST_Scope.DEFMETHOD("hoist_declarations", function(compressor)***REMOVED***
        var self = this;
        if (compressor.has_directive("use asm")) return self;
        var hoist_funs = compressor.option("hoist_funs");
        var hoist_vars = compressor.option("hoist_vars");
        if (hoist_funs || hoist_vars) ***REMOVED***
            var dirs = [];
            var hoisted = [];
            var vars = new Dictionary(), vars_found = 0, var_decl = 0;
            // let's count var_decl first, we seem to waste a lot of
            // space if we hoist `var` when there's only one.
            self.walk(new TreeWalker(function(node)***REMOVED***
                if (node instanceof AST_Scope && node !== self)
                    return true;
                if (node instanceof AST_Var) ***REMOVED***
                    ++var_decl;
                    return true;
                ***REMOVED***
            ***REMOVED***));
            hoist_vars = hoist_vars && var_decl > 1;
            var tt = new TreeTransformer(
                function before(node) ***REMOVED***
                    if (node !== self) ***REMOVED***
                        if (node instanceof AST_Directive) ***REMOVED***
                            dirs.push(node);
                            return make_node(AST_EmptyStatement, node);
                        ***REMOVED***
                        if (node instanceof AST_Defun && hoist_funs) ***REMOVED***
                            hoisted.push(node);
                            return make_node(AST_EmptyStatement, node);
                        ***REMOVED***
                        if (node instanceof AST_Var && hoist_vars) ***REMOVED***
                            node.definitions.forEach(function(def)***REMOVED***
                                vars.set(def.name.name, def);
                                ++vars_found;
                            ***REMOVED***);
                            var seq = node.to_assignments(compressor);
                            var p = tt.parent();
                            if (p instanceof AST_ForIn && p.init === node) ***REMOVED***
                                if (seq == null) ***REMOVED***
                                    var def = node.definitions[0].name;
                                    return make_node(AST_SymbolRef, def, def);
                                ***REMOVED***
                                return seq;
                            ***REMOVED***
                            if (p instanceof AST_For && p.init === node) ***REMOVED***
                                return seq;
                            ***REMOVED***
                            if (!seq) return make_node(AST_EmptyStatement, node);
                            return make_node(AST_SimpleStatement, node, ***REMOVED***
                                body: seq
                            ***REMOVED***);
                        ***REMOVED***
                        if (node instanceof AST_Scope)
                            return node; // to avoid descending in nested scopes
                    ***REMOVED***
                ***REMOVED***
            );
            self = self.transform(tt);
            if (vars_found > 0) ***REMOVED***
                // collect only vars which don't show up in self's arguments list
                var defs = [];
                vars.each(function(def, name)***REMOVED***
                    if (self instanceof AST_Lambda
                        && find_if(function(x)***REMOVED*** return x.name == def.name.name ***REMOVED***,
                                   self.argnames)) ***REMOVED***
                        vars.del(name);
                    ***REMOVED*** else ***REMOVED***
                        def = def.clone();
                        def.value = null;
                        defs.push(def);
                        vars.set(name, def);
                    ***REMOVED***
                ***REMOVED***);
                if (defs.length > 0) ***REMOVED***
                    // try to merge in assignments
                    for (var i = 0; i < self.body.length;) ***REMOVED***
                        if (self.body[i] instanceof AST_SimpleStatement) ***REMOVED***
                            var expr = self.body[i].body, sym, assign;
                            if (expr instanceof AST_Assign
                                && expr.operator == "="
                                && (sym = expr.left) instanceof AST_Symbol
                                && vars.has(sym.name))
                            ***REMOVED***
                                var def = vars.get(sym.name);
                                if (def.value) break;
                                def.value = expr.right;
                                remove(defs, def);
                                defs.push(def);
                                self.body.splice(i, 1);
                                continue;
                            ***REMOVED***
                            if (expr instanceof AST_Seq
                                && (assign = expr.car) instanceof AST_Assign
                                && assign.operator == "="
                                && (sym = assign.left) instanceof AST_Symbol
                                && vars.has(sym.name))
                            ***REMOVED***
                                var def = vars.get(sym.name);
                                if (def.value) break;
                                def.value = assign.right;
                                remove(defs, def);
                                defs.push(def);
                                self.body[i].body = expr.cdr;
                                continue;
                            ***REMOVED***
                        ***REMOVED***
                        if (self.body[i] instanceof AST_EmptyStatement) ***REMOVED***
                            self.body.splice(i, 1);
                            continue;
                        ***REMOVED***
                        if (self.body[i] instanceof AST_BlockStatement) ***REMOVED***
                            var tmp = [ i, 1 ].concat(self.body[i].body);
                            self.body.splice.apply(self.body, tmp);
                            continue;
                        ***REMOVED***
                        break;
                    ***REMOVED***
                    defs = make_node(AST_Var, self, ***REMOVED***
                        definitions: defs
                    ***REMOVED***);
                    hoisted.push(defs);
                ***REMOVED***;
            ***REMOVED***
            self.body = dirs.concat(hoisted, self.body);
        ***REMOVED***
        return self;
    ***REMOVED***);

    // drop_side_effect_free()
    // remove side-effect-free parts which only affects return value
    (function(def)***REMOVED***
        // Drop side-effect-free elements from an array of expressions.
        // Returns an array of expressions with side-effects or null
        // if all elements were dropped. Note: original array may be
        // returned if nothing changed.
        function trim(nodes, compressor, first_in_statement) ***REMOVED***
            var ret = [], changed = false;
            for (var i = 0, len = nodes.length; i < len; i++) ***REMOVED***
                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);
                changed |= node !== nodes[i];
                if (node) ***REMOVED***
                    ret.push(node);
                    first_in_statement = false;
                ***REMOVED***
            ***REMOVED***
            return changed ? ret.length ? ret : null : nodes;
        ***REMOVED***

        def(AST_Node, return_this);
        def(AST_Constant, return_null);
        def(AST_This, return_null);
        def(AST_Call, function(compressor, first_in_statement)***REMOVED***
            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) ***REMOVED***
                if (this.expression instanceof AST_Function
                    && (!this.expression.name || !this.expression.name.definition().references.length)) ***REMOVED***
                    var node = this.clone();
                    node.expression = node.expression.process_expression(false, compressor);
                    return node;
                ***REMOVED***
                return this;
            ***REMOVED***
            if (this.pure) ***REMOVED***
                compressor.warn("Dropping __PURE__ call [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", this.start);
                this.pure.value = this.pure.value.replace(/[@#]__PURE__/g, ' ');
            ***REMOVED***
            var args = trim(this.args, compressor, first_in_statement);
            return args && AST_Seq.from_array(args);
        ***REMOVED***);
        def(AST_Accessor, return_null);
        def(AST_Function, return_null);
        def(AST_Binary, function(compressor, first_in_statement)***REMOVED***
            var right = this.right.drop_side_effect_free(compressor);
            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);
            switch (this.operator) ***REMOVED***
              case "&&":
              case "||":
                if (right === this.right) return this;
                var node = this.clone();
                node.right = right;
                return node;
              default:
                var left = this.left.drop_side_effect_free(compressor, first_in_statement);
                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);
                return make_node(AST_Seq, this, ***REMOVED***
                    car: left,
                    cdr: right
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);
        def(AST_Assign, return_this);
        def(AST_Conditional, function(compressor)***REMOVED***
            var consequent = this.consequent.drop_side_effect_free(compressor);
            var alternative = this.alternative.drop_side_effect_free(compressor);
            if (consequent === this.consequent && alternative === this.alternative) return this;
            if (!consequent) return alternative ? make_node(AST_Binary, this, ***REMOVED***
                operator: "||",
                left: this.condition,
                right: alternative
            ***REMOVED***) : this.condition.drop_side_effect_free(compressor);
            if (!alternative) return make_node(AST_Binary, this, ***REMOVED***
                operator: "&&",
                left: this.condition,
                right: consequent
            ***REMOVED***);
            var node = this.clone();
            node.consequent = consequent;
            node.alternative = alternative;
            return node;
        ***REMOVED***);
        def(AST_Unary, function(compressor, first_in_statement)***REMOVED***
            if (unary_side_effects(this.operator)) return this;
            if (this.operator == "typeof" && this.expression instanceof AST_SymbolRef) return null;
            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);
            if (first_in_statement
                && this instanceof AST_UnaryPrefix
                && is_iife_call(expression)) ***REMOVED***
                if (expression === this.expression && this.operator.length === 1) return this;
                return make_node(AST_UnaryPrefix, this, ***REMOVED***
                    operator: this.operator.length === 1 ? this.operator : "!",
                    expression: expression
                ***REMOVED***);
            ***REMOVED***
            return expression;
        ***REMOVED***);
        def(AST_SymbolRef, function() ***REMOVED***
            return this.undeclared() ? this : null;
        ***REMOVED***);
        def(AST_Object, function(compressor, first_in_statement)***REMOVED***
            var values = trim(this.properties, compressor, first_in_statement);
            return values && AST_Seq.from_array(values);
        ***REMOVED***);
        def(AST_ObjectProperty, function(compressor, first_in_statement)***REMOVED***
            return this.value.drop_side_effect_free(compressor, first_in_statement);
        ***REMOVED***);
        def(AST_Array, function(compressor, first_in_statement)***REMOVED***
            var values = trim(this.elements, compressor, first_in_statement);
            return values && AST_Seq.from_array(values);
        ***REMOVED***);
        def(AST_Dot, function(compressor, first_in_statement)***REMOVED***
            if (this.expression.may_throw_on_access(compressor)) return this;
            return this.expression.drop_side_effect_free(compressor, first_in_statement);
        ***REMOVED***);
        def(AST_Sub, function(compressor, first_in_statement)***REMOVED***
            if (this.expression.may_throw_on_access(compressor)) return this;
            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);
            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);
            var property = this.property.drop_side_effect_free(compressor);
            if (!property) return expression;
            return make_node(AST_Seq, this, ***REMOVED***
                car: expression,
                cdr: property
            ***REMOVED***);
        ***REMOVED***);
        def(AST_Seq, function(compressor)***REMOVED***
            var cdr = this.cdr.drop_side_effect_free(compressor);
            if (cdr === this.cdr) return this;
            if (!cdr) return this.car;
            return make_node(AST_Seq, this, ***REMOVED***
                car: this.car,
                cdr: cdr
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***)(function(node, func)***REMOVED***
        node.DEFMETHOD("drop_side_effect_free", func);
    ***REMOVED***);

    OPT(AST_SimpleStatement, function(self, compressor)***REMOVED***
        if (compressor.option("side_effects")) ***REMOVED***
            var body = self.body;
            var node = body.drop_side_effect_free(compressor, true);
            if (!node) ***REMOVED***
                compressor.warn("Dropping side-effect-free statement [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return make_node(AST_EmptyStatement, self);
            ***REMOVED***
            if (node !== body) ***REMOVED***
                return make_node(AST_SimpleStatement, self, ***REMOVED*** body: node ***REMOVED***);
            ***REMOVED***
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_DWLoop, function(self, compressor)***REMOVED***
        if (!compressor.option("loops")) return self;
        var cond = self.condition.evaluate(compressor);
        if (cond !== self.condition) ***REMOVED***
            if (cond) ***REMOVED***
                return make_node(AST_For, self, ***REMOVED***
                    body: self.body
                ***REMOVED***);
            ***REMOVED***
            if (compressor.option("dead_code") && self instanceof AST_While) ***REMOVED***
                var a = [];
                extract_declarations_from_unreachable_code(compressor, self.body, a);
                return make_node(AST_BlockStatement, self, ***REMOVED*** body: a ***REMOVED***).optimize(compressor);
            ***REMOVED***
            if (self instanceof AST_Do) ***REMOVED***
                var has_loop_control = false;
                var tw = new TreeWalker(function(node) ***REMOVED***
                    if (node instanceof AST_Scope || has_loop_control) return true;
                    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === self)
                        return has_loop_control = true;
                ***REMOVED***);
                var parent = compressor.parent();
                (parent instanceof AST_LabeledStatement ? parent : self).walk(tw);
                if (!has_loop_control) return self.body;
            ***REMOVED***
        ***REMOVED***
        if (self instanceof AST_While) ***REMOVED***
            return make_node(AST_For, self, self).optimize(compressor);
        ***REMOVED***
        return self;
    ***REMOVED***);

    function if_break_in_loop(self, compressor) ***REMOVED***
        function drop_it(rest) ***REMOVED***
            rest = as_statement_array(rest);
            if (self.body instanceof AST_BlockStatement) ***REMOVED***
                self.body = self.body.clone();
                self.body.body = rest.concat(self.body.body.slice(1));
                self.body = self.body.transform(compressor);
            ***REMOVED*** else ***REMOVED***
                self.body = make_node(AST_BlockStatement, self.body, ***REMOVED***
                    body: rest
                ***REMOVED***).transform(compressor);
            ***REMOVED***
            if_break_in_loop(self, compressor);
        ***REMOVED***
        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;
        if (first instanceof AST_If) ***REMOVED***
            if (first.body instanceof AST_Break
                && compressor.loopcontrol_target(first.body) === compressor.self()) ***REMOVED***
                if (self.condition) ***REMOVED***
                    self.condition = make_node(AST_Binary, self.condition, ***REMOVED***
                        left: self.condition,
                        operator: "&&",
                        right: first.condition.negate(compressor),
                    ***REMOVED***);
                ***REMOVED*** else ***REMOVED***
                    self.condition = first.condition.negate(compressor);
                ***REMOVED***
                drop_it(first.alternative);
            ***REMOVED***
            else if (first.alternative instanceof AST_Break
                     && compressor.loopcontrol_target(first.alternative) === compressor.self()) ***REMOVED***
                if (self.condition) ***REMOVED***
                    self.condition = make_node(AST_Binary, self.condition, ***REMOVED***
                        left: self.condition,
                        operator: "&&",
                        right: first.condition,
                    ***REMOVED***);
                ***REMOVED*** else ***REMOVED***
                    self.condition = first.condition;
                ***REMOVED***
                drop_it(first.body);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;

    OPT(AST_For, function(self, compressor)***REMOVED***
        if (!compressor.option("loops")) return self;
        if (self.condition) ***REMOVED***
            var cond = self.condition.evaluate(compressor);
            if (compressor.option("dead_code") && !cond) ***REMOVED***
                var a = [];
                if (self.init instanceof AST_Statement) ***REMOVED***
                    a.push(self.init);
                ***REMOVED***
                else if (self.init) ***REMOVED***
                    a.push(make_node(AST_SimpleStatement, self.init, ***REMOVED***
                        body: self.init
                    ***REMOVED***));
                ***REMOVED***
                extract_declarations_from_unreachable_code(compressor, self.body, a);
                return make_node(AST_BlockStatement, self, ***REMOVED*** body: a ***REMOVED***).optimize(compressor);
            ***REMOVED***
            if (cond !== self.condition) ***REMOVED***
                cond = make_node_from_constant(cond, self.condition).transform(compressor);
                self.condition = best_of_expression(cond, self.condition);
            ***REMOVED***
        ***REMOVED***
        if_break_in_loop(self, compressor);
        return self;
    ***REMOVED***);

    OPT(AST_If, function(self, compressor)***REMOVED***
        if (is_empty(self.alternative)) self.alternative = null;

        if (!compressor.option("conditionals")) return self;
        // if condition can be statically determined, warn and drop
        // one of the blocks.  note, statically determined implies
        // “has no side effects”; also it doesn't work for cases like
        // `x && true`, though it probably should.
        var cond = self.condition.evaluate(compressor);
        if (cond !== self.condition) ***REMOVED***
            if (cond) ***REMOVED***
                compressor.warn("Condition always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.condition.start);
                if (compressor.option("dead_code")) ***REMOVED***
                    var a = [];
                    if (self.alternative) ***REMOVED***
                        extract_declarations_from_unreachable_code(compressor, self.alternative, a);
                    ***REMOVED***
                    a.push(self.body);
                    return make_node(AST_BlockStatement, self, ***REMOVED*** body: a ***REMOVED***).optimize(compressor);
                ***REMOVED***
            ***REMOVED*** else ***REMOVED***
                compressor.warn("Condition always false [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.condition.start);
                if (compressor.option("dead_code")) ***REMOVED***
                    var a = [];
                    extract_declarations_from_unreachable_code(compressor, self.body, a);
                    if (self.alternative) a.push(self.alternative);
                    return make_node(AST_BlockStatement, self, ***REMOVED*** body: a ***REMOVED***).optimize(compressor);
                ***REMOVED***
            ***REMOVED***
            cond = make_node_from_constant(cond, self.condition).transform(compressor);
            self.condition = best_of_expression(cond, self.condition);
        ***REMOVED***
        var negated = self.condition.negate(compressor);
        var self_condition_length = self.condition.print_to_string().length;
        var negated_length = negated.print_to_string().length;
        var negated_is_best = negated_length < self_condition_length;
        if (self.alternative && negated_is_best) ***REMOVED***
            negated_is_best = false; // because we already do the switch here.
            // no need to swap values of self_condition_length and negated_length
            // here because they are only used in an equality comparison later on.
            self.condition = negated;
            var tmp = self.body;
            self.body = self.alternative || make_node(AST_EmptyStatement, self);
            self.alternative = tmp;
        ***REMOVED***
        if (is_empty(self.body) && is_empty(self.alternative)) ***REMOVED***
            return make_node(AST_SimpleStatement, self.condition, ***REMOVED***
                body: self.condition.clone()
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (self.body instanceof AST_SimpleStatement
            && self.alternative instanceof AST_SimpleStatement) ***REMOVED***
            return make_node(AST_SimpleStatement, self, ***REMOVED***
                body: make_node(AST_Conditional, self, ***REMOVED***
                    condition   : self.condition,
                    consequent  : self.body.body,
                    alternative : self.alternative.body
                ***REMOVED***)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) ***REMOVED***
            if (self_condition_length === negated_length && !negated_is_best
                && self.condition instanceof AST_Binary && self.condition.operator == "||") ***REMOVED***
                // although the code length of self.condition and negated are the same,
                // negated does not require additional surrounding parentheses.
                // see https://github.com/mishoo/UglifyJS2/issues/979
                negated_is_best = true;
            ***REMOVED***
            if (negated_is_best) return make_node(AST_SimpleStatement, self, ***REMOVED***
                body: make_node(AST_Binary, self, ***REMOVED***
                    operator : "||",
                    left     : negated,
                    right    : self.body.body
                ***REMOVED***)
            ***REMOVED***).optimize(compressor);
            return make_node(AST_SimpleStatement, self, ***REMOVED***
                body: make_node(AST_Binary, self, ***REMOVED***
                    operator : "&&",
                    left     : self.condition,
                    right    : self.body.body
                ***REMOVED***)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (self.body instanceof AST_EmptyStatement
            && self.alternative instanceof AST_SimpleStatement) ***REMOVED***
            return make_node(AST_SimpleStatement, self, ***REMOVED***
                body: make_node(AST_Binary, self, ***REMOVED***
                    operator : "||",
                    left     : self.condition,
                    right    : self.alternative.body
                ***REMOVED***)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (self.body instanceof AST_Exit
            && self.alternative instanceof AST_Exit
            && self.body.TYPE == self.alternative.TYPE) ***REMOVED***
            return make_node(self.body.CTOR, self, ***REMOVED***
                value: make_node(AST_Conditional, self, ***REMOVED***
                    condition   : self.condition,
                    consequent  : self.body.value || make_node(AST_Undefined, self.body),
                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)
                ***REMOVED***).transform(compressor)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (self.body instanceof AST_If
            && !self.body.alternative
            && !self.alternative) ***REMOVED***
            self = make_node(AST_If, self, ***REMOVED***
                condition: make_node(AST_Binary, self.condition, ***REMOVED***
                    operator: "&&",
                    left: self.condition,
                    right: self.body.condition
                ***REMOVED***),
                body: self.body.body,
                alternative: null
            ***REMOVED***);
        ***REMOVED***
        if (aborts(self.body)) ***REMOVED***
            if (self.alternative) ***REMOVED***
                var alt = self.alternative;
                self.alternative = null;
                return make_node(AST_BlockStatement, self, ***REMOVED***
                    body: [ self, alt ]
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        if (aborts(self.alternative)) ***REMOVED***
            var body = self.body;
            self.body = self.alternative;
            self.condition = negated_is_best ? negated : self.condition.negate(compressor);
            self.alternative = null;
            return make_node(AST_BlockStatement, self, ***REMOVED***
                body: [ self, body ]
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Switch, function(self, compressor)***REMOVED***
        if (!compressor.option("switches")) return self;
        var branch;
        var value = self.expression.evaluate(compressor);
        if (value !== self.expression) ***REMOVED***
            var expression = make_node_from_constant(value, self.expression).transform(compressor);
            self.expression = best_of_expression(expression, self.expression);
        ***REMOVED***
        if (!compressor.option("dead_code")) return self;
        var decl = [];
        var body = [];
        var default_branch;
        var exact_match;
        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) ***REMOVED***
            branch = self.body[i];
            if (branch instanceof AST_Default) ***REMOVED***
                if (!default_branch) ***REMOVED***
                    default_branch = branch;
                ***REMOVED*** else ***REMOVED***
                    eliminate_branch(branch, body[body.length - 1]);
                ***REMOVED***
            ***REMOVED*** else if (value !== self.expression) ***REMOVED***
                var exp = branch.expression.evaluate(compressor);
                if (exp === value) ***REMOVED***
                    exact_match = branch;
                    if (default_branch) ***REMOVED***
                        var default_index = body.indexOf(default_branch);
                        body.splice(default_index, 1);
                        eliminate_branch(default_branch, body[default_index - 1]);
                        default_branch = null;
                    ***REMOVED***
                ***REMOVED*** else if (exp !== branch.expression) ***REMOVED***
                    eliminate_branch(branch, body[body.length - 1]);
                    continue;
                ***REMOVED***
            ***REMOVED***
            if (aborts(branch)) ***REMOVED***
                var prev = body[body.length - 1];
                if (aborts(prev) && prev.body.length == branch.body.length
                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) ***REMOVED***
                    prev.body = [];
                ***REMOVED***
            ***REMOVED***
            body.push(branch);
        ***REMOVED***
        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);
        if (body.length > 0) ***REMOVED***
            body[0].body = decl.concat(body[0].body);
        ***REMOVED***
        self.body = body;
        while (branch = body[body.length - 1]) ***REMOVED***
            var stat = branch.body[branch.body.length - 1];
            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)
                branch.body.pop();
            if (branch.body.length || branch instanceof AST_Case
                && (default_branch || branch.expression.has_side_effects(compressor))) break;
            if (body.pop() === default_branch) default_branch = null;
        ***REMOVED***
        if (body.length == 0) ***REMOVED***
            return make_node(AST_BlockStatement, self, ***REMOVED***
                body: decl.concat(make_node(AST_SimpleStatement, self.expression, ***REMOVED***
                    body: self.expression
                ***REMOVED***))
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) ***REMOVED***
            var has_break = false;
            var tw = new TreeWalker(function(node) ***REMOVED***
                if (has_break
                    || node instanceof AST_Lambda
                    || node instanceof AST_SimpleStatement) return true;
                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)
                    has_break = true;
            ***REMOVED***);
            self.walk(tw);
            if (!has_break) ***REMOVED***
                body = body[0].body.slice();
                body.unshift(make_node(AST_SimpleStatement, self.expression, ***REMOVED***
                    body: self.expression
                ***REMOVED***));
                return make_node(AST_BlockStatement, self, ***REMOVED***
                    body: body
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        return self;

        function eliminate_branch(branch, prev) ***REMOVED***
            if (prev && !aborts(prev)) ***REMOVED***
                prev.body = prev.body.concat(branch.body);
            ***REMOVED*** else ***REMOVED***
                extract_declarations_from_unreachable_code(compressor, branch, decl);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);

    OPT(AST_Try, function(self, compressor)***REMOVED***
        self.body = tighten_body(self.body, compressor);
        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;
        if (all(self.body, is_empty)) ***REMOVED***
            var body = [];
            if (self.bcatch) extract_declarations_from_unreachable_code(compressor, self.bcatch, body);
            if (self.bfinally) body = body.concat(self.bfinally.body);
            return make_node(AST_BlockStatement, self, ***REMOVED***
                body: body
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        return self;
    ***REMOVED***);

    AST_Definitions.DEFMETHOD("remove_initializers", function()***REMOVED***
        this.definitions.forEach(function(def)***REMOVED*** def.value = null ***REMOVED***);
    ***REMOVED***);

    AST_Definitions.DEFMETHOD("to_assignments", function(compressor)***REMOVED***
        var reduce_vars = compressor.option("reduce_vars");
        var assignments = this.definitions.reduce(function(a, def)***REMOVED***
            if (def.value) ***REMOVED***
                var name = make_node(AST_SymbolRef, def.name, def.name);
                a.push(make_node(AST_Assign, def, ***REMOVED***
                    operator : "=",
                    left     : name,
                    right    : def.value
                ***REMOVED***));
                if (reduce_vars) name.definition().fixed = false;
            ***REMOVED***
            return a;
        ***REMOVED***, []);
        if (assignments.length == 0) return null;
        return AST_Seq.from_array(assignments);
    ***REMOVED***);

    OPT(AST_Definitions, function(self, compressor)***REMOVED***
        if (self.definitions.length == 0)
            return make_node(AST_EmptyStatement, self);
        return self;
    ***REMOVED***);

    OPT(AST_Call, function(self, compressor)***REMOVED***
        var exp = self.expression;
        if (compressor.option("reduce_vars")
            && exp instanceof AST_SymbolRef) ***REMOVED***
            var def = exp.definition();
            var fixed = exp.fixed_value();
            if (fixed instanceof AST_Defun) ***REMOVED***
                def.fixed = fixed = make_node(AST_Function, fixed, fixed).clone(true);
            ***REMOVED***
            if (fixed instanceof AST_Function) ***REMOVED***
                exp = fixed;
                if (compressor.option("unused")
                    && def.references.length == 1
                    && !(def.scope.uses_arguments
                        && def.orig[0] instanceof AST_SymbolFunarg)
                    && !def.scope.uses_eval
                    && compressor.find_parent(AST_Scope) === def.scope) ***REMOVED***
                    self.expression = exp;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("unused")
            && exp instanceof AST_Function
            && !exp.uses_arguments
            && !exp.uses_eval) ***REMOVED***
            var pos = 0, last = 0;
            for (var i = 0, len = self.args.length; i < len; i++) ***REMOVED***
                var trim = i >= exp.argnames.length;
                if (trim || exp.argnames[i].__unused) ***REMOVED***
                    var node = self.args[i].drop_side_effect_free(compressor);
                    if (node) ***REMOVED***
                        self.args[pos++] = node;
                    ***REMOVED*** else if (!trim) ***REMOVED***
                        self.args[pos++] = make_node(AST_Number, self.args[i], ***REMOVED***
                            value: 0
                        ***REMOVED***);
                        continue;
                    ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                    self.args[pos++] = self.args[i];
                ***REMOVED***
                last = pos;
            ***REMOVED***
            self.args.length = last;
        ***REMOVED***
        if (compressor.option("unsafe")) ***REMOVED***
            if (exp instanceof AST_SymbolRef && exp.undeclared()) ***REMOVED***
                switch (exp.name) ***REMOVED***
                  case "Array":
                    if (self.args.length != 1) ***REMOVED***
                        return make_node(AST_Array, self, ***REMOVED***
                            elements: self.args
                        ***REMOVED***).optimize(compressor);
                    ***REMOVED***
                    break;
                  case "Object":
                    if (self.args.length == 0) ***REMOVED***
                        return make_node(AST_Object, self, ***REMOVED***
                            properties: []
                        ***REMOVED***);
                    ***REMOVED***
                    break;
                  case "String":
                    if (self.args.length == 0) return make_node(AST_String, self, ***REMOVED***
                        value: ""
                    ***REMOVED***);
                    if (self.args.length <= 1) return make_node(AST_Binary, self, ***REMOVED***
                        left: self.args[0],
                        operator: "+",
                        right: make_node(AST_String, self, ***REMOVED*** value: "" ***REMOVED***)
                    ***REMOVED***).optimize(compressor);
                    break;
                  case "Number":
                    if (self.args.length == 0) return make_node(AST_Number, self, ***REMOVED***
                        value: 0
                    ***REMOVED***);
                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, ***REMOVED***
                        expression: self.args[0],
                        operator: "+"
                    ***REMOVED***).optimize(compressor);
                  case "Boolean":
                    if (self.args.length == 0) return make_node(AST_False, self);
                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, ***REMOVED***
                        expression: make_node(AST_UnaryPrefix, self, ***REMOVED***
                            expression: self.args[0],
                            operator: "!"
                        ***REMOVED***),
                        operator: "!"
                    ***REMOVED***).optimize(compressor);
                    break;
                  case "Function":
                    // new Function() => function()***REMOVED******REMOVED***
                    if (self.args.length == 0) return make_node(AST_Function, self, ***REMOVED***
                        argnames: [],
                        body: []
                    ***REMOVED***);
                    if (all(self.args, function(x)***REMOVED*** return x instanceof AST_String ***REMOVED***)) ***REMOVED***
                        // quite a corner-case, but we can handle it:
                        //   https://github.com/mishoo/UglifyJS2/issues/203
                        // if the code argument is a constant, then we can minify it.
                        try ***REMOVED***
                            var code = "(function(" + self.args.slice(0, -1).map(function(arg)***REMOVED***
                                return arg.value;
                            ***REMOVED***).join(",") + ")***REMOVED***" + self.args[self.args.length - 1].value + "***REMOVED***)()";
                            var ast = parse(code);
                            ast.figure_out_scope(***REMOVED*** screw_ie8: compressor.option("screw_ie8") ***REMOVED***);
                            var comp = new Compressor(compressor.options);
                            ast = ast.transform(comp);
                            ast.figure_out_scope(***REMOVED*** screw_ie8: compressor.option("screw_ie8") ***REMOVED***);
                            ast.mangle_names();
                            var fun;
                            try ***REMOVED***
                                ast.walk(new TreeWalker(function(node)***REMOVED***
                                    if (node instanceof AST_Lambda) ***REMOVED***
                                        fun = node;
                                        throw ast;
                                    ***REMOVED***
                                ***REMOVED***));
                            ***REMOVED*** catch(ex) ***REMOVED***
                                if (ex !== ast) throw ex;
                            ***REMOVED***;
                            if (!fun) return self;
                            var args = fun.argnames.map(function(arg, i)***REMOVED***
                                return make_node(AST_String, self.args[i], ***REMOVED***
                                    value: arg.print_to_string()
                                ***REMOVED***);
                            ***REMOVED***);
                            var code = OutputStream();
                            AST_BlockStatement.prototype._codegen.call(fun, fun, code);
                            code = code.toString().replace(/^\***REMOVED***|\***REMOVED***$/g, "");
                            args.push(make_node(AST_String, self.args[self.args.length - 1], ***REMOVED***
                                value: code
                            ***REMOVED***));
                            self.args = args;
                            return self;
                        ***REMOVED*** catch(ex) ***REMOVED***
                            if (ex instanceof JS_Parse_Error) ***REMOVED***
                                compressor.warn("Error parsing code passed to new Function [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.args[self.args.length - 1].start);
                                compressor.warn(ex.toString());
                            ***REMOVED*** else ***REMOVED***
                                console.log(ex);
                                throw ex;
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***
                    break;
                ***REMOVED***
            ***REMOVED***
            else if (exp instanceof AST_Dot && exp.property == "toString" && self.args.length == 0) ***REMOVED***
                return make_node(AST_Binary, self, ***REMOVED***
                    left: make_node(AST_String, self, ***REMOVED*** value: "" ***REMOVED***),
                    operator: "+",
                    right: exp.expression
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
            else if (exp instanceof AST_Dot && exp.expression instanceof AST_Array && exp.property == "join") EXIT: ***REMOVED***
                var separator;
                if (self.args.length > 0) ***REMOVED***
                    separator = self.args[0].evaluate(compressor);
                    if (separator === self.args[0]) break EXIT; // not a constant
                ***REMOVED***
                var elements = [];
                var consts = [];
                exp.expression.elements.forEach(function(el) ***REMOVED***
                    var value = el.evaluate(compressor);
                    if (value !== el) ***REMOVED***
                        consts.push(value);
                    ***REMOVED*** else ***REMOVED***
                        if (consts.length > 0) ***REMOVED***
                            elements.push(make_node(AST_String, self, ***REMOVED***
                                value: consts.join(separator)
                            ***REMOVED***));
                            consts.length = 0;
                        ***REMOVED***
                        elements.push(el);
                    ***REMOVED***
                ***REMOVED***);
                if (consts.length > 0) ***REMOVED***
                    elements.push(make_node(AST_String, self, ***REMOVED***
                        value: consts.join(separator)
                    ***REMOVED***));
                ***REMOVED***
                if (elements.length == 0) return make_node(AST_String, self, ***REMOVED*** value: "" ***REMOVED***);
                if (elements.length == 1) ***REMOVED***
                    if (elements[0].is_string(compressor)) ***REMOVED***
                        return elements[0];
                    ***REMOVED***
                    return make_node(AST_Binary, elements[0], ***REMOVED***
                        operator : "+",
                        left     : make_node(AST_String, self, ***REMOVED*** value: "" ***REMOVED***),
                        right    : elements[0]
                    ***REMOVED***);
                ***REMOVED***
                if (separator == "") ***REMOVED***
                    var first;
                    if (elements[0].is_string(compressor)
                        || elements[1].is_string(compressor)) ***REMOVED***
                        first = elements.shift();
                    ***REMOVED*** else ***REMOVED***
                        first = make_node(AST_String, self, ***REMOVED*** value: "" ***REMOVED***);
                    ***REMOVED***
                    return elements.reduce(function(prev, el)***REMOVED***
                        return make_node(AST_Binary, el, ***REMOVED***
                            operator : "+",
                            left     : prev,
                            right    : el
                        ***REMOVED***);
                    ***REMOVED***, first).optimize(compressor);
                ***REMOVED***
                // need this awkward cloning to not affect original element
                // best_of will decide which one to get through.
                var node = self.clone();
                node.expression = node.expression.clone();
                node.expression.expression = node.expression.expression.clone();
                node.expression.expression.elements = elements;
                return best_of(compressor, self, node);
            ***REMOVED***
            else if (exp instanceof AST_Dot && exp.expression.is_string(compressor) && exp.property == "charAt") ***REMOVED***
                var arg = self.args[0];
                var index = arg ? arg.evaluate(compressor) : 0;
                if (index !== arg) ***REMOVED***
                    return make_node(AST_Sub, exp, ***REMOVED***
                        expression: exp.expression,
                        property: make_node_from_constant(index | 0, arg || exp)
                    ***REMOVED***).optimize(compressor);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (exp instanceof AST_Function) ***REMOVED***
            if (exp.body[0] instanceof AST_Return) ***REMOVED***
                var value = exp.body[0].value;
                if (!value || value.is_constant()) ***REMOVED***
                    var args = self.args.concat(value || make_node(AST_Undefined, self));
                    return AST_Seq.from_array(args).transform(compressor);
                ***REMOVED***
            ***REMOVED***
            if (compressor.option("side_effects") && all(exp.body, is_empty)) ***REMOVED***
                var args = self.args.concat(make_node(AST_Undefined, self));
                return AST_Seq.from_array(args).transform(compressor);
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("drop_console")) ***REMOVED***
            if (exp instanceof AST_PropAccess) ***REMOVED***
                var name = exp.expression;
                while (name.expression) ***REMOVED***
                    name = name.expression;
                ***REMOVED***
                if (name instanceof AST_SymbolRef
                    && name.name == "console"
                    && name.undeclared()) ***REMOVED***
                    return make_node(AST_Undefined, self).optimize(compressor);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("negate_iife")
            && compressor.parent() instanceof AST_SimpleStatement
            && is_iife_call(self)) ***REMOVED***
            return self.negate(compressor, true);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_New, function(self, compressor)***REMOVED***
        if (compressor.option("unsafe")) ***REMOVED***
            var exp = self.expression;
            if (exp instanceof AST_SymbolRef && exp.undeclared()) ***REMOVED***
                switch (exp.name) ***REMOVED***
                  case "Object":
                  case "RegExp":
                  case "Function":
                  case "Error":
                  case "Array":
                    return make_node(AST_Call, self, self).transform(compressor);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Seq, function(self, compressor)***REMOVED***
        if (!compressor.option("side_effects"))
            return self;
        self.car = self.car.drop_side_effect_free(compressor, first_in_statement(compressor));
        if (!self.car) return maintain_this_binding(compressor.parent(), self, self.cdr);
        if (compressor.option("cascade")) ***REMOVED***
            var left;
            if (self.car instanceof AST_Assign
                && !self.car.left.has_side_effects(compressor)) ***REMOVED***
                left = self.car.left;
            ***REMOVED*** else if (self.car instanceof AST_Unary
                && (self.car.operator == "++" || self.car.operator == "--")) ***REMOVED***
                left = self.car.expression;
            ***REMOVED***
            if (left
                && !(left instanceof AST_SymbolRef
                    && (left.definition().orig[0] instanceof AST_SymbolLambda
                        || is_reference_const(left)))) ***REMOVED***
                var parent, field;
                var cdr = self.cdr;
                while (true) ***REMOVED***
                    if (cdr.equivalent_to(left)) ***REMOVED***
                        var car = self.car instanceof AST_UnaryPostfix ? make_node(AST_UnaryPrefix, self.car, ***REMOVED***
                            operator: self.car.operator,
                            expression: left
                        ***REMOVED***) : self.car;
                        if (parent) ***REMOVED***
                            parent[field] = car;
                            return self.cdr;
                        ***REMOVED***
                        return car;
                    ***REMOVED***
                    if (cdr instanceof AST_Binary && !(cdr instanceof AST_Assign)) ***REMOVED***
                        if (cdr.left.is_constant()) ***REMOVED***
                            if (cdr.operator == "||" || cdr.operator == "&&") break;
                            field = "right";
                        ***REMOVED*** else ***REMOVED***
                            field = "left";
                        ***REMOVED***
                    ***REMOVED*** else if (cdr instanceof AST_Call
                        || cdr instanceof AST_Unary && !unary_side_effects(cdr.operator)) ***REMOVED***
                        field = "expression";
                    ***REMOVED*** else break;
                    parent = cdr;
                    cdr = cdr[field];
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (is_undefined(self.cdr, compressor)) ***REMOVED***
            return make_node(AST_UnaryPrefix, self, ***REMOVED***
                operator   : "void",
                expression : self.car
            ***REMOVED***);
        ***REMOVED***
        return self;
    ***REMOVED***);

    AST_Unary.DEFMETHOD("lift_sequences", function(compressor)***REMOVED***
        if (compressor.option("sequences")) ***REMOVED***
            if (this.expression instanceof AST_Seq) ***REMOVED***
                var seq = this.expression;
                var x = seq.to_array();
                var e = this.clone();
                e.expression = x.pop();
                x.push(e);
                seq = AST_Seq.from_array(x).transform(compressor);
                return seq;
            ***REMOVED***
        ***REMOVED***
        return this;
    ***REMOVED***);

    OPT(AST_UnaryPostfix, function(self, compressor)***REMOVED***
        return self.lift_sequences(compressor);
    ***REMOVED***);

    OPT(AST_UnaryPrefix, function(self, compressor)***REMOVED***
        var e = self.expression;
        if (self.operator == "delete"
            && !(e instanceof AST_SymbolRef
                || e instanceof AST_PropAccess
                || e instanceof AST_NaN
                || e instanceof AST_Infinity
                || e instanceof AST_Undefined)) ***REMOVED***
            if (e instanceof AST_Seq) ***REMOVED***
                e = e.to_array();
                e.push(make_node(AST_True, self));
                return AST_Seq.from_array(e).optimize(compressor);
            ***REMOVED***
            return make_node(AST_Seq, self, ***REMOVED***
                car: e,
                cdr: make_node(AST_True, self)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        var seq = self.lift_sequences(compressor);
        if (seq !== self) ***REMOVED***
            return seq;
        ***REMOVED***
        if (compressor.option("side_effects") && self.operator == "void") ***REMOVED***
            e = e.drop_side_effect_free(compressor);
            if (e) ***REMOVED***
                self.expression = e;
                return self;
            ***REMOVED*** else ***REMOVED***
                return make_node(AST_Undefined, self).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("booleans") && compressor.in_boolean_context()) ***REMOVED***
            switch (self.operator) ***REMOVED***
              case "!":
                if (e instanceof AST_UnaryPrefix && e.operator == "!") ***REMOVED***
                    // !!foo ==> foo, if we're in boolean context
                    return e.expression;
                ***REMOVED***
                if (e instanceof AST_Binary) ***REMOVED***
                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));
                ***REMOVED***
                break;
              case "typeof":
                // typeof always returns a non-empty string, thus it's
                // always true in booleans
                compressor.warn("Boolean expression always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_node(AST_Seq, self, ***REMOVED***
                    car: e,
                    cdr: make_node(AST_True, self)
                ***REMOVED***)).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        if (self.operator == "-" && e instanceof AST_Infinity) ***REMOVED***
            e = e.transform(compressor);
        ***REMOVED***
        if (e instanceof AST_Binary
            && (self.operator == "+" || self.operator == "-")
            && (e.operator == "*" || e.operator == "/" || e.operator == "%")) ***REMOVED***
            return make_node(AST_Binary, self, ***REMOVED***
                operator: e.operator,
                left: make_node(AST_UnaryPrefix, e.left, ***REMOVED***
                    operator: self.operator,
                    expression: e.left
                ***REMOVED***),
                right: e.right
            ***REMOVED***);
        ***REMOVED***
        // avoids infinite recursion of numerals
        if (self.operator != "-"
            || !(e instanceof AST_Number || e instanceof AST_Infinity)) ***REMOVED***
            var ev = self.evaluate(compressor);
            if (ev !== self) ***REMOVED***
                ev = make_node_from_constant(ev, self).optimize(compressor);
                return best_of(compressor, ev, self);
            ***REMOVED***
        ***REMOVED***
        return self;
    ***REMOVED***);

    AST_Binary.DEFMETHOD("lift_sequences", function(compressor)***REMOVED***
        if (compressor.option("sequences")) ***REMOVED***
            if (this.left instanceof AST_Seq) ***REMOVED***
                var seq = this.left;
                var x = seq.to_array();
                var e = this.clone();
                e.left = x.pop();
                x.push(e);
                return AST_Seq.from_array(x).optimize(compressor);
            ***REMOVED***
            if (this.right instanceof AST_Seq && !this.left.has_side_effects(compressor)) ***REMOVED***
                var assign = this.operator == "=" && this.left instanceof AST_SymbolRef;
                var root = this.right.clone();
                var cursor, seq = root;
                while (assign || !seq.car.has_side_effects(compressor)) ***REMOVED***
                    cursor = seq;
                    if (seq.cdr instanceof AST_Seq) ***REMOVED***
                        seq = seq.cdr = seq.cdr.clone();
                    ***REMOVED*** else break;
                ***REMOVED***
                if (cursor) ***REMOVED***
                    var e = this.clone();
                    e.right = cursor.cdr;
                    cursor.cdr = e;
                    return root.optimize(compressor);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        return this;
    ***REMOVED***);

    var commutativeOperators = makePredicate("== === != !== * & | ^");

    OPT(AST_Binary, function(self, compressor)***REMOVED***
        function reversible() ***REMOVED***
            return self.left.is_constant()
                || self.right.is_constant()
                || !self.left.has_side_effects(compressor)
                    && !self.right.has_side_effects(compressor);
        ***REMOVED***
        function reverse(op) ***REMOVED***
            if (reversible()) ***REMOVED***
                if (op) self.operator = op;
                var tmp = self.left;
                self.left = self.right;
                self.right = tmp;
            ***REMOVED***
        ***REMOVED***
        if (commutativeOperators(self.operator)) ***REMOVED***
            if (self.right.is_constant()
                && !self.left.is_constant()) ***REMOVED***
                // if right is a constant, whatever side effects the
                // left side might have could not influence the
                // result.  hence, force switch.

                if (!(self.left instanceof AST_Binary
                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) ***REMOVED***
                    reverse();
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        self = self.lift_sequences(compressor);
        if (compressor.option("comparisons")) switch (self.operator) ***REMOVED***
          case "===":
          case "!==":
            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||
                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||
                (self.left.is_boolean() && self.right.is_boolean())) ***REMOVED***
                self.operator = self.operator.substr(0, 2);
            ***REMOVED***
            // XXX: intentionally falling down to the next case
          case "==":
          case "!=":
            // "undefined" == typeof x => undefined === x
            if (self.left instanceof AST_String
                && self.left.value == "undefined"
                && self.right instanceof AST_UnaryPrefix
                && self.right.operator == "typeof") ***REMOVED***
                var expr = self.right.expression;
                if (expr instanceof AST_SymbolRef ? !expr.undeclared()
                    : !(expr instanceof AST_PropAccess) || compressor.option("screw_ie8")) ***REMOVED***
                    self.right = expr;
                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);
                    if (self.operator.length == 2) self.operator += "=";
                ***REMOVED***
            ***REMOVED***
            break;
        ***REMOVED***
        if (compressor.option("booleans") && self.operator == "+" && compressor.in_boolean_context()) ***REMOVED***
            var ll = self.left.evaluate(compressor);
            var rr = self.right.evaluate(compressor);
            if (ll && typeof ll == "string") ***REMOVED***
                compressor.warn("+ in boolean context always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return make_node(AST_Seq, self, ***REMOVED***
                    car: self.right,
                    cdr: make_node(AST_True, self)
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
            if (rr && typeof rr == "string") ***REMOVED***
                compressor.warn("+ in boolean context always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return make_node(AST_Seq, self, ***REMOVED***
                    car: self.left,
                    cdr: make_node(AST_True, self)
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("comparisons") && self.is_boolean()) ***REMOVED***
            if (!(compressor.parent() instanceof AST_Binary)
                || compressor.parent() instanceof AST_Assign) ***REMOVED***
                var negated = make_node(AST_UnaryPrefix, self, ***REMOVED***
                    operator: "!",
                    expression: self.negate(compressor, first_in_statement(compressor))
                ***REMOVED***);
                self = best_of(compressor, self, negated);
            ***REMOVED***
            if (compressor.option("unsafe_comps")) ***REMOVED***
                switch (self.operator) ***REMOVED***
                  case "<": reverse(">"); break;
                  case "<=": reverse(">="); break;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (self.operator == "+") ***REMOVED***
            if (self.right instanceof AST_String
                && self.right.getValue() == ""
                && self.left.is_string(compressor)) ***REMOVED***
                return self.left;
            ***REMOVED***
            if (self.left instanceof AST_String
                && self.left.getValue() == ""
                && self.right.is_string(compressor)) ***REMOVED***
                return self.right;
            ***REMOVED***
            if (self.left instanceof AST_Binary
                && self.left.operator == "+"
                && self.left.left instanceof AST_String
                && self.left.left.getValue() == ""
                && self.right.is_string(compressor)) ***REMOVED***
                self.left = self.left.right;
                return self.transform(compressor);
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("evaluate")) ***REMOVED***
            switch (self.operator) ***REMOVED***
              case "&&":
                var ll = self.left.evaluate(compressor);
                if (!ll) ***REMOVED***
                    compressor.warn("Condition left of && always false [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);
                ***REMOVED*** else if (ll !== self.left) ***REMOVED***
                    compressor.warn("Condition left of && always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);
                ***REMOVED***
                if (compressor.option("booleans") && compressor.in_boolean_context()) ***REMOVED***
                    var rr = self.right.evaluate(compressor);
                    if (!rr) ***REMOVED***
                        compressor.warn("Boolean && always false [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                        return make_node(AST_Seq, self, ***REMOVED***
                            car: self.left,
                            cdr: make_node(AST_False, self)
                        ***REMOVED***).optimize(compressor);
                    ***REMOVED*** else if (rr !== self.right) ***REMOVED***
                        compressor.warn("Dropping side-effect-free && in boolean context [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                        return self.left.optimize(compressor);
                    ***REMOVED***
                ***REMOVED***
                break;
              case "||":
                var ll = self.left.evaluate(compressor);
                if (!ll) ***REMOVED***
                    compressor.warn("Condition left of || always false [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);
                ***REMOVED*** else if (ll !== self.left) ***REMOVED***
                    compressor.warn("Condition left of || always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);
                ***REMOVED***
                if (compressor.option("booleans") && compressor.in_boolean_context()) ***REMOVED***
                    var rr = self.right.evaluate(compressor);
                    if (!rr) ***REMOVED***
                        compressor.warn("Dropping side-effect-free || in boolean context [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                        return self.left.optimize(compressor);
                    ***REMOVED*** else if (rr !== self.right) ***REMOVED***
                        compressor.warn("Boolean || always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                        return make_node(AST_Seq, self, ***REMOVED***
                            car: self.left,
                            cdr: make_node(AST_True, self)
                        ***REMOVED***).optimize(compressor);
                    ***REMOVED***
                ***REMOVED***
                break;
            ***REMOVED***
            var associative = true;
            switch (self.operator) ***REMOVED***
              case "+":
                // "foo" + ("bar" + x) => "foobar" + x
                if (self.left instanceof AST_Constant
                    && self.right instanceof AST_Binary
                    && self.right.operator == "+"
                    && self.right.left instanceof AST_Constant
                    && self.right.is_string(compressor)) ***REMOVED***
                    self = make_node(AST_Binary, self, ***REMOVED***
                        operator: "+",
                        left: make_node(AST_String, self.left, ***REMOVED***
                            value: "" + self.left.getValue() + self.right.left.getValue(),
                            start: self.left.start,
                            end: self.right.left.end
                        ***REMOVED***),
                        right: self.right.right
                    ***REMOVED***);
                ***REMOVED***
                // (x + "foo") + "bar" => x + "foobar"
                if (self.right instanceof AST_Constant
                    && self.left instanceof AST_Binary
                    && self.left.operator == "+"
                    && self.left.right instanceof AST_Constant
                    && self.left.is_string(compressor)) ***REMOVED***
                    self = make_node(AST_Binary, self, ***REMOVED***
                        operator: "+",
                        left: self.left.left,
                        right: make_node(AST_String, self.right, ***REMOVED***
                            value: "" + self.left.right.getValue() + self.right.getValue(),
                            start: self.left.right.start,
                            end: self.right.end
                        ***REMOVED***)
                    ***REMOVED***);
                ***REMOVED***
                // (x + "foo") + ("bar" + y) => (x + "foobar") + y
                if (self.left instanceof AST_Binary
                    && self.left.operator == "+"
                    && self.left.is_string(compressor)
                    && self.left.right instanceof AST_Constant
                    && self.right instanceof AST_Binary
                    && self.right.operator == "+"
                    && self.right.left instanceof AST_Constant
                    && self.right.is_string(compressor)) ***REMOVED***
                    self = make_node(AST_Binary, self, ***REMOVED***
                        operator: "+",
                        left: make_node(AST_Binary, self.left, ***REMOVED***
                            operator: "+",
                            left: self.left.left,
                            right: make_node(AST_String, self.left.right, ***REMOVED***
                                value: "" + self.left.right.getValue() + self.right.left.getValue(),
                                start: self.left.right.start,
                                end: self.right.left.end
                            ***REMOVED***)
                        ***REMOVED***),
                        right: self.right.right
                    ***REMOVED***);
                ***REMOVED***
                // a + -b => a - b
                if (self.right instanceof AST_UnaryPrefix
                    && self.right.operator == "-"
                    && self.left.is_number(compressor)) ***REMOVED***
                    self = make_node(AST_Binary, self, ***REMOVED***
                        operator: "-",
                        left: self.left,
                        right: self.right.expression
                    ***REMOVED***);
                    break;
                ***REMOVED***
                // -a + b => b - a
                if (self.left instanceof AST_UnaryPrefix
                    && self.left.operator == "-"
                    && reversible()
                    && self.right.is_number(compressor)) ***REMOVED***
                    self = make_node(AST_Binary, self, ***REMOVED***
                        operator: "-",
                        left: self.right,
                        right: self.left.expression
                    ***REMOVED***);
                    break;
                ***REMOVED***
              case "*":
                associative = compressor.option("unsafe_math");
              case "&":
              case "|":
              case "^":
                // a + +b => +b + a
                if (self.left.is_number(compressor)
                    && self.right.is_number(compressor)
                    && reversible()
                    && !(self.left instanceof AST_Binary
                        && self.left.operator != self.operator
                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) ***REMOVED***
                    var reversed = make_node(AST_Binary, self, ***REMOVED***
                        operator: self.operator,
                        left: self.right,
                        right: self.left
                    ***REMOVED***);
                    if (self.right instanceof AST_Constant
                        && !(self.left instanceof AST_Constant)) ***REMOVED***
                        self = best_of(compressor, reversed, self);
                    ***REMOVED*** else ***REMOVED***
                        self = best_of(compressor, self, reversed);
                    ***REMOVED***
                ***REMOVED***
                if (associative && self.is_number(compressor)) ***REMOVED***
                    // a + (b + c) => (a + b) + c
                    if (self.right instanceof AST_Binary
                        && self.right.operator == self.operator) ***REMOVED***
                        self = make_node(AST_Binary, self, ***REMOVED***
                            operator: self.operator,
                            left: make_node(AST_Binary, self.left, ***REMOVED***
                                operator: self.operator,
                                left: self.left,
                                right: self.right.left,
                                start: self.left.start,
                                end: self.right.left.end
                            ***REMOVED***),
                            right: self.right.right
                        ***REMOVED***);
                    ***REMOVED***
                    // (n + 2) + 3 => 5 + n
                    // (2 * n) * 3 => 6 + n
                    if (self.right instanceof AST_Constant
                        && self.left instanceof AST_Binary
                        && self.left.operator == self.operator) ***REMOVED***
                        if (self.left.left instanceof AST_Constant) ***REMOVED***
                            self = make_node(AST_Binary, self, ***REMOVED***
                                operator: self.operator,
                                left: make_node(AST_Binary, self.left, ***REMOVED***
                                    operator: self.operator,
                                    left: self.left.left,
                                    right: self.right,
                                    start: self.left.left.start,
                                    end: self.right.end
                                ***REMOVED***),
                                right: self.left.right
                            ***REMOVED***);
                        ***REMOVED*** else if (self.left.right instanceof AST_Constant) ***REMOVED***
                            self = make_node(AST_Binary, self, ***REMOVED***
                                operator: self.operator,
                                left: make_node(AST_Binary, self.left, ***REMOVED***
                                    operator: self.operator,
                                    left: self.left.right,
                                    right: self.right,
                                    start: self.left.right.start,
                                    end: self.right.end
                                ***REMOVED***),
                                right: self.left.left
                            ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED***
                    // (a | 1) | (2 | d) => (3 | a) | b
                    if (self.left instanceof AST_Binary
                        && self.left.operator == self.operator
                        && self.left.right instanceof AST_Constant
                        && self.right instanceof AST_Binary
                        && self.right.operator == self.operator
                        && self.right.left instanceof AST_Constant) ***REMOVED***
                        self = make_node(AST_Binary, self, ***REMOVED***
                            operator: self.operator,
                            left: make_node(AST_Binary, self.left, ***REMOVED***
                                operator: self.operator,
                                left: make_node(AST_Binary, self.left.left, ***REMOVED***
                                    operator: self.operator,
                                    left: self.left.right,
                                    right: self.right.left,
                                    start: self.left.right.start,
                                    end: self.right.left.end
                                ***REMOVED***),
                                right: self.left.left
                            ***REMOVED***),
                            right: self.right.right
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        // x && (y && z)  ==>  x && y && z
        // x || (y || z)  ==>  x || y || z
        // x + ("y" + z)  ==>  x + "y" + z
        // "x" + (y + "z")==>  "x" + y + "z"
        if (self.right instanceof AST_Binary
            && self.right.operator == self.operator
            && (self.operator == "&&"
                || self.operator == "||"
                || (self.operator == "+"
                    && (self.right.left.is_string(compressor)
                        || (self.left.is_string(compressor)
                            && self.right.right.is_string(compressor))))))
        ***REMOVED***
            self.left = make_node(AST_Binary, self.left, ***REMOVED***
                operator : self.operator,
                left     : self.left,
                right    : self.right.left
            ***REMOVED***);
            self.right = self.right.right;
            return self.transform(compressor);
        ***REMOVED***
        var ev = self.evaluate(compressor);
        if (ev !== self) ***REMOVED***
            ev = make_node_from_constant(ev, self).optimize(compressor);
            return best_of(compressor, ev, self);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_SymbolRef, function(self, compressor)***REMOVED***
        var def = self.resolve_defines(compressor);
        if (def) ***REMOVED***
            return def.optimize(compressor);
        ***REMOVED***
        // testing against !self.scope.uses_with first is an optimization
        if (compressor.option("screw_ie8")
            && self.undeclared()
            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) ***REMOVED***
            switch (self.name) ***REMOVED***
              case "undefined":
                return make_node(AST_Undefined, self).optimize(compressor);
              case "NaN":
                return make_node(AST_NaN, self).optimize(compressor);
              case "Infinity":
                return make_node(AST_Infinity, self).optimize(compressor);
            ***REMOVED***
        ***REMOVED***
        if (compressor.option("evaluate")
            && compressor.option("reduce_vars")
            && is_lhs(self, compressor.parent()) !== self) ***REMOVED***
            var d = self.definition();
            var fixed = self.fixed_value();
            if (fixed) ***REMOVED***
                if (d.should_replace === undefined) ***REMOVED***
                    var init = fixed.evaluate(compressor);
                    if (init !== fixed && (compressor.option("unsafe_regexp") || !(init instanceof RegExp))) ***REMOVED***
                        init = make_node_from_constant(init, fixed);
                        var value = init.optimize(compressor).print_to_string().length;
                        var fn;
                        if (has_symbol_ref(fixed)) ***REMOVED***
                            fn = function() ***REMOVED***
                                var result = init.optimize(compressor);
                                return result === init ? result.clone(true) : result;
                            ***REMOVED***;
                        ***REMOVED*** else ***REMOVED***
                            value = Math.min(value, fixed.print_to_string().length);
                            fn = function() ***REMOVED***
                                var result = best_of_expression(init.optimize(compressor), fixed);
                                return result === init || result === fixed ? result.clone(true) : result;
                            ***REMOVED***;
                        ***REMOVED***
                        var name = d.name.length;
                        var overhead = 0;
                        if (compressor.option("unused") && (!d.global || compressor.option("toplevel"))) ***REMOVED***
                            overhead = (name + 2 + value) / d.references.length;
                        ***REMOVED***
                        d.should_replace = value <= name + overhead ? fn : false;
                    ***REMOVED*** else ***REMOVED***
                        d.should_replace = false;
                    ***REMOVED***
                ***REMOVED***
                if (d.should_replace) ***REMOVED***
                    return d.should_replace();
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        return self;

        function has_symbol_ref(value) ***REMOVED***
            var found;
            value.walk(new TreeWalker(function(node) ***REMOVED***
                if (node instanceof AST_SymbolRef) found = true;
                if (found) return true;
            ***REMOVED***));
            return found;
        ***REMOVED***
    ***REMOVED***);

    function is_atomic(lhs, self) ***REMOVED***
        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;
    ***REMOVED***

    OPT(AST_Undefined, function(self, compressor)***REMOVED***
        if (compressor.option("unsafe")) ***REMOVED***
            var undef = find_variable(compressor, "undefined");
            if (undef) ***REMOVED***
                var ref = make_node(AST_SymbolRef, self, ***REMOVED***
                    name   : "undefined",
                    scope  : undef.scope,
                    thedef : undef
                ***REMOVED***);
                ref.is_undefined = true;
                return ref;
            ***REMOVED***
        ***REMOVED***
        var lhs = is_lhs(compressor.self(), compressor.parent());
        if (lhs && is_atomic(lhs, self)) return self;
        return make_node(AST_UnaryPrefix, self, ***REMOVED***
            operator: "void",
            expression: make_node(AST_Number, self, ***REMOVED***
                value: 0
            ***REMOVED***)
        ***REMOVED***);
    ***REMOVED***);

    OPT(AST_Infinity, function(self, compressor)***REMOVED***
        var lhs = is_lhs(compressor.self(), compressor.parent());
        if (lhs && is_atomic(lhs, self)) return self;
        if (compressor.option("keep_infinity")
            && !(lhs && !is_atomic(lhs, self))
            && !find_variable(compressor, "Infinity"))
            return self;
        return make_node(AST_Binary, self, ***REMOVED***
            operator: "/",
            left: make_node(AST_Number, self, ***REMOVED***
                value: 1
            ***REMOVED***),
            right: make_node(AST_Number, self, ***REMOVED***
                value: 0
            ***REMOVED***)
        ***REMOVED***);
    ***REMOVED***);

    OPT(AST_NaN, function(self, compressor)***REMOVED***
        var lhs = is_lhs(compressor.self(), compressor.parent());
        if (lhs && !is_atomic(lhs, self)
            || find_variable(compressor, "NaN")) ***REMOVED***
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "/",
                left: make_node(AST_Number, self, ***REMOVED***
                    value: 0
                ***REMOVED***),
                right: make_node(AST_Number, self, ***REMOVED***
                    value: 0
                ***REMOVED***)
            ***REMOVED***);
        ***REMOVED***
        return self;
    ***REMOVED***);

    var ASSIGN_OPS = [ '+', '-', '/', '*', '%', '>>', '<<', '>>>', '|', '^', '&' ];
    var ASSIGN_OPS_COMMUTATIVE = [ '*', '|', '^', '&' ];
    OPT(AST_Assign, function(self, compressor)***REMOVED***
        self = self.lift_sequences(compressor);
        if (self.operator == "=" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) ***REMOVED***
            // x = expr1 OP expr2
            if (self.right.left instanceof AST_SymbolRef
                && self.right.left.name == self.left.name
                && member(self.right.operator, ASSIGN_OPS)) ***REMOVED***
                // x = x - 2  --->  x -= 2
                self.operator = self.right.operator + "=";
                self.right = self.right.right;
            ***REMOVED***
            else if (self.right.right instanceof AST_SymbolRef
                && self.right.right.name == self.left.name
                && member(self.right.operator, ASSIGN_OPS_COMMUTATIVE)
                && !self.right.left.has_side_effects(compressor)) ***REMOVED***
                // x = 2 & x  --->  x &= 2
                self.operator = self.right.operator + "=";
                self.right = self.right.left;
            ***REMOVED***
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Conditional, function(self, compressor)***REMOVED***
        if (!compressor.option("conditionals")) return self;
        if (self.condition instanceof AST_Seq) ***REMOVED***
            var car = self.condition.car;
            self.condition = self.condition.cdr;
            return AST_Seq.cons(car, self);
        ***REMOVED***
        var cond = self.condition.evaluate(compressor);
        if (cond !== self.condition) ***REMOVED***
            if (cond) ***REMOVED***
                compressor.warn("Condition always true [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return maintain_this_binding(compressor.parent(), self, self.consequent);
            ***REMOVED*** else ***REMOVED***
                compressor.warn("Condition always false [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", self.start);
                return maintain_this_binding(compressor.parent(), self, self.alternative);
            ***REMOVED***
        ***REMOVED***
        var negated = cond.negate(compressor, first_in_statement(compressor));
        if (best_of(compressor, cond, negated) === negated) ***REMOVED***
            self = make_node(AST_Conditional, self, ***REMOVED***
                condition: negated,
                consequent: self.alternative,
                alternative: self.consequent
            ***REMOVED***);
        ***REMOVED***
        var condition = self.condition;
        var consequent = self.consequent;
        var alternative = self.alternative;
        // x?x:y --> x||y
        if (condition instanceof AST_SymbolRef
            && consequent instanceof AST_SymbolRef
            && condition.definition() === consequent.definition()) ***REMOVED***
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "||",
                left: condition,
                right: alternative
            ***REMOVED***);
        ***REMOVED***
        // if (foo) exp = something; else exp = something_else;
        //                   |
        //                   v
        // exp = foo ? something : something_else;
        if (consequent instanceof AST_Assign
            && alternative instanceof AST_Assign
            && consequent.operator == alternative.operator
            && consequent.left.equivalent_to(alternative.left)
            && (!self.condition.has_side_effects(compressor)
                || consequent.operator == "="
                    && !consequent.left.has_side_effects(compressor))) ***REMOVED***
            return make_node(AST_Assign, self, ***REMOVED***
                operator: consequent.operator,
                left: consequent.left,
                right: make_node(AST_Conditional, self, ***REMOVED***
                    condition: self.condition,
                    consequent: consequent.right,
                    alternative: alternative.right
                ***REMOVED***)
            ***REMOVED***);
        ***REMOVED***
        // x ? y(a) : y(b) --> y(x ? a : b)
        if (consequent instanceof AST_Call
            && alternative.TYPE === consequent.TYPE
            && consequent.args.length == 1
            && alternative.args.length == 1
            && consequent.expression.equivalent_to(alternative.expression)
            && !consequent.expression.has_side_effects(compressor)) ***REMOVED***
            consequent.args[0] = make_node(AST_Conditional, self, ***REMOVED***
                condition: self.condition,
                consequent: consequent.args[0],
                alternative: alternative.args[0]
            ***REMOVED***);
            return consequent;
        ***REMOVED***
        // x?y?z:a:a --> x&&y?z:a
        if (consequent instanceof AST_Conditional
            && consequent.alternative.equivalent_to(alternative)) ***REMOVED***
            return make_node(AST_Conditional, self, ***REMOVED***
                condition: make_node(AST_Binary, self, ***REMOVED***
                    left: self.condition,
                    operator: "&&",
                    right: consequent.condition
                ***REMOVED***),
                consequent: consequent.consequent,
                alternative: alternative
            ***REMOVED***);
        ***REMOVED***
        // x ? y : y --> x, y
        if (consequent.equivalent_to(alternative)) ***REMOVED***
            return make_node(AST_Seq, self, ***REMOVED***
                car: self.condition,
                cdr: consequent
            ***REMOVED***).optimize(compressor);
        ***REMOVED***

        if (is_true(self.consequent)) ***REMOVED***
            if (is_false(self.alternative)) ***REMOVED***
                // c ? true : false ---> !!c
                return booleanize(self.condition);
            ***REMOVED***
            // c ? true : x ---> !!c || x
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "||",
                left: booleanize(self.condition),
                right: self.alternative
            ***REMOVED***);
        ***REMOVED***
        if (is_false(self.consequent)) ***REMOVED***
            if (is_true(self.alternative)) ***REMOVED***
                // c ? false : true ---> !c
                return booleanize(self.condition.negate(compressor));
            ***REMOVED***
            // c ? false : x ---> !c && x
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "&&",
                left: booleanize(self.condition.negate(compressor)),
                right: self.alternative
            ***REMOVED***);
        ***REMOVED***
        if (is_true(self.alternative)) ***REMOVED***
            // c ? x : true ---> !c || x
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "||",
                left: booleanize(self.condition.negate(compressor)),
                right: self.consequent
            ***REMOVED***);
        ***REMOVED***
        if (is_false(self.alternative)) ***REMOVED***
            // c ? x : false ---> !!c && x
            return make_node(AST_Binary, self, ***REMOVED***
                operator: "&&",
                left: booleanize(self.condition),
                right: self.consequent
            ***REMOVED***);
        ***REMOVED***

        return self;

        function booleanize(node) ***REMOVED***
            if (node.is_boolean()) return node;
            // !!expression
            return make_node(AST_UnaryPrefix, node, ***REMOVED***
                operator: "!",
                expression: node.negate(compressor)
            ***REMOVED***);
        ***REMOVED***

        // AST_True or !0
        function is_true(node) ***REMOVED***
            return node instanceof AST_True
                || (node instanceof AST_UnaryPrefix
                    && node.operator == "!"
                    && node.expression instanceof AST_Constant
                    && !node.expression.value);
        ***REMOVED***
        // AST_False or !1
        function is_false(node) ***REMOVED***
            return node instanceof AST_False
                || (node instanceof AST_UnaryPrefix
                    && node.operator == "!"
                    && node.expression instanceof AST_Constant
                    && !!node.expression.value);
        ***REMOVED***
    ***REMOVED***);

    OPT(AST_Boolean, function(self, compressor)***REMOVED***
        if (compressor.option("booleans")) ***REMOVED***
            var p = compressor.parent();
            if (p instanceof AST_Binary && (p.operator == "=="
                                            || p.operator == "!=")) ***REMOVED***
                compressor.warn("Non-strict equality against boolean: ***REMOVED***operator***REMOVED*** ***REMOVED***value***REMOVED*** [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]", ***REMOVED***
                    operator : p.operator,
                    value    : self.value,
                    file     : p.start.file,
                    line     : p.start.line,
                    col      : p.start.col,
                ***REMOVED***);
                return make_node(AST_Number, self, ***REMOVED***
                    value: +self.value
                ***REMOVED***);
            ***REMOVED***
            return make_node(AST_UnaryPrefix, self, ***REMOVED***
                operator: "!",
                expression: make_node(AST_Number, self, ***REMOVED***
                    value: 1 - self.value
                ***REMOVED***)
            ***REMOVED***);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Sub, function(self, compressor)***REMOVED***
        var prop = self.property;
        if (prop instanceof AST_String && compressor.option("properties")) ***REMOVED***
            prop = prop.getValue();
            if (RESERVED_WORDS(prop) ? compressor.option("screw_ie8") : is_identifier_string(prop)) ***REMOVED***
                return make_node(AST_Dot, self, ***REMOVED***
                    expression : self.expression,
                    property   : prop
                ***REMOVED***).optimize(compressor);
            ***REMOVED***
            var v = parseFloat(prop);
            if (!isNaN(v) && v.toString() == prop) ***REMOVED***
                self.property = make_node(AST_Number, self.property, ***REMOVED***
                    value: v
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***
        var ev = self.evaluate(compressor);
        if (ev !== self) ***REMOVED***
            ev = make_node_from_constant(ev, self).optimize(compressor);
            return best_of(compressor, ev, self);
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_Dot, function(self, compressor)***REMOVED***
        var def = self.resolve_defines(compressor);
        if (def) ***REMOVED***
            return def.optimize(compressor);
        ***REMOVED***
        var prop = self.property;
        if (RESERVED_WORDS(prop) && !compressor.option("screw_ie8")) ***REMOVED***
            return make_node(AST_Sub, self, ***REMOVED***
                expression : self.expression,
                property   : make_node(AST_String, self, ***REMOVED***
                    value: prop
                ***REMOVED***)
            ***REMOVED***).optimize(compressor);
        ***REMOVED***
        if (compressor.option("unsafe_proto")
            && self.expression instanceof AST_Dot
            && self.expression.property == "prototype") ***REMOVED***
            var exp = self.expression.expression;
            if (exp instanceof AST_SymbolRef && exp.undeclared()) switch (exp.name) ***REMOVED***
              case "Array":
                self.expression = make_node(AST_Array, self.expression, ***REMOVED***
                    elements: []
                ***REMOVED***);
                break;
              case "Object":
                self.expression = make_node(AST_Object, self.expression, ***REMOVED***
                    properties: []
                ***REMOVED***);
                break;
              case "String":
                self.expression = make_node(AST_String, self.expression, ***REMOVED***
                    value: ""
                ***REMOVED***);
                break;
            ***REMOVED***
        ***REMOVED***
        var ev = self.evaluate(compressor);
        if (ev !== self) ***REMOVED***
            ev = make_node_from_constant(ev, self).optimize(compressor);
            return best_of(compressor, ev, self);
        ***REMOVED***
        return self;
    ***REMOVED***);

    function literals_in_boolean_context(self, compressor) ***REMOVED***
        if (compressor.option("booleans") && compressor.in_boolean_context()) ***REMOVED***
            return best_of(compressor, self, make_node(AST_Seq, self, ***REMOVED***
                car: self,
                cdr: make_node(AST_True, self)
            ***REMOVED***).optimize(compressor));
        ***REMOVED***
        return self;
    ***REMOVED***;
    OPT(AST_Array, literals_in_boolean_context);
    OPT(AST_Object, literals_in_boolean_context);
    OPT(AST_RegExp, literals_in_boolean_context);

    OPT(AST_Return, function(self, compressor)***REMOVED***
        if (self.value && is_undefined(self.value, compressor)) ***REMOVED***
            self.value = null;
        ***REMOVED***
        return self;
    ***REMOVED***);

    OPT(AST_VarDef, function(self, compressor)***REMOVED***
        var defines = compressor.option("global_defs");
        if (defines && HOP(defines, self.name.name)) ***REMOVED***
            compressor.warn('global_defs ' + self.name.name + ' redefined [***REMOVED***file***REMOVED***:***REMOVED***line***REMOVED***,***REMOVED***col***REMOVED***]', self.start);
        ***REMOVED***
        return self;
    ***REMOVED***);

***REMOVED***)();
