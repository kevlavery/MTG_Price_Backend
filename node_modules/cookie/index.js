/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param ***REMOVED***string***REMOVED*** str
 * @param ***REMOVED***object***REMOVED*** [options]
 * @return ***REMOVED***object***REMOVED***
 * @public
 */

function parse(str, options) ***REMOVED***
  if (typeof str !== 'string') ***REMOVED***
    throw new TypeError('argument str must be a string');
  ***REMOVED***

  var obj = ***REMOVED******REMOVED***
  var opt = options || ***REMOVED******REMOVED***;
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) ***REMOVED***
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) ***REMOVED***
      continue;
    ***REMOVED***

    var key = pair.substr(0, eq_idx).trim()
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) ***REMOVED***
      val = val.slice(1, -1);
    ***REMOVED***

    // only assign once
    if (undefined == obj[key]) ***REMOVED***
      obj[key] = tryDecode(val, dec);
    ***REMOVED***
  ***REMOVED***

  return obj;
***REMOVED***

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', ***REMOVED*** httpOnly: true ***REMOVED***)
 *   => "foo=bar; httpOnly"
 *
 * @param ***REMOVED***string***REMOVED*** name
 * @param ***REMOVED***string***REMOVED*** val
 * @param ***REMOVED***object***REMOVED*** [options]
 * @return ***REMOVED***string***REMOVED***
 * @public
 */

function serialize(name, val, options) ***REMOVED***
  var opt = options || ***REMOVED******REMOVED***;
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') ***REMOVED***
    throw new TypeError('option encode is invalid');
  ***REMOVED***

  if (!fieldContentRegExp.test(name)) ***REMOVED***
    throw new TypeError('argument name is invalid');
  ***REMOVED***

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) ***REMOVED***
    throw new TypeError('argument val is invalid');
  ***REMOVED***

  var str = name + '=' + value;

  if (null != opt.maxAge) ***REMOVED***
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  ***REMOVED***

  if (opt.domain) ***REMOVED***
    if (!fieldContentRegExp.test(opt.domain)) ***REMOVED***
      throw new TypeError('option domain is invalid');
    ***REMOVED***

    str += '; Domain=' + opt.domain;
  ***REMOVED***

  if (opt.path) ***REMOVED***
    if (!fieldContentRegExp.test(opt.path)) ***REMOVED***
      throw new TypeError('option path is invalid');
    ***REMOVED***

    str += '; Path=' + opt.path;
  ***REMOVED***

  if (opt.expires) ***REMOVED***
    if (typeof opt.expires.toUTCString !== 'function') ***REMOVED***
      throw new TypeError('option expires is invalid');
    ***REMOVED***

    str += '; Expires=' + opt.expires.toUTCString();
  ***REMOVED***

  if (opt.httpOnly) ***REMOVED***
    str += '; HttpOnly';
  ***REMOVED***

  if (opt.secure) ***REMOVED***
    str += '; Secure';
  ***REMOVED***

  if (opt.sameSite) ***REMOVED***
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) ***REMOVED***
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    ***REMOVED***
  ***REMOVED***

  return str;
***REMOVED***

/**
 * Try decoding a string using a decoding function.
 *
 * @param ***REMOVED***string***REMOVED*** str
 * @param ***REMOVED***function***REMOVED*** decode
 * @private
 */

function tryDecode(str, decode) ***REMOVED***
  try ***REMOVED***
    return decode(str);
  ***REMOVED*** catch (e) ***REMOVED***
    return str;
  ***REMOVED***
***REMOVED***
