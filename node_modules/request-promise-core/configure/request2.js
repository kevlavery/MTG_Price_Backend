'use strict';

var core = require('../'),
    isArray = require('lodash/isArray'),
    isFunction = require('lodash/isFunction'),
    isObjectLike = require('lodash/isObjectLike');


module.exports = function (options) ***REMOVED***

    var errorText = 'Please verify options'; // For better minification because this string is repeating

    if (!isObjectLike(options)) ***REMOVED***
        throw new TypeError(errorText);
    ***REMOVED***

    if (!isFunction(options.request)) ***REMOVED***
        throw new TypeError(errorText + '.request');
    ***REMOVED***

    if (!isArray(options.expose) || options.expose.length === 0) ***REMOVED***
        throw new TypeError(errorText + '.expose');
    ***REMOVED***


    var plumbing = core(***REMOVED***
        PromiseImpl: options.PromiseImpl,
        constructorMixin: options.constructorMixin
    ***REMOVED***);


    // Intercepting Request's init method

    var originalInit = options.request.Request.prototype.init;

    options.request.Request.prototype.init = function RP$initInterceptor(requestOptions) ***REMOVED***

        // Init may be called again - currently in case of redirects
        if (isObjectLike(requestOptions) && !this._callback && !this._rp_promise) ***REMOVED***

            plumbing.init.call(this, requestOptions);

        ***REMOVED***

        return originalInit.apply(this, arguments);

    ***REMOVED***;


    // Exposing the Promise capabilities

    var thenExposed = false;
    for ( var i = 0; i < options.expose.length; i+=1 ) ***REMOVED***

        var method = options.expose[i];

        plumbing[ method === 'promise' ? 'exposePromise' : 'exposePromiseMethod' ](
            options.request.Request.prototype,
            null,
            '_rp_promise',
            method
        );

        if (method === 'then') ***REMOVED***
            thenExposed = true;
        ***REMOVED***

    ***REMOVED***

    if (!thenExposed) ***REMOVED***
        throw new Error('Please expose "then"');
    ***REMOVED***

***REMOVED***;
