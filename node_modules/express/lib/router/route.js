/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */

var debug = require('debug')('express:router:route');
var flatten = require('array-flatten');
var Layer = require('./layer');
var methods = require('methods');

/**
 * Module variables.
 * @private
 */

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * Module exports.
 * @public
 */

module.exports = Route;

/**
 * Initialize `Route` with the given `path`,
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @public
 */

function Route(path) ***REMOVED***
  this.path = path;
  this.stack = [];

  debug('new %o', path)

  // route handlers for various http methods
  this.methods = ***REMOVED******REMOVED***;
***REMOVED***

/**
 * Determine if the route handles a given method.
 * @private
 */

Route.prototype._handles_method = function _handles_method(method) ***REMOVED***
  if (this.methods._all) ***REMOVED***
    return true;
  ***REMOVED***

  var name = method.toLowerCase();

  if (name === 'head' && !this.methods['head']) ***REMOVED***
    name = 'get';
  ***REMOVED***

  return Boolean(this.methods[name]);
***REMOVED***;

/**
 * @return ***REMOVED***Array***REMOVED*** supported HTTP methods
 * @private
 */

Route.prototype._options = function _options() ***REMOVED***
  var methods = Object.keys(this.methods);

  // append automatic head
  if (this.methods.get && !this.methods.head) ***REMOVED***
    methods.push('head');
  ***REMOVED***

  for (var i = 0; i < methods.length; i++) ***REMOVED***
    // make upper case
    methods[i] = methods[i].toUpperCase();
  ***REMOVED***

  return methods;
***REMOVED***;

/**
 * dispatch req, res into this route
 * @private
 */

Route.prototype.dispatch = function dispatch(req, res, done) ***REMOVED***
  var idx = 0;
  var stack = this.stack;
  if (stack.length === 0) ***REMOVED***
    return done();
  ***REMOVED***

  var method = req.method.toLowerCase();
  if (method === 'head' && !this.methods['head']) ***REMOVED***
    method = 'get';
  ***REMOVED***

  req.route = this;

  next();

  function next(err) ***REMOVED***
    // signal to exit route
    if (err && err === 'route') ***REMOVED***
      return done();
    ***REMOVED***

    // signal to exit router
    if (err && err === 'router') ***REMOVED***
      return done(err)
    ***REMOVED***

    var layer = stack[idx++];
    if (!layer) ***REMOVED***
      return done(err);
    ***REMOVED***

    if (layer.method && layer.method !== method) ***REMOVED***
      return next(err);
    ***REMOVED***

    if (err) ***REMOVED***
      layer.handle_error(err, req, res, next);
    ***REMOVED*** else ***REMOVED***
      layer.handle_request(req, res, next);
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Add a handler for all HTTP verbs to this route.
 *
 * Behaves just like middleware and can respond or call `next`
 * to continue processing.
 *
 * You can use multiple `.all` call to add multiple handlers.
 *
 *   function check_something(req, res, next)***REMOVED***
 *     next();
 *   ***REMOVED***;
 *
 *   function validate_user(req, res, next)***REMOVED***
 *     next();
 *   ***REMOVED***;
 *
 *   route
 *   .all(validate_user)
 *   .all(check_something)
 *   .get(function(req, res, next)***REMOVED***
 *     res.send('hello world');
 *   ***REMOVED***);
 *
 * @param ***REMOVED***function***REMOVED*** handler
 * @return ***REMOVED***Route***REMOVED*** for chaining
 * @api public
 */

Route.prototype.all = function all() ***REMOVED***
  var handles = flatten(slice.call(arguments));

  for (var i = 0; i < handles.length; i++) ***REMOVED***
    var handle = handles[i];

    if (typeof handle !== 'function') ***REMOVED***
      var type = toString.call(handle);
      var msg = 'Route.all() requires a callback function but got a ' + type
      throw new TypeError(msg);
    ***REMOVED***

    var layer = Layer('/', ***REMOVED******REMOVED***, handle);
    layer.method = undefined;

    this.methods._all = true;
    this.stack.push(layer);
  ***REMOVED***

  return this;
***REMOVED***;

methods.forEach(function(method)***REMOVED***
  Route.prototype[method] = function()***REMOVED***
    var handles = flatten(slice.call(arguments));

    for (var i = 0; i < handles.length; i++) ***REMOVED***
      var handle = handles[i];

      if (typeof handle !== 'function') ***REMOVED***
        var type = toString.call(handle);
        var msg = 'Route.' + method + '() requires a callback function but got a ' + type
        throw new Error(msg);
      ***REMOVED***

      debug('%s %o', method, this.path)

      var layer = Layer('/', ***REMOVED******REMOVED***, handle);
      layer.method = method;

      this.methods[method] = true;
      this.stack.push(layer);
    ***REMOVED***

    return this;
  ***REMOVED***;
***REMOVED***);
