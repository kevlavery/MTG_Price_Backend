var assert = require('assert'),
  path = require('path'),
  Completion = require('./lib/completion'),
  Parser = require('./lib/parser'),
  Usage = require('./lib/usage'),
  Validation = require('./lib/validation')

Argv(process.argv.slice(2))

var exports = module.exports = Argv
function Argv (processArgs, cwd) ***REMOVED***
  processArgs = processArgs || [] // handle calling yargs().

  var self = ***REMOVED******REMOVED***
  var completion = null
  var usage = null
  var validation = null

  if (!cwd) cwd = process.cwd()

  self.$0 = process.argv
    .slice(0, 2)
    .map(function (x, i) ***REMOVED***
      // ignore the node bin, specify this in your
      // bin file with #!/usr/bin/env node
      if (i === 0 && /\b(node|iojs)$/.test(x)) return
      var b = rebase(cwd, x)
      return x.match(/^\//) && b.length < x.length
      ? b : x
    ***REMOVED***)
    .join(' ').trim()

  if (process.env._ !== undefined && process.argv[1] === process.env._) ***REMOVED***
    self.$0 = process.env._.replace(
      path.dirname(process.execPath) + '/', ''
    )
  ***REMOVED***

  var options
  self.resetOptions = self.reset = function () ***REMOVED***
    // put yargs back into its initial
    // state, this is useful for creating a
    // nested CLI.
    options = ***REMOVED***
      array: [],
      boolean: [],
      string: [],
      narg: ***REMOVED******REMOVED***,
      key: ***REMOVED******REMOVED***,
      alias: ***REMOVED******REMOVED***,
      default: ***REMOVED******REMOVED***,
      defaultDescription: ***REMOVED******REMOVED***,
      requiresArg: [],
      count: [],
      normalize: [],
      config: []
    ***REMOVED***

    usage = Usage(self) // handle usage output.
    validation = Validation(self, usage) // handle arg validation.
    completion = Completion(self, usage)

    demanded = ***REMOVED******REMOVED***

    exitProcess = true
    strict = false
    helpOpt = null
    versionOpt = null
    completionOpt = null
    commandHandlers = ***REMOVED******REMOVED***
    self.parsed = false

    return self
  ***REMOVED***
  self.resetOptions()

  self.boolean = function (bools) ***REMOVED***
    options.boolean.push.apply(options.boolean, [].concat(bools))
    return self
  ***REMOVED***

  self.array = function (arrays) ***REMOVED***
    options.array.push.apply(options.array, [].concat(arrays))
    return self
  ***REMOVED***

  self.nargs = function (key, n) ***REMOVED***
    if (typeof key === 'object') ***REMOVED***
      Object.keys(key).forEach(function (k) ***REMOVED***
        self.nargs(k, key[k])
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      options.narg[key] = n
    ***REMOVED***
    return self
  ***REMOVED***

  self.normalize = function (strings) ***REMOVED***
    options.normalize.push.apply(options.normalize, [].concat(strings))
    return self
  ***REMOVED***

  self.config = function (configs) ***REMOVED***
    options.config.push.apply(options.config, [].concat(configs))
    return self
  ***REMOVED***

  self.example = function (cmd, description) ***REMOVED***
    usage.example(cmd, description)
    return self
  ***REMOVED***

  self.command = function (cmd, description, fn) ***REMOVED***
    usage.command(cmd, description)
    if (fn) commandHandlers[cmd] = fn
    return self
  ***REMOVED***

  var commandHandlers = ***REMOVED******REMOVED***
  self.getCommandHandlers = function () ***REMOVED***
    return commandHandlers
  ***REMOVED***

  self.string = function (strings) ***REMOVED***
    options.string.push.apply(options.string, [].concat(strings))
    return self
  ***REMOVED***

  self.default = function (key, value, defaultDescription) ***REMOVED***
    if (typeof key === 'object') ***REMOVED***
      Object.keys(key).forEach(function (k) ***REMOVED***
        self.default(k, key[k])
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      if (typeof value === 'function') ***REMOVED***
        defaultDescription = usage.functionDescription(value, defaultDescription)
        value = value.call()
      ***REMOVED***
      options.defaultDescription[key] = defaultDescription
      options.default[key] = value
    ***REMOVED***
    return self
  ***REMOVED***

  self.alias = function (x, y) ***REMOVED***
    if (typeof x === 'object') ***REMOVED***
      Object.keys(x).forEach(function (key) ***REMOVED***
        self.alias(key, x[key])
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      options.alias[x] = (options.alias[x] || []).concat(y)
    ***REMOVED***
    return self
  ***REMOVED***

  self.count = function (counts) ***REMOVED***
    options.count.push.apply(options.count, [].concat(counts))
    return self
  ***REMOVED***

  var demanded = ***REMOVED******REMOVED***
  self.demand = self.required = self.require = function (keys, msg) ***REMOVED***
    if (typeof keys === 'number') ***REMOVED***
      if (!demanded._) demanded._ = ***REMOVED*** count: 0, msg: null ***REMOVED***
      demanded._.count += keys
      demanded._.msg = msg
    ***REMOVED*** else if (Array.isArray(keys)) ***REMOVED***
      keys.forEach(function (key) ***REMOVED***
        self.demand(key, msg)
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      if (typeof msg === 'string') ***REMOVED***
        demanded[keys] = ***REMOVED*** msg: msg ***REMOVED***
      ***REMOVED*** else if (msg === true || typeof msg === 'undefined') ***REMOVED***
        demanded[keys] = ***REMOVED*** msg: undefined ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    return self
  ***REMOVED***
  self.getDemanded = function () ***REMOVED***
    return demanded
  ***REMOVED***

  self.requiresArg = function (requiresArgs) ***REMOVED***
    options.requiresArg.push.apply(options.requiresArg, [].concat(requiresArgs))
    return self
  ***REMOVED***

  self.implies = function (key, value) ***REMOVED***
    validation.implies(key, value)
    return self
  ***REMOVED***

  self.usage = function (msg, opts) ***REMOVED***
    if (!opts && typeof msg === 'object') ***REMOVED***
      opts = msg
      msg = null
    ***REMOVED***

    usage.usage(msg)

    if (opts) self.options(opts)

    return self
  ***REMOVED***

  self.epilogue = self.epilog = function (msg) ***REMOVED***
    usage.epilog(msg)
    return self
  ***REMOVED***

  self.fail = function (f) ***REMOVED***
    usage.failFn(f)
    return self
  ***REMOVED***

  self.check = function (f) ***REMOVED***
    validation.check(f)
    return self
  ***REMOVED***

  self.defaults = self.default

  self.describe = function (key, desc) ***REMOVED***
    options.key[key] = true
    usage.describe(key, desc)
    return self
  ***REMOVED***

  self.parse = function (args) ***REMOVED***
    return parseArgs(args)
  ***REMOVED***

  self.option = self.options = function (key, opt) ***REMOVED***
    if (typeof key === 'object') ***REMOVED***
      Object.keys(key).forEach(function (k) ***REMOVED***
        self.options(k, key[k])
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      assert(typeof opt === 'object', 'second argument to option must be an object')

      options.key[key] = true // track manually set keys.

      if (opt.alias) self.alias(key, opt.alias)

      var demand = opt.demand || opt.required || opt.require

      if (demand) ***REMOVED***
        self.demand(key, demand)
      ***REMOVED*** if ('default' in opt) ***REMOVED***
        self.default(key, opt.default)
      ***REMOVED*** if ('nargs' in opt) ***REMOVED***
        self.nargs(key, opt.nargs)
      ***REMOVED*** if (opt.boolean || opt.type === 'boolean') ***REMOVED***
        self.boolean(key)
        if (opt.alias) self.boolean(opt.alias)
      ***REMOVED*** if (opt.array || opt.type === 'array') ***REMOVED***
        self.array(key)
        if (opt.alias) self.array(opt.alias)
      ***REMOVED*** if (opt.string || opt.type === 'string') ***REMOVED***
        self.string(key)
        if (opt.alias) self.string(opt.alias)
      ***REMOVED*** if (opt.count || opt.type === 'count') ***REMOVED***
        self.count(key)
      ***REMOVED***

      var desc = opt.describe || opt.description || opt.desc
      if (desc) ***REMOVED***
        self.describe(key, desc)
      ***REMOVED***

      if (opt.requiresArg) ***REMOVED***
        self.requiresArg(key)
      ***REMOVED***
    ***REMOVED***

    return self
  ***REMOVED***
  self.getOptions = function () ***REMOVED***
    return options
  ***REMOVED***

  self.wrap = function (cols) ***REMOVED***
    usage.wrap(cols)
    return self
  ***REMOVED***

  var strict = false
  self.strict = function () ***REMOVED***
    strict = true
    return self
  ***REMOVED***
  self.getStrict = function () ***REMOVED***
    return strict
  ***REMOVED***

  self.showHelp = function (level) ***REMOVED***
    if (!self.parsed) parseArgs(processArgs) // run parser, if it has not already been executed.
    usage.showHelp(level)
    return self
  ***REMOVED***

  var versionOpt = null
  self.version = function (ver, opt, msg) ***REMOVED***
    versionOpt = opt || 'version'
    usage.version(ver)
    self.boolean(versionOpt)
    self.describe(versionOpt, msg || 'Show version number')
    return self
  ***REMOVED***

  var helpOpt = null
  self.addHelpOpt = function (opt, msg) ***REMOVED***
    helpOpt = opt
    self.boolean(opt)
    self.describe(opt, msg || 'Show help')
    return self
  ***REMOVED***

  self.showHelpOnFail = function (enabled, message) ***REMOVED***
    usage.showHelpOnFail(enabled, message)
    return self
  ***REMOVED***

  var exitProcess = true
  self.exitProcess = function (enabled) ***REMOVED***
    if (typeof enabled !== 'boolean') ***REMOVED***
      enabled = true
    ***REMOVED***
    exitProcess = enabled
    return self
  ***REMOVED***
  self.getExitProcess = function () ***REMOVED***
    return exitProcess
  ***REMOVED***

  self.help = function () ***REMOVED***
    if (arguments.length > 0) return self.addHelpOpt.apply(self, arguments)

    if (!self.parsed) parseArgs(processArgs) // run parser, if it has not already been executed.

    return usage.help()
  ***REMOVED***

  var completionOpt = null,
  completionCommand = null
  self.completion = function (cmd, desc, fn) ***REMOVED***
    // a function to execute when generating
    // completions can be provided as the second
    // or third argument to completion.
    if (typeof desc === 'function') ***REMOVED***
      fn = desc
      desc = null
    ***REMOVED***

    // register the completion command.
    completionCommand = cmd
    completionOpt = completion.completionKey
    self.command(completionCommand, desc || 'generate bash completion script')

    // a function can be provided
    if (fn) completion.registerFunction(fn)

    return self
  ***REMOVED***

  self.showCompletionScript = function ($0) ***REMOVED***
    $0 = $0 || self.$0
    console.log(completion.generateCompletionScript($0))
    return self
  ***REMOVED***

  self.getUsageInstance = function () ***REMOVED***
    return usage
  ***REMOVED***

  self.getValidationInstance = function () ***REMOVED***
    return validation
  ***REMOVED***

  self.terminalWidth = function () ***REMOVED***
    return require('window-size').width
  ***REMOVED***

  Object.defineProperty(self, 'argv', ***REMOVED***
    get: function () ***REMOVED***
      var args = null

      try ***REMOVED***
        args = parseArgs(processArgs)
      ***REMOVED*** catch (err) ***REMOVED***
        usage.fail(err.message)
      ***REMOVED***

      return args
    ***REMOVED***,
    enumerable: true
  ***REMOVED***)

  function parseArgs (args) ***REMOVED***
    var parsed = Parser(args, options),
      argv = parsed.argv,
      aliases = parsed.aliases

    argv.$0 = self.$0

    self.parsed = parsed

    // generate a completion script for adding to ~/.bashrc.
    if (completionCommand && ~argv._.indexOf(completionCommand)) ***REMOVED***
      self.showCompletionScript()
      if (exitProcess) ***REMOVED***
        process.exit(0)
      ***REMOVED***
    ***REMOVED***

    // if there's a handler associated with a
    // command defer processing to it.
    var handlerKeys = Object.keys(self.getCommandHandlers())
    for (var i = 0, command; (command = handlerKeys[i]) !== undefined; i++) ***REMOVED***
      if (~argv._.indexOf(command)) ***REMOVED***
        self.getCommandHandlers()[command](self.reset())
        return self.argv
      ***REMOVED***
    ***REMOVED***

    Object.keys(argv).forEach(function (key) ***REMOVED***
      if (key === helpOpt && argv[key]) ***REMOVED***
        self.showHelp('log')
        if (exitProcess) ***REMOVED***
          process.exit(0)
        ***REMOVED***
      ***REMOVED*** else if (key === versionOpt && argv[key]) ***REMOVED***
        usage.showVersion()
        if (exitProcess) ***REMOVED***
          process.exit(0)
        ***REMOVED***
      ***REMOVED*** else if (key === completionOpt) ***REMOVED***
        // we allow for asynchronous completions,
        // e.g., loading in a list of commands from an API.
        completion.getCompletion(function (completions) ***REMOVED***
          ;(completions || []).forEach(function (completion) ***REMOVED***
            console.log(completion)
          ***REMOVED***)

          if (exitProcess) ***REMOVED***
            process.exit(0)
          ***REMOVED***
        ***REMOVED***)
        return
      ***REMOVED***
    ***REMOVED***)

    validation.nonOptionCount(argv)
    validation.missingArgumentValue(argv)
    validation.requiredArguments(argv)

    if (strict) ***REMOVED***
      validation.unknownArguments(argv, aliases)
    ***REMOVED***

    validation.customChecks(argv, aliases)
    validation.implications(argv)
    setPlaceholderKeys(argv)

    return argv
  ***REMOVED***

  function setPlaceholderKeys (argv) ***REMOVED***
    Object.keys(options.key).forEach(function (key) ***REMOVED***
      if (typeof argv[key] === 'undefined') argv[key] = undefined
    ***REMOVED***)
  ***REMOVED***

  sigletonify(self)
  return self
***REMOVED***

// rebase an absolute path to a relative one with respect to a base directory
// exported for tests
exports.rebase = rebase
function rebase (base, dir) ***REMOVED***
  return path.relative(base, dir)
***REMOVED***

/*  Hack an instance of Argv with process.argv into Argv
    so people can do
    require('yargs')(['--beeble=1','-z','zizzle']).argv
    to parse a list of args and
    require('yargs').argv
    to get a parsed version of process.argv.
*/
function sigletonify (inst) ***REMOVED***
  Object.keys(inst).forEach(function (key) ***REMOVED***
    if (key === 'argv') ***REMOVED***
      Argv.__defineGetter__(key, inst.__lookupGetter__(key))
    ***REMOVED*** else ***REMOVED***
      Argv[key] = typeof inst[key] === 'function'
      ? inst[key].bind(inst)
      : inst[key]
    ***REMOVED***
  ***REMOVED***)
***REMOVED***
