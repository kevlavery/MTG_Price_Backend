'use strict';

var stream = require('stream'),
  util = require('util');

module.exports = GridFSBucketReadStream;

/**
 * A readable stream that enables you to read buffers from GridFS.
 *
 * Do not instantiate this class directly. Use `openDownloadStream()` instead.
 *
 * @class
 * @param ***REMOVED***Collection***REMOVED*** chunks Handle for chunks collection
 * @param ***REMOVED***Collection***REMOVED*** files Handle for files collection
 * @param ***REMOVED***Object***REMOVED*** readPreference The read preference to use
 * @param ***REMOVED***Object***REMOVED*** filter The query to use to find the file document
 * @param ***REMOVED***Object***REMOVED*** [options=null] Optional settings.
 * @param ***REMOVED***Number***REMOVED*** [options.sort=null] Optional sort for the file find query
 * @param ***REMOVED***Number***REMOVED*** [options.skip=null] Optional skip for the file find query
 * @param ***REMOVED***Number***REMOVED*** [options.start=null] Optional 0-based offset in bytes to start streaming from
 * @param ***REMOVED***Number***REMOVED*** [options.end=null] Optional 0-based offset in bytes to stop streaming before
 * @fires GridFSBucketReadStream#error
 * @fires GridFSBucketReadStream#file
 * @return ***REMOVED***GridFSBucketReadStream***REMOVED*** a GridFSBucketReadStream instance.
 */

function GridFSBucketReadStream(chunks, files, readPreference, filter, options) ***REMOVED***
  this.s = ***REMOVED***
    bytesRead: 0,
    chunks: chunks,
    cursor: null,
    expected: 0,
    files: files,
    filter: filter,
    init: false,
    expectedEnd: 0,
    file: null,
    options: options,
    readPreference: readPreference
  ***REMOVED***;

  stream.Readable.call(this);
***REMOVED***

util.inherits(GridFSBucketReadStream, stream.Readable);

/**
 * An error occurred
 *
 * @event GridFSBucketReadStream#error
 * @type ***REMOVED***Error***REMOVED***
 */

/**
 * Fires when the stream loaded the file document corresponding to the
 * provided id.
 *
 * @event GridFSBucketReadStream#file
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * Emitted when a chunk of data is available to be consumed.
 *
 * @event GridFSBucketReadStream#data
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * Fired when the stream is exhausted (no more data events).
 *
 * @event GridFSBucketReadStream#end
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * Fired when the stream is exhausted and the underlying cursor is killed
 *
 * @event GridFSBucketReadStream#close
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * Reads from the cursor and pushes to the stream.
 * @method
 */

GridFSBucketReadStream.prototype._read = function() ***REMOVED***
  var _this = this;
  if (this.destroyed) ***REMOVED***
    return;
  ***REMOVED***

  waitForFile(_this, function() ***REMOVED***
    doRead(_this);
  ***REMOVED***);
***REMOVED***;

/**
 * Sets the 0-based offset in bytes to start streaming from. Throws
 * an error if this stream has entered flowing mode
 * (e.g. if you've already called `on('data')`)
 * @method
 * @param ***REMOVED***Number***REMOVED*** start Offset in bytes to start reading at
 * @return ***REMOVED***GridFSBucketReadStream***REMOVED***
 */

GridFSBucketReadStream.prototype.start = function(start) ***REMOVED***
  throwIfInitialized(this);
  this.s.options.start = start;
  return this;
***REMOVED***;

/**
 * Sets the 0-based offset in bytes to start streaming from. Throws
 * an error if this stream has entered flowing mode
 * (e.g. if you've already called `on('data')`)
 * @method
 * @param ***REMOVED***Number***REMOVED*** end Offset in bytes to stop reading at
 * @return ***REMOVED***GridFSBucketReadStream***REMOVED***
 */

GridFSBucketReadStream.prototype.end = function(end) ***REMOVED***
  throwIfInitialized(this);
  this.s.options.end = end;
  return this;
***REMOVED***;

/**
 * Marks this stream as aborted (will never push another `data` event)
 * and kills the underlying cursor. Will emit the 'end' event, and then
 * the 'close' event once the cursor is successfully killed.
 *
 * @method
 * @param ***REMOVED***GridFSBucket~errorCallback***REMOVED*** [callback] called when the cursor is successfully closed or an error occurred.
 * @fires GridFSBucketWriteStream#close
 * @fires GridFSBucketWriteStream#end
 */

GridFSBucketReadStream.prototype.abort = function(callback) ***REMOVED***
  var _this = this;
  this.push(null);
  this.destroyed = true;
  if (this.s.cursor) ***REMOVED***
    this.s.cursor.close(function(error) ***REMOVED***
      _this.emit('close');
      callback && callback(error);
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    if (!this.s.init) ***REMOVED***
      // If not initialized, fire close event because we will never
      // get a cursor
      _this.emit('close');
    ***REMOVED***
    callback && callback();
  ***REMOVED***
***REMOVED***;

/**
 * @ignore
 */

function throwIfInitialized(self) ***REMOVED***
  if (self.s.init) ***REMOVED***
    throw new Error('You cannot change options after the stream has entered' + 'flowing mode!');
  ***REMOVED***
***REMOVED***

/**
 * @ignore
 */

function doRead(_this) ***REMOVED***
  if (_this.destroyed) ***REMOVED***
    return;
  ***REMOVED***

  _this.s.cursor.next(function(error, doc) ***REMOVED***
    if (_this.destroyed) ***REMOVED***
      return;
    ***REMOVED***
    if (error) ***REMOVED***
      return __handleError(_this, error);
    ***REMOVED***
    if (!doc) ***REMOVED***
      _this.push(null);
      return _this.s.cursor.close(function(error) ***REMOVED***
        if (error) ***REMOVED***
          return __handleError(_this, error);
        ***REMOVED***
        _this.emit('close');
      ***REMOVED***);
    ***REMOVED***

    var bytesRemaining = _this.s.file.length - _this.s.bytesRead;
    var expectedN = _this.s.expected++;
    var expectedLength = Math.min(_this.s.file.chunkSize, bytesRemaining);

    if (doc.n > expectedN) ***REMOVED***
      var errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;
      return __handleError(_this, new Error(errmsg));
    ***REMOVED***

    if (doc.n < expectedN) ***REMOVED***
      errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;
      return __handleError(_this, new Error(errmsg));
    ***REMOVED***

    var buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;

    if (buf.length !== expectedLength) ***REMOVED***
      if (bytesRemaining <= 0) ***REMOVED***
        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;
        return __handleError(_this, new Error(errmsg));
      ***REMOVED***

      errmsg =
        'ChunkIsWrongSize: Got unexpected length: ' + buf.length + ', expected: ' + expectedLength;
      return __handleError(_this, new Error(errmsg));
    ***REMOVED***

    _this.s.bytesRead += buf.length;

    if (buf.length === 0) ***REMOVED***
      return _this.push(null);
    ***REMOVED***

    var sliceStart = null;
    var sliceEnd = null;

    if (_this.s.bytesToSkip != null) ***REMOVED***
      sliceStart = _this.s.bytesToSkip;
      _this.s.bytesToSkip = 0;
    ***REMOVED***

    if (expectedN === _this.s.expectedEnd && _this.s.bytesToTrim != null) ***REMOVED***
      sliceEnd = _this.s.bytesToTrim;
    ***REMOVED***

    // If the remaining amount of data left is < chunkSize read the right amount of data
    if (_this.s.options.end && _this.s.options.end - _this.s.bytesToSkip < buf.length) ***REMOVED***
      sliceEnd = _this.s.options.end - _this.s.bytesToSkip;
    ***REMOVED***

    if (sliceStart != null || sliceEnd != null) ***REMOVED***
      buf = buf.slice(sliceStart || 0, sliceEnd || buf.length);
    ***REMOVED***

    _this.push(buf);
  ***REMOVED***);
***REMOVED***

/**
 * @ignore
 */

function init(self) ***REMOVED***
  var findOneOptions = ***REMOVED******REMOVED***;
  if (self.s.readPreference) ***REMOVED***
    findOneOptions.readPreference = self.s.readPreference;
  ***REMOVED***
  if (self.s.options && self.s.options.sort) ***REMOVED***
    findOneOptions.sort = self.s.options.sort;
  ***REMOVED***
  if (self.s.options && self.s.options.skip) ***REMOVED***
    findOneOptions.skip = self.s.options.skip;
  ***REMOVED***

  self.s.files.findOne(self.s.filter, findOneOptions, function(error, doc) ***REMOVED***
    if (error) ***REMOVED***
      return __handleError(self, error);
    ***REMOVED***
    if (!doc) ***REMOVED***
      var identifier = self.s.filter._id ? self.s.filter._id.toString() : self.s.filter.filename;
      var errmsg = 'FileNotFound: file ' + identifier + ' was not found';
      var err = new Error(errmsg);
      err.code = 'ENOENT';
      return __handleError(self, err);
    ***REMOVED***

    // If document is empty, kill the stream immediately and don't
    // execute any reads
    if (doc.length <= 0) ***REMOVED***
      self.push(null);
      return;
    ***REMOVED***

    if (self.destroyed) ***REMOVED***
      // If user destroys the stream before we have a cursor, wait
      // until the query is done to say we're 'closed' because we can't
      // cancel a query.
      self.emit('close');
      return;
    ***REMOVED***

    self.s.bytesToSkip = handleStartOption(self, doc, self.s.options);

    var filter = ***REMOVED*** files_id: doc._id ***REMOVED***;

    // Currently (MongoDB 3.4.4) skip function does not support the index,
    // it needs to retrieve all the documents first and then skip them. (CS-25811)
    // As work around we use $gte on the "n" field.
    if (self.s.options && self.s.options.start != null) ***REMOVED***
      var skip = Math.floor(self.s.options.start / doc.chunkSize);
      if (skip > 0) ***REMOVED***
        filter['n'] = ***REMOVED*** $gte: skip ***REMOVED***;
      ***REMOVED***
    ***REMOVED***
    self.s.cursor = self.s.chunks.find(filter).sort(***REMOVED*** n: 1 ***REMOVED***);

    if (self.s.readPreference) ***REMOVED***
      self.s.cursor.setReadPreference(self.s.readPreference);
    ***REMOVED***

    self.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);
    self.s.file = doc;
    self.s.bytesToTrim = handleEndOption(self, doc, self.s.cursor, self.s.options);
    self.emit('file', doc);
  ***REMOVED***);
***REMOVED***

/**
 * @ignore
 */

function waitForFile(_this, callback) ***REMOVED***
  if (_this.s.file) ***REMOVED***
    return callback();
  ***REMOVED***

  if (!_this.s.init) ***REMOVED***
    init(_this);
    _this.s.init = true;
  ***REMOVED***

  _this.once('file', function() ***REMOVED***
    callback();
  ***REMOVED***);
***REMOVED***

/**
 * @ignore
 */

function handleStartOption(stream, doc, options) ***REMOVED***
  if (options && options.start != null) ***REMOVED***
    if (options.start > doc.length) ***REMOVED***
      throw new Error(
        'Stream start (' +
          options.start +
          ') must not be ' +
          'more than the length of the file (' +
          doc.length +
          ')'
      );
    ***REMOVED***
    if (options.start < 0) ***REMOVED***
      throw new Error('Stream start (' + options.start + ') must not be ' + 'negative');
    ***REMOVED***
    if (options.end != null && options.end < options.start) ***REMOVED***
      throw new Error(
        'Stream start (' +
          options.start +
          ') must not be ' +
          'greater than stream end (' +
          options.end +
          ')'
      );
    ***REMOVED***

    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;
    stream.s.expected = Math.floor(options.start / doc.chunkSize);

    return options.start - stream.s.bytesRead;
  ***REMOVED***
***REMOVED***

/**
 * @ignore
 */

function handleEndOption(stream, doc, cursor, options) ***REMOVED***
  if (options && options.end != null) ***REMOVED***
    if (options.end > doc.length) ***REMOVED***
      throw new Error(
        'Stream end (' +
          options.end +
          ') must not be ' +
          'more than the length of the file (' +
          doc.length +
          ')'
      );
    ***REMOVED***
    if (options.start < 0) ***REMOVED***
      throw new Error('Stream end (' + options.end + ') must not be ' + 'negative');
    ***REMOVED***

    var start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;

    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);

    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);

    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;
  ***REMOVED***
***REMOVED***

/**
 * @ignore
 */

function __handleError(_this, error) ***REMOVED***
  _this.emit('error', error);
***REMOVED***
