/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) ***REMOVED***
	if (val === null || val === undefined) ***REMOVED***
		throw new TypeError('Object.assign cannot be called with null or undefined');
	***REMOVED***

	return Object(val);
***REMOVED***

function shouldUseNative() ***REMOVED***
	try ***REMOVED***
		if (!Object.assign) ***REMOVED***
			return false;
		***REMOVED***

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') ***REMOVED***
			return false;
		***REMOVED***

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = ***REMOVED******REMOVED***;
		for (var i = 0; i < 10; i++) ***REMOVED***
			test2['_' + String.fromCharCode(i)] = i;
		***REMOVED***
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) ***REMOVED***
			return test2[n];
		***REMOVED***);
		if (order2.join('') !== '0123456789') ***REMOVED***
			return false;
		***REMOVED***

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = ***REMOVED******REMOVED***;
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) ***REMOVED***
			test3[letter] = letter;
		***REMOVED***);
		if (Object.keys(Object.assign(***REMOVED******REMOVED***, test3)).join('') !==
				'abcdefghijklmnopqrst') ***REMOVED***
			return false;
		***REMOVED***

		return true;
	***REMOVED*** catch (err) ***REMOVED***
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	***REMOVED***
***REMOVED***

module.exports = shouldUseNative() ? Object.assign : function (target, source) ***REMOVED***
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) ***REMOVED***
		from = Object(arguments[s]);

		for (var key in from) ***REMOVED***
			if (hasOwnProperty.call(from, key)) ***REMOVED***
				to[key] = from[key];
			***REMOVED***
		***REMOVED***

		if (getOwnPropertySymbols) ***REMOVED***
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) ***REMOVED***
				if (propIsEnumerable.call(from, symbols[i])) ***REMOVED***
					to[symbols[i]] = from[symbols[i]];
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***

	return to;
***REMOVED***;
