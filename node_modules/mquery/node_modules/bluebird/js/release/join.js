"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
         getDomain) ***REMOVED***
var util = require("./util");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!false) ***REMOVED***
if (canEvaluate) ***REMOVED***
    var thenCallback = function(i) ***REMOVED***
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    ***REMOVED***;

    var promiseSetter = function(i) ***REMOVED***
        return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
    ***REMOVED***;

    var generateHolderClass = function(total) ***REMOVED***
        var props = new Array(total);
        for (var i = 0; i < props.length; ++i) ***REMOVED***
            props[i] = "this.p" + (i+1);
        ***REMOVED***
        var assignment = props.join(" = ") + " = null;";
        var cancellationCode= "var promise;\n" + props.map(function(prop) ***REMOVED***
            return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) ***REMOVED***                            \n\
                    promise.cancel();                                        \n\
                ***REMOVED***                                                            \n\
            ";
        ***REMOVED***).join("\n");
        var passedArguments = props.join(", ");
        var name = "Holder$" + total;


        var code = "return function(tryCatch, errorObj, Promise, async) ***REMOVED***    \n\
            'use strict';                                                    \n\
            function [TheName](fn) ***REMOVED***                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            ***REMOVED***                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) ***REMOVED***          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) ***REMOVED***                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                ***REMOVED*** else ***REMOVED***                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                ***REMOVED***                                                            \n\
            ***REMOVED***;                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) ***REMOVED***       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) ***REMOVED***                                    \n\
                    if (this.asyncNeeded) ***REMOVED***                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    ***REMOVED*** else ***REMOVED***                                                 \n\
                        this._callFunction(promise);                         \n\
                    ***REMOVED***                                                        \n\
                                                                             \n\
                ***REMOVED***                                                            \n\
            ***REMOVED***;                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() ***REMOVED***              \n\
                [CancellationCode]                                           \n\
            ***REMOVED***;                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        ***REMOVED***(tryCatch, errorObj, Promise, async);                               \n\
        ";

        code = code.replace(/\[TheName\]/g, name)
            .replace(/\[TheTotal\]/g, total)
            .replace(/\[ThePassedArguments\]/g, passedArguments)
            .replace(/\[TheProperties\]/g, assignment)
            .replace(/\[CancellationCode\]/g, cancellationCode);

        return new Function("tryCatch", "errorObj", "Promise", "async", code)
                           (tryCatch, errorObj, Promise, async);
    ***REMOVED***;

    var holderClasses = [];
    var thenCallbacks = [];
    var promiseSetters = [];

    for (var i = 0; i < 8; ++i) ***REMOVED***
        holderClasses.push(generateHolderClass(i + 1));
        thenCallbacks.push(thenCallback(i + 1));
        promiseSetters.push(promiseSetter(i + 1));
    ***REMOVED***

    reject = function (reason) ***REMOVED***
        this._reject(reason);
    ***REMOVED***;
***REMOVED******REMOVED***

Promise.join = function () ***REMOVED***
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") ***REMOVED***
        fn = arguments[last];
        if (!false) ***REMOVED***
            if (last <= 8 && canEvaluate) ***REMOVED***
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var HolderClass = holderClasses[last - 1];
                var holder = new HolderClass(fn);
                var callbacks = thenCallbacks;

                for (var i = 0; i < last; ++i) ***REMOVED***
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) ***REMOVED***
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if (((bitField & 50397184) === 0)) ***REMOVED***
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                            promiseSetters[i](maybePromise, holder);
                            holder.asyncNeeded = false;
                        ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
                            ret._reject(maybePromise._reason());
                        ***REMOVED*** else ***REMOVED***
                            ret._cancel();
                        ***REMOVED***
                    ***REMOVED*** else ***REMOVED***
                        callbacks[i].call(ret, maybePromise, holder);
                    ***REMOVED***
                ***REMOVED***

                if (!ret._isFateSealed()) ***REMOVED***
                    if (holder.asyncNeeded) ***REMOVED***
                        var domain = getDomain();
                        if (domain !== null) ***REMOVED***
                            holder.fn = util.domainBind(domain, holder.fn);
                        ***REMOVED***
                    ***REMOVED***
                    ret._setAsyncGuaranteed();
                    ret._setOnCancel(holder);
                ***REMOVED***
                return ret;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) ***REMOVED***args[$_i] = arguments[$_i];***REMOVED***;
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
***REMOVED***;

***REMOVED***;
