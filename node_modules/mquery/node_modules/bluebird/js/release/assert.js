"use strict";
module.exports = (function()***REMOVED***
var AssertionError = (function() ***REMOVED***
    function AssertionError(a) ***REMOVED***
        this.constructor$(a);
        this.message = a;
        this.name = "AssertionError";
    ***REMOVED***
    AssertionError.prototype = new Error();
    AssertionError.prototype.constructor = AssertionError;
    AssertionError.prototype.constructor$ = Error;
    return AssertionError;
***REMOVED***)();

function getParams(args) ***REMOVED***
    var params = [];
    for (var i = 0; i < args.length; ++i) params.push("arg" + i);
    return params;
***REMOVED***

function nativeAssert(callName, args, expect) ***REMOVED***
    try ***REMOVED***
        var params = getParams(args);
        var constructorArgs = params;
        constructorArgs.push("return " +
                callName + "("+ params.join(",") + ");");
        var fn = Function.apply(null, constructorArgs);
        return fn.apply(null, args);
    ***REMOVED*** catch (e) ***REMOVED***
        if (!(e instanceof SyntaxError)) ***REMOVED***
            throw e;
        ***REMOVED*** else ***REMOVED***
            return expect;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

return function assert(boolExpr, message) ***REMOVED***
    if (boolExpr === true) return;

    if (typeof boolExpr === "string" &&
        boolExpr.charAt(0) === "%") ***REMOVED***
        var nativeCallName = boolExpr;
        var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0)); for(var $_i = 2; $_i < $_len; ++$_i) ***REMOVED***args[$_i - 2] = arguments[$_i];***REMOVED***;
        if (nativeAssert(nativeCallName, args, message) === message) return;
        message = (nativeCallName + " !== " + message);
    ***REMOVED***

    var ret = new AssertionError(message);
    if (Error.captureStackTrace) ***REMOVED***
        Error.captureStackTrace(ret, assert);
    ***REMOVED***
    throw ret;
***REMOVED***;
***REMOVED***)();
