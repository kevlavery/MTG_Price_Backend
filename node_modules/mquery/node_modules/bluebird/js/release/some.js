"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) ***REMOVED***
var util = require("./util");
var RangeError = require("./errors").RangeError;
var AggregateError = require("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = ***REMOVED******REMOVED***;


function SomePromiseArray(values) ***REMOVED***
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
***REMOVED***
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () ***REMOVED***
    if (!this._initialized) ***REMOVED***
        return;
    ***REMOVED***
    if (this._howMany === 0) ***REMOVED***
        this._resolve([]);
        return;
    ***REMOVED***
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) ***REMOVED***
        this._reject(this._getRangeError(this.length()));
    ***REMOVED***
***REMOVED***;

SomePromiseArray.prototype.init = function () ***REMOVED***
    this._initialized = true;
    this._init();
***REMOVED***;

SomePromiseArray.prototype.setUnwrap = function () ***REMOVED***
    this._unwrap = true;
***REMOVED***;

SomePromiseArray.prototype.howMany = function () ***REMOVED***
    return this._howMany;
***REMOVED***;

SomePromiseArray.prototype.setHowMany = function (count) ***REMOVED***
    this._howMany = count;
***REMOVED***;

SomePromiseArray.prototype._promiseFulfilled = function (value) ***REMOVED***
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) ***REMOVED***
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) ***REMOVED***
            this._resolve(this._values[0]);
        ***REMOVED*** else ***REMOVED***
            this._resolve(this._values);
        ***REMOVED***
        return true;
    ***REMOVED***
    return false;

***REMOVED***;
SomePromiseArray.prototype._promiseRejected = function (reason) ***REMOVED***
    this._addRejected(reason);
    return this._checkOutcome();
***REMOVED***;

SomePromiseArray.prototype._promiseCancelled = function () ***REMOVED***
    if (this._values instanceof Promise || this._values == null) ***REMOVED***
        return this._cancel();
    ***REMOVED***
    this._addRejected(CANCELLATION);
    return this._checkOutcome();
***REMOVED***;

SomePromiseArray.prototype._checkOutcome = function() ***REMOVED***
    if (this.howMany() > this._canPossiblyFulfill()) ***REMOVED***
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) ***REMOVED***
            if (this._values[i] !== CANCELLATION) ***REMOVED***
                e.push(this._values[i]);
            ***REMOVED***
        ***REMOVED***
        if (e.length > 0) ***REMOVED***
            this._reject(e);
        ***REMOVED*** else ***REMOVED***
            this._cancel();
        ***REMOVED***
        return true;
    ***REMOVED***
    return false;
***REMOVED***;

SomePromiseArray.prototype._fulfilled = function () ***REMOVED***
    return this._totalResolved;
***REMOVED***;

SomePromiseArray.prototype._rejected = function () ***REMOVED***
    return this._values.length - this.length();
***REMOVED***;

SomePromiseArray.prototype._addRejected = function (reason) ***REMOVED***
    this._values.push(reason);
***REMOVED***;

SomePromiseArray.prototype._addFulfilled = function (value) ***REMOVED***
    this._values[this._totalResolved++] = value;
***REMOVED***;

SomePromiseArray.prototype._canPossiblyFulfill = function () ***REMOVED***
    return this.length() - this._rejected();
***REMOVED***;

SomePromiseArray.prototype._getRangeError = function (count) ***REMOVED***
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
***REMOVED***;

SomePromiseArray.prototype._resolveEmptyArray = function () ***REMOVED***
    this._reject(this._getRangeError(0));
***REMOVED***;

function some(promises, howMany) ***REMOVED***
    if ((howMany | 0) !== howMany || howMany < 0) ***REMOVED***
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    ***REMOVED***
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
***REMOVED***

Promise.some = function (promises, howMany) ***REMOVED***
    return some(promises, howMany);
***REMOVED***;

Promise.prototype.some = function (howMany) ***REMOVED***
    return some(this, howMany);
***REMOVED***;

Promise._SomePromiseArray = SomePromiseArray;
***REMOVED***;
