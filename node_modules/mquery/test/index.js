var mquery = require('../');
var assert = require('assert');

describe('mquery', function()***REMOVED***
  var col;

  before(function(done)***REMOVED***
    // get the env specific collection interface
    require('./env').getCollection(function (err, collection) ***REMOVED***
      assert.ifError(err);
      col = collection;
      done();
    ***REMOVED***);
  ***REMOVED***)

  after(function(done)***REMOVED***
    require('./env').dropCollection(done);
  ***REMOVED***)

  describe('mquery', function()***REMOVED***
    it('is a function', function()***REMOVED***
      assert.equal('function', typeof mquery);
    ***REMOVED***)
    it('creates instances with the `new` keyword', function()***REMOVED***
      assert.ok(mquery() instanceof mquery);
    ***REMOVED***)
    describe('defaults', function()***REMOVED***
      it('are set', function()***REMOVED***
        var m = mquery();
        assert.strictEqual(undefined, m.op);
        assert.deepEqual(***REMOVED******REMOVED***, m.options);
      ***REMOVED***)
    ***REMOVED***)
    describe('criteria', function()***REMOVED***
      it('if collection-like is used as collection', function()***REMOVED***
        var m = mquery(col);
        assert.equal(col, m._collection.collection);
      ***REMOVED***)
      it('non-collection-like is used as criteria', function()***REMOVED***
        var m = mquery(***REMOVED*** works: true ***REMOVED***);
        assert.ok(!m._collection);
        assert.deepEqual(***REMOVED*** works: true ***REMOVED***, m._conditions);
      ***REMOVED***)
    ***REMOVED***)
    describe('options', function()***REMOVED***
      it('are merged when passed', function()***REMOVED***
        var m = mquery(col, ***REMOVED*** safe: true ***REMOVED***);
        assert.deepEqual(***REMOVED*** safe: true ***REMOVED***, m.options);
        var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***);
        assert.deepEqual(***REMOVED*** safe: true ***REMOVED***, m.options);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('toConstructor', function()***REMOVED***
    it('creates subclasses of mquery', function()***REMOVED***
      var opts = ***REMOVED*** safe: ***REMOVED*** w: 'majority' ***REMOVED***, readPreference: 'p' ***REMOVED***;
      var match = ***REMOVED*** name: 'test', count: ***REMOVED*** $gt: 101 ***REMOVED******REMOVED***;
      var select = ***REMOVED*** name: 1, count: 0 ***REMOVED***
      var update = ***REMOVED*** $set: ***REMOVED*** x: true ***REMOVED******REMOVED***;
      var path = 'street';

      var q = mquery().setOptions(opts);
      q.where(match);
      q.select(select);
      q.update(update);
      q.where(path);
      q.find();

      var M = q.toConstructor();
      var m = M();

      assert.ok(m instanceof mquery);
      assert.deepEqual(opts, m.options);
      assert.deepEqual(match, m._conditions);
      assert.deepEqual(select, m._fields);
      assert.deepEqual(update, m._update);
      assert.equal(path, m._path);
      assert.equal('find', m.op);
    ***REMOVED***)
  ***REMOVED***)

  describe('setOptions', function()***REMOVED***
    it('calls associated methods', function()***REMOVED***
      var m = mquery();
      assert.equal(m._collection, null);
      m.setOptions(***REMOVED*** collection: col ***REMOVED***);
      assert.equal(m._collection.collection, col);
    ***REMOVED***)
    it('directly sets option when no method exists', function()***REMOVED***
      var m = mquery();
      assert.equal(m.options.woot, null);
      m.setOptions(***REMOVED*** woot: 'yay' ***REMOVED***);
      assert.equal(m.options.woot, 'yay');
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.setOptions();
      assert.equal(m, n);
      var n = m.setOptions(***REMOVED*** x: 1 ***REMOVED***);
      assert.equal(m, n);
    ***REMOVED***)
  ***REMOVED***)

  describe('collection', function()***REMOVED***
    it('sets the _collection', function()***REMOVED***
      var m = mquery();
      m.collection(col);
      assert.equal(m._collection.collection, col);
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.collection(col);
      assert.equal(m, n);
    ***REMOVED***)
  ***REMOVED***)

  describe('$where', function()***REMOVED***
    it('sets the $where condition', function()***REMOVED***
      var m = mquery();
      function go () ***REMOVED******REMOVED***
      m.$where(go);
      assert.ok(go === m._conditions.$where);
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.$where('x');
      assert.equal(m, n);
    ***REMOVED***)
  ***REMOVED***)

  describe('where', function()***REMOVED***
    it('without arguments', function()***REMOVED***
      var m = mquery();
      m.where();
      assert.deepEqual(***REMOVED******REMOVED***, m._conditions);
    ***REMOVED***)
    it('with non-string/object argument', function()***REMOVED***
      var m = mquery();

      assert.throws(function()***REMOVED***
        m.where([]);
      ***REMOVED***, /path must be a string or object/);
    ***REMOVED***)
    describe('with one argument', function()***REMOVED***
      it('that is an object', function()***REMOVED***
        var m = mquery();
        m.where(***REMOVED*** name: 'flawed' ***REMOVED***);
        assert.strictEqual(m._conditions.name, 'flawed');
      ***REMOVED***)
      it('that is a query', function()***REMOVED***
        var m = mquery(***REMOVED*** name: 'first' ***REMOVED***);
        var n = mquery(***REMOVED*** name: 'changed' ***REMOVED***);
        m.where(n);
        assert.strictEqual(m._conditions.name, 'changed');
      ***REMOVED***)
      it('that is a string', function()***REMOVED***
        var m = mquery();
        m.where('name');
        assert.equal('name', m._path);
        assert.strictEqual(m._conditions.name, undefined);
      ***REMOVED***)
    ***REMOVED***)
    it('with two arguments', function()***REMOVED***
      var m = mquery();
      m.where('name', 'The Great Pumpkin');
      assert.equal('name', m._path);
      assert.strictEqual(m._conditions.name, 'The Great Pumpkin');
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.where('x', 'y');
      assert.equal(m, n);
      var n = m.where()
      assert.equal(m, n);
    ***REMOVED***)
  ***REMOVED***)
  describe('equals', function()***REMOVED***
    it('must be called after where()', function()***REMOVED***
      var m = mquery();
      assert.throws(function () ***REMOVED***
        m.equals();
      ***REMOVED***, /must be used after where/)
    ***REMOVED***)
    it('sets value of path set with where()', function()***REMOVED***
      var m = mquery();
      m.where('age').equals(1000);
      assert.deepEqual(***REMOVED*** age: 1000 ***REMOVED***, m._conditions);
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.where('x').equals(3);
      assert.equal(m, n);
    ***REMOVED***)
  ***REMOVED***)
  describe('eq', function()***REMOVED***
    it('is alias of equals', function()***REMOVED***
      var m = mquery();
      m.where('age').eq(1000);
      assert.deepEqual(***REMOVED*** age: 1000 ***REMOVED***, m._conditions);
    ***REMOVED***)
  ***REMOVED***)
  describe('or', function()***REMOVED***
    it('pushes onto the internal $or condition', function()***REMOVED***
      var m = mquery();
      m.or(***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***);
      assert.deepEqual([***REMOVED***'Nightmare Before Christmas': true ***REMOVED***], m._conditions.$or)
    ***REMOVED***)
    it('allows passing arrays', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.or(arg);
      assert.deepEqual(arg, m._conditions.$or)
    ***REMOVED***)
    it('allows calling multiple times', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** looper: true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.or(arg);
      m.or(***REMOVED*** y: 1 ***REMOVED***)
      m.or([***REMOVED*** w: 'oo' ***REMOVED***, ***REMOVED*** z: 'oo'***REMOVED*** ])
      assert.deepEqual([***REMOVED***looper:true***REMOVED***,***REMOVED***x:1***REMOVED***,***REMOVED***y:1***REMOVED***,***REMOVED***w:'oo'***REMOVED***,***REMOVED***z:'oo'***REMOVED***], m._conditions.$or)
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      m.or(***REMOVED*** o: "k"***REMOVED***).where('name', 'table');
      assert.deepEqual(***REMOVED*** name: 'table', $or: [***REMOVED*** o: 'k' ***REMOVED***] ***REMOVED***, m._conditions)
    ***REMOVED***)
  ***REMOVED***)

  describe('nor', function()***REMOVED***
    it('pushes onto the internal $nor condition', function()***REMOVED***
      var m = mquery();
      m.nor(***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***);
      assert.deepEqual([***REMOVED***'Nightmare Before Christmas': true ***REMOVED***], m._conditions.$nor)
    ***REMOVED***)
    it('allows passing arrays', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.nor(arg);
      assert.deepEqual(arg, m._conditions.$nor)
    ***REMOVED***)
    it('allows calling multiple times', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** looper: true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.nor(arg);
      m.nor(***REMOVED*** y: 1 ***REMOVED***)
      m.nor([***REMOVED*** w: 'oo' ***REMOVED***, ***REMOVED*** z: 'oo'***REMOVED*** ])
      assert.deepEqual([***REMOVED***looper:true***REMOVED***,***REMOVED***x:1***REMOVED***,***REMOVED***y:1***REMOVED***,***REMOVED***w:'oo'***REMOVED***,***REMOVED***z:'oo'***REMOVED***], m._conditions.$nor)
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      m.nor(***REMOVED*** o: "k"***REMOVED***).where('name', 'table');
      assert.deepEqual(***REMOVED*** name: 'table', $nor: [***REMOVED*** o: 'k' ***REMOVED***] ***REMOVED***, m._conditions)
    ***REMOVED***)
  ***REMOVED***)

  describe('and', function()***REMOVED***
    it('pushes onto the internal $and condition', function()***REMOVED***
      var m = mquery();
      m.and(***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***);
      assert.deepEqual([***REMOVED***'Nightmare Before Christmas': true ***REMOVED***], m._conditions.$and)
    ***REMOVED***)
    it('allows passing arrays', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** 'Nightmare Before Christmas': true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.and(arg);
      assert.deepEqual(arg, m._conditions.$and)
    ***REMOVED***)
    it('allows calling multiple times', function()***REMOVED***
      var m = mquery();
      var arg = [***REMOVED*** looper: true ***REMOVED***, ***REMOVED*** x: 1 ***REMOVED***];
      m.and(arg);
      m.and(***REMOVED*** y: 1 ***REMOVED***)
      m.and([***REMOVED*** w: 'oo' ***REMOVED***, ***REMOVED*** z: 'oo'***REMOVED*** ])
      assert.deepEqual([***REMOVED***looper:true***REMOVED***,***REMOVED***x:1***REMOVED***,***REMOVED***y:1***REMOVED***,***REMOVED***w:'oo'***REMOVED***,***REMOVED***z:'oo'***REMOVED***], m._conditions.$and)
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      m.and(***REMOVED*** o: "k"***REMOVED***).where('name', 'table');
      assert.deepEqual(***REMOVED*** name: 'table', $and: [***REMOVED*** o: 'k' ***REMOVED***] ***REMOVED***, m._conditions)
    ***REMOVED***)
  ***REMOVED***)

  function generalCondition (type) ***REMOVED***
    return function () ***REMOVED***
      it('accepts 2 args', function()***REMOVED***
        var m = mquery()[type]('count', 3);
        var check = ***REMOVED******REMOVED***;
        check['$' + type] = 3;
        assert.deepEqual(m._conditions.count, check);
      ***REMOVED***)
      it('uses previously set `where` path if 1 arg passed', function()***REMOVED***
        var m = mquery().where('count')[type](3);
        var check = ***REMOVED******REMOVED***;
        check['$' + type] = 3;
        assert.deepEqual(m._conditions.count, check);
      ***REMOVED***)
      it('throws if 1 arg was passed but no previous `where` was used', function()***REMOVED***
        assert.throws(function()***REMOVED***
          mquery()[type](3);
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)
      it('is chainable', function()***REMOVED***
        var m = mquery().where('count')[type](3).where('x', 8);
        var check = ***REMOVED***x: 8, count: ***REMOVED******REMOVED******REMOVED***;
        check.count['$' + type] = 3;
        assert.deepEqual(m._conditions, check);
      ***REMOVED***)
      it('overwrites previous value', function()***REMOVED***
        var m = mquery().where('count')[type](3)[type](8);
        var check = ***REMOVED******REMOVED***;
        check['$' + type] = 8;
        assert.deepEqual(m._conditions.count, check);
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***

  'gt gte lt lte ne in nin regex size maxDistance minDistance'.split(' ').forEach(function (type) ***REMOVED***
    describe(type, generalCondition(type))
  ***REMOVED***)

  describe('mod', function () ***REMOVED***
    describe('with 1 argument', function()***REMOVED***
      it('requires a previous where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().mod([30, 10])
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)
      it('works', function()***REMOVED***
        var m = mquery().where('madmen').mod([10,20]);
        assert.deepEqual(m._conditions, ***REMOVED*** madmen: ***REMOVED*** $mod: [10,20] ***REMOVED******REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 arguments and second is non-Array', function()***REMOVED***
      it('requires a previous where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().mod('x', 10)
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)
      it('works', function()***REMOVED***
        var m = mquery().where('madmen').mod(10, 20);
        assert.deepEqual(m._conditions, ***REMOVED*** madmen: ***REMOVED*** $mod: [10,20] ***REMOVED******REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('with 2 arguments and second is an array', function()***REMOVED***
      var m = mquery().mod('madmen', [10,20]);
      assert.deepEqual(m._conditions, ***REMOVED*** madmen: ***REMOVED*** $mod: [10,20] ***REMOVED******REMOVED***)
    ***REMOVED***)

    it('with 3 arguments', function()***REMOVED***
      var m = mquery().mod('madmen', 10, 20);
      assert.deepEqual(m._conditions, ***REMOVED*** madmen: ***REMOVED*** $mod: [10,20] ***REMOVED******REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery().mod('madmen', 10, 20).where('x', 8);
      var check = ***REMOVED*** madmen: ***REMOVED*** $mod: [10,20] ***REMOVED***, x: 8***REMOVED***;
      assert.deepEqual(m._conditions, check);
    ***REMOVED***)
  ***REMOVED***)

  describe('exists', function()***REMOVED***
    it('with 0 args', function()***REMOVED***
      it('throws if not used after where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().exists()
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)
      it('works', function()***REMOVED***
        var m = mquery().where('name').exists();
        var check = ***REMOVED*** name: ***REMOVED*** $exists: true ***REMOVED******REMOVED***;
        assert.deepEqual(m._conditions, check);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 1 arg', function()***REMOVED***
      describe('that is boolean', function()***REMOVED***
        it('throws if not used after where()', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().exists()
          ***REMOVED***, /must be used after where/);
        ***REMOVED***)
        it('works', function()***REMOVED***
          var m = mquery().exists('name', false);
          var check = ***REMOVED*** name: ***REMOVED*** $exists: false ***REMOVED******REMOVED***;
          assert.deepEqual(m._conditions, check);
        ***REMOVED***)
      ***REMOVED***)
      describe('that is not boolean', function()***REMOVED***
        it('sets the value to `true`', function()***REMOVED***
          var m = mquery().where('name').exists('yummy');
          var check = ***REMOVED*** yummy: ***REMOVED*** $exists: true ***REMOVED******REMOVED***;
          assert.deepEqual(m._conditions, check);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 args', function()***REMOVED***
      it('works', function()***REMOVED***
        var m = mquery().exists('yummy', false);
        var check = ***REMOVED*** yummy: ***REMOVED*** $exists: false ***REMOVED******REMOVED***;
        assert.deepEqual(m._conditions, check);
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery().where('name').exists().find(***REMOVED*** x: 1 ***REMOVED***);
      var check = ***REMOVED*** name: ***REMOVED*** $exists: true ***REMOVED***, x: 1***REMOVED***;
      assert.deepEqual(m._conditions, check);
    ***REMOVED***)
  ***REMOVED***)

  describe('elemMatch', function()***REMOVED***
    describe('with null/undefined first argument', function()***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().elemMatch();
      ***REMOVED***, /Invalid argument/);
      assert.throws(function () ***REMOVED***
        mquery().elemMatch(null);
      ***REMOVED***, /Invalid argument/);
      assert.doesNotThrow(function () ***REMOVED***
        mquery().elemMatch('', ***REMOVED******REMOVED***);
      ***REMOVED***);
    ***REMOVED***)

    describe('with 1 argument', function()***REMOVED***
      it('throws if not a function or object', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().elemMatch([]);
        ***REMOVED***, /Invalid argument/);
      ***REMOVED***)

      describe('that is an object', function()***REMOVED***
        it('throws if no previous `where` was used', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().elemMatch(***REMOVED******REMOVED***);
          ***REMOVED***, /must be used after where/);
        ***REMOVED***)
        it('works', function()***REMOVED***
          var m = mquery().where('comment').elemMatch(***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3 ***REMOVED******REMOVED***);
          assert.deepEqual(***REMOVED*** comment: ***REMOVED*** $elemMatch: ***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3***REMOVED******REMOVED******REMOVED******REMOVED***, m._conditions);
        ***REMOVED***)
      ***REMOVED***)
      describe('that is a function', function()***REMOVED***
        it('throws if no previous `where` was used', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().elemMatch(function()***REMOVED******REMOVED***);
          ***REMOVED***, /must be used after where/);
        ***REMOVED***)
        it('works', function()***REMOVED***
          var m = mquery().where('comment').elemMatch(function (query) ***REMOVED***
            query.where(***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3 ***REMOVED******REMOVED***)
          ***REMOVED***);
          assert.deepEqual(***REMOVED*** comment: ***REMOVED*** $elemMatch: ***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3***REMOVED******REMOVED******REMOVED******REMOVED***, m._conditions);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 arguments', function()***REMOVED***
      describe('and the 2nd is an object', function()***REMOVED***
        it('works', function()***REMOVED***
          var m = mquery().elemMatch('comment', ***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3 ***REMOVED******REMOVED***);
          assert.deepEqual(***REMOVED*** comment: ***REMOVED*** $elemMatch: ***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3***REMOVED******REMOVED******REMOVED******REMOVED***, m._conditions);
        ***REMOVED***)
      ***REMOVED***)
      describe('and the 2nd is a function', function()***REMOVED***
        it('works', function()***REMOVED***
          var m = mquery().elemMatch('comment', function (query) ***REMOVED***
            query.where(***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3 ***REMOVED******REMOVED***)
          ***REMOVED***);
          assert.deepEqual(***REMOVED*** comment: ***REMOVED*** $elemMatch: ***REMOVED*** author: 'joe', votes: ***REMOVED***$gte: 3***REMOVED******REMOVED******REMOVED******REMOVED***, m._conditions);
        ***REMOVED***)
      ***REMOVED***)
      it('and the 2nd is not a function or object', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().elemMatch('comment', []);
        ***REMOVED***, /Invalid argument/);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('within', function()***REMOVED***
    it('is chainable', function()***REMOVED***
      var m = mquery();
      assert.equal(m.where('a').within(), m);
    ***REMOVED***)
    describe('when called with arguments', function()***REMOVED***
      it('must follow where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().within([]);
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)

      describe('of length 1', function()***REMOVED***
        it('throws if not a recognized shape', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().where('loc').within(***REMOVED******REMOVED***);
          ***REMOVED***, /Invalid argument/)
          assert.throws(function () ***REMOVED***
            mquery().where('loc').within(null);
          ***REMOVED***, /Invalid argument/)
        ***REMOVED***)
        it('delegates to circle when center exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** center: [10,10], radius: 3 ***REMOVED***);
          assert.deepEqual(***REMOVED*** $geoWithin: ***REMOVED***$center:[[10,10], 3]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to box when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** box: [[10,10], [11,14]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $geoWithin: ***REMOVED***$box:[[10,10], [11,14]]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to polygon when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** polygon: [[10,10], [11,14],[10,9]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $geoWithin: ***REMOVED***$polygon:[[10,10], [11,14],[10,9]]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to geometry when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** type: 'Polygon', coordinates: [[10,10], [11,14],[10,9]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $geoWithin: ***REMOVED***$geometry: ***REMOVED***type:'Polygon', coordinates: [[10,10], [11,14],[10,9]]***REMOVED******REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
      ***REMOVED***)

      describe('of length 2', function()***REMOVED***
        it('delegates to box()', function()***REMOVED***
          var m = mquery().where('loc').within([1,2],[2,5]);
          assert.deepEqual(m._conditions.loc, ***REMOVED*** $geoWithin: ***REMOVED*** $box: [[1,2],[2,5]]***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)

      describe('of length > 2', function()***REMOVED***
        it('delegates to polygon()', function()***REMOVED***
          var m = mquery().where('loc').within([1,2],[2,5],[2,4],[1,3]);
          assert.deepEqual(m._conditions.loc, ***REMOVED*** $geoWithin: ***REMOVED*** $polygon: [[1,2],[2,5],[2,4],[1,3]]***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('geoWithin', function()***REMOVED***
    before(function()***REMOVED***
      mquery.use$geoWithin = false;
    ***REMOVED***)
    after(function()***REMOVED***
      mquery.use$geoWithin = true;
    ***REMOVED***)
    describe('when called with arguments', function()***REMOVED***
      describe('of length 1', function()***REMOVED***
        it('delegates to circle when center exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** center: [10,10], radius: 3 ***REMOVED***);
          assert.deepEqual(***REMOVED*** $within: ***REMOVED***$center:[[10,10], 3]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to box when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** box: [[10,10], [11,14]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $within: ***REMOVED***$box:[[10,10], [11,14]]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to polygon when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** polygon: [[10,10], [11,14],[10,9]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $within: ***REMOVED***$polygon:[[10,10], [11,14],[10,9]]***REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
        it('delegates to geometry when exists', function()***REMOVED***
          var m = mquery().where('loc').within(***REMOVED*** type: 'Polygon', coordinates: [[10,10], [11,14],[10,9]] ***REMOVED***);
          assert.deepEqual(***REMOVED*** $within: ***REMOVED***$geometry: ***REMOVED***type:'Polygon', coordinates: [[10,10], [11,14],[10,9]]***REMOVED******REMOVED******REMOVED***, m._conditions.loc);
        ***REMOVED***)
      ***REMOVED***)

      describe('of length 2', function()***REMOVED***
        it('delegates to box()', function()***REMOVED***
          var m = mquery().where('loc').within([1,2],[2,5]);
          assert.deepEqual(m._conditions.loc, ***REMOVED*** $within: ***REMOVED*** $box: [[1,2],[2,5]]***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)

      describe('of length > 2', function()***REMOVED***
        it('delegates to polygon()', function()***REMOVED***
          var m = mquery().where('loc').within([1,2],[2,5],[2,4],[1,3]);
          assert.deepEqual(m._conditions.loc, ***REMOVED*** $within: ***REMOVED*** $polygon: [[1,2],[2,5],[2,4],[1,3]]***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('box', function()***REMOVED***
    describe('with 1 argument', function()***REMOVED***
      it('throws', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().box('sometihng');
        ***REMOVED***, /Invalid argument/);
      ***REMOVED***)
    ***REMOVED***)
    describe('with > 3 arguments', function()***REMOVED***
      it('throws', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().box(1,2,3,4);
        ***REMOVED***, /Invalid argument/);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 arguments', function()***REMOVED***
      it('throws if not used after where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().box([],[]);
        ***REMOVED***, /must be used after where/);
      ***REMOVED***)
      it('works', function()***REMOVED***
        var m = mquery().where('loc').box([1,2],[3,4]);
        assert.deepEqual(m._conditions.loc, ***REMOVED*** $geoWithin: ***REMOVED*** $box: [[1,2],[3,4]] ***REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 3 arguments', function()***REMOVED***
      it('works', function()***REMOVED***
        var m = mquery().box('loc', [1,2],[3,4]);
        assert.deepEqual(m._conditions.loc, ***REMOVED*** $geoWithin: ***REMOVED*** $box: [[1,2],[3,4]] ***REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('polygon', function()***REMOVED***
    describe('when first argument is not a string', function()***REMOVED***
      it('throws if not used after where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().polygon(***REMOVED******REMOVED***);
        ***REMOVED***, /must be used after where/);

        assert.doesNotThrow(function () ***REMOVED***
          mquery().where('loc').polygon([1,2], [2,3], [3,6]);
        ***REMOVED***);
      ***REMOVED***)

      it('assigns arguments to within polygon condition', function()***REMOVED***
        var m = mquery().where('loc').polygon([1,2], [2,3], [3,6]);
        assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED***$geoWithin: ***REMOVED***$polygon: [[1,2],[2,3],[3,6]]***REMOVED******REMOVED*** ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('when first arg is a string', function()***REMOVED***
      it('assigns remaining arguments to within polygon condition', function()***REMOVED***
        var m = mquery().polygon('loc', [1,2], [2,3], [3,6]);
        assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED***$geoWithin: ***REMOVED***$polygon: [[1,2],[2,3],[3,6]]***REMOVED******REMOVED*** ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('circle', function()***REMOVED***
    describe('with one arg', function()***REMOVED***
      it('must follow where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().circle('x');
        ***REMOVED***, /must be used after where/);
        assert.doesNotThrow(function () ***REMOVED***
          mquery().where('loc').circle(***REMOVED***center:[0,0], radius: 3 ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***)
      it('works', function()***REMOVED***
        var m = mquery().where('loc').circle(***REMOVED***center:[0,0], radius: 3 ***REMOVED***);
        assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $geoWithin: ***REMOVED***$center: [[0,0],3] ***REMOVED******REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 3 args', function()***REMOVED***
      it('throws', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().where('loc').circle(1,2,3);
        ***REMOVED***, /Invalid argument/);
      ***REMOVED***)
    ***REMOVED***)
    describe('requires radius and center', function()***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().circle('loc', ***REMOVED*** center: 1 ***REMOVED***);
      ***REMOVED***, /center and radius are required/);
      assert.throws(function () ***REMOVED***
        mquery().circle('loc', ***REMOVED*** radius: 1 ***REMOVED***);
      ***REMOVED***, /center and radius are required/);
      assert.doesNotThrow(function () ***REMOVED***
        mquery().circle('loc', ***REMOVED*** center: [1,2], radius: 1 ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***)
  ***REMOVED***)

  describe('geometry', function()***REMOVED***
    // within + intersects
    var point = ***REMOVED*** type: 'Point', coordinates: [[0,0],[1,1]] ***REMOVED***;

    it('must be called after within or intersects', function(done)***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().where('a').geometry(point);
      ***REMOVED***, /must come after/);

      assert.doesNotThrow(function () ***REMOVED***
        mquery().where('a').within().geometry(point);
      ***REMOVED***);

      assert.doesNotThrow(function () ***REMOVED***
        mquery().where('a').intersects().geometry(point);
      ***REMOVED***);

      done();
    ***REMOVED***)

    describe('when called with one argument', function()***REMOVED***
      describe('after within()', function()***REMOVED***
        it('and arg quacks like geoJSON', function(done)***REMOVED***
          var m = mquery().where('a').within().geometry(point);
          assert.deepEqual(***REMOVED*** a: ***REMOVED*** $geoWithin: ***REMOVED*** $geometry: point ***REMOVED******REMOVED******REMOVED***, m._conditions);
          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('after intersects()', function()***REMOVED***
        it('and arg quacks like geoJSON', function(done)***REMOVED***
          var m = mquery().where('a').intersects().geometry(point);
          assert.deepEqual(***REMOVED*** a: ***REMOVED*** $geoIntersects: ***REMOVED*** $geometry: point ***REMOVED******REMOVED******REMOVED***, m._conditions);
          done();
        ***REMOVED***)
      ***REMOVED***)

      it('and arg does not quack like geoJSON', function(done)***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().where('b').within().geometry(***REMOVED***type:1, coordinates:2***REMOVED***);
        ***REMOVED***, /Invalid argument/);
        done();
      ***REMOVED***)
    ***REMOVED***)

    describe('when called with zero arguments', function()***REMOVED***
      it('throws', function(done)***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().where('a').within().geometry();
        ***REMOVED***, /Invalid argument/);

        done();
      ***REMOVED***)
    ***REMOVED***)

    describe('when called with more than one arguments', function()***REMOVED***
      it('throws', function(done)***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().where('a').within().geometry(***REMOVED***type:'a',coordinates:[]***REMOVED***, 2);
        ***REMOVED***, /Invalid argument/);
        done();
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('intersects', function()***REMOVED***
    it('must be used after where()', function(done)***REMOVED***
      var m = mquery();
      assert.throws(function () ***REMOVED***
        m.intersects();
      ***REMOVED***, /must be used after where/)
      done();
    ***REMOVED***)

    it('sets geo comparison to "$intersects"', function(done)***REMOVED***
      var n = mquery().where('a').intersects();
      assert.equal('$geoIntersects', n._geoComparison);
      done();
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery();
      assert.equal(m.where('a').intersects(), m);
    ***REMOVED***)

    it('calls geometry if argument quacks like geojson', function(done)***REMOVED***
      var m = mquery();
      var o = ***REMOVED*** type: 'LineString', coordinates: [[0,1],[3,40]] ***REMOVED***;
      var ran = false;

      m.geometry = function (arg) ***REMOVED***
        ran = true;
        assert.deepEqual(o, arg);
      ***REMOVED***

      m.where('a').intersects(o);
      assert.ok(ran);

      done();
    ***REMOVED***)

    it('throws if argument is not geometry-like', function(done)***REMOVED***
      var m = mquery().where('a');

      assert.throws(function () ***REMOVED***
        m.intersects(null);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects(undefined);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects(false);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects(***REMOVED******REMOVED***);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects([]);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects(function()***REMOVED******REMOVED***);
      ***REMOVED***, /Invalid argument/);

      assert.throws(function () ***REMOVED***
        m.intersects(NaN);
      ***REMOVED***, /Invalid argument/);

      done();
    ***REMOVED***)
  ***REMOVED***)

  describe('near', function()***REMOVED***
    // near nearSphere
    describe('with 0 args', function()***REMOVED***
      it('is compatible with geometry()', function(done)***REMOVED***
        var q = mquery().where('x').near().geometry(***REMOVED*** type: 'Point', coordinates: [180, 11] ***REMOVED***);
        assert.deepEqual(***REMOVED*** $near: ***REMOVED***$geometry: ***REMOVED***type:'Point', coordinates: [180,11]***REMOVED******REMOVED******REMOVED***, q._conditions.x);
        done();
      ***REMOVED***)
    ***REMOVED***)

    describe('with 1 arg', function()***REMOVED***
      it('throws if not used after where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().near(1);
        ***REMOVED***, /must be used after where/)
      ***REMOVED***)
      it('does not throw if used after where()', function()***REMOVED***
        assert.doesNotThrow(function () ***REMOVED***
          mquery().where('loc').near(***REMOVED***center:[1,1]***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
    describe('with > 2 args', function()***REMOVED***
      it('throws', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().near(1,2,3);
        ***REMOVED***, /Invalid argument/)
      ***REMOVED***)
    ***REMOVED***)

    it('creates $geometry args for GeoJSON', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: ***REMOVED*** type: 'Point', coordinates: [10,10] ***REMOVED******REMOVED***);
      assert.deepEqual(***REMOVED*** $near: ***REMOVED***$geometry: ***REMOVED***type:'Point', coordinates: [10,10]***REMOVED******REMOVED******REMOVED***, m._conditions.loc);
    ***REMOVED***)

    it('expects `center`', function()***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().near('loc', ***REMOVED*** maxDistance: 3 ***REMOVED***);
      ***REMOVED***, /center is required/)
      assert.doesNotThrow(function () ***REMOVED***
        mquery().near('loc', ***REMOVED*** center: [3,4] ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    it('accepts spherical conditions', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: [1,2], spherical: true ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $nearSphere: [1,2]***REMOVED******REMOVED***);
    ***REMOVED***)

    it('is non-spherical by default', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: [1,2] ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $near: [1,2]***REMOVED******REMOVED***);
    ***REMOVED***)

    it('supports maxDistance', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: [1,2], maxDistance:4 ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $near: [1,2], $maxDistance: 4***REMOVED******REMOVED***);
    ***REMOVED***)

    it('supports minDistance', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: [1,2], minDistance:4 ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $near: [1,2], $minDistance: 4***REMOVED******REMOVED***);
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery().where('loc').near(***REMOVED*** center: [1,2], maxDistance:4 ***REMOVED***).find(***REMOVED*** x: 1 ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** loc: ***REMOVED*** $near: [1,2], $maxDistance: 4***REMOVED***, x: 1***REMOVED***);
    ***REMOVED***)

    describe('supports passing GeoJSON, gh-13', function()***REMOVED***
      it('with center', function()***REMOVED***
        var m = mquery().where('loc').near(***REMOVED***
            center: ***REMOVED*** type: 'Point', coordinates: [1,1] ***REMOVED***
          , maxDistance: 2
        ***REMOVED***);

        var expect = ***REMOVED***
            loc: ***REMOVED***
                $near: ***REMOVED***
                    $geometry: ***REMOVED***
                        type: 'Point'
                      , coordinates : [1,1]
                    ***REMOVED***
                  , $maxDistance : 2
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        assert.deepEqual(m._conditions, expect);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  // fields

  describe('select', function()***REMOVED***
    describe('with 0 args', function()***REMOVED***
      it('is chainable', function()***REMOVED***
        var m = mquery()
        assert.equal(m, m.select());
      ***REMOVED***)
    ***REMOVED***)

    it('accepts an object', function()***REMOVED***
      var o = ***REMOVED*** x: 1, y: 1 ***REMOVED***
      var m = mquery().select(o);
      assert.deepEqual(m._fields, o);
    ***REMOVED***)

    it('accepts a string', function()***REMOVED***
      var o = 'x -y';
      var m = mquery().select(o);
      assert.deepEqual(m._fields, ***REMOVED*** x: 1, y: 0 ***REMOVED***);
    ***REMOVED***)

    it('does accept an array', function()***REMOVED***
      var o = ['x', '-y'];
      var m = mquery().select(o);
      assert.deepEqual(m._fields, ***REMOVED*** x: 1, y: 0 ***REMOVED***);
    ***REMOVED***)

    it('merges previous arguments', function()***REMOVED***
      var o = ***REMOVED*** x: 1, y: 0, a: 1 ***REMOVED***
      var m = mquery().select(o);
      m.select('z -u w').select(***REMOVED*** x: 0 ***REMOVED***)
      assert.deepEqual(m._fields, ***REMOVED***
          x: 0
        , y: 0
        , z: 1
        , u: 0
        , w: 1
        , a: 1
      ***REMOVED***);
    ***REMOVED***)

    it('rejects non-string, object, arrays', function()***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().select(function()***REMOVED******REMOVED***);
      ***REMOVED***, /Invalid select\(\) argument/);
    ***REMOVED***)

    it('accepts arguments objects', function()***REMOVED***
      var m = mquery();
      function t () ***REMOVED***
        m.select(arguments);
        assert.deepEqual(m._fields, ***REMOVED*** x: 1, y: 0 ***REMOVED***);
      ***REMOVED***
      t('x', '-y');
    ***REMOVED***)

    noDistinct('select');
  ***REMOVED***)

  describe('selected', function() ***REMOVED***
    it('returns true when fields have been selected', function(done) ***REMOVED***
      var m = mquery().select(***REMOVED*** name: 1 ***REMOVED***);
      assert.ok(m.selected());

      var m = mquery().select('name');
      assert.ok(m.selected());

      done();
    ***REMOVED***);

    it('returns false when no fields have been selected', function(done) ***REMOVED***
      var m = mquery();
      assert.strictEqual(false, m.selected());
      done();
    ***REMOVED***);
  ***REMOVED***);

  describe('selectedInclusively', function() ***REMOVED***
    describe('returns false', function()***REMOVED***
      it('when no fields have been selected', function(done) ***REMOVED***
        assert.strictEqual(false, mquery().selectedInclusively());
        assert.equal(false, mquery().select(***REMOVED******REMOVED***).selectedInclusively());
        done();
      ***REMOVED***);
      it('when any fields have been excluded', function(done) ***REMOVED***
        assert.strictEqual(false, mquery().select('-name').selectedInclusively());
        assert.strictEqual(false, mquery().select(***REMOVED*** name: 0 ***REMOVED***).selectedInclusively());
        assert.strictEqual(false, mquery().select('name bio -_id').selectedInclusively());
        assert.strictEqual(false, mquery().select(***REMOVED*** name: 1, _id: 0 ***REMOVED***).selectedInclusively());
        done();
      ***REMOVED***);
      it('when using $meta', function(done) ***REMOVED***
        assert.strictEqual(false, mquery().select(***REMOVED*** name: ***REMOVED*** $meta: 'textScore' ***REMOVED*** ***REMOVED***).selectedInclusively());
        done();
      ***REMOVED***);
    ***REMOVED***);

    describe('returns true', function() ***REMOVED***
      it('when fields have been included', function(done) ***REMOVED***
        assert.equal(true, mquery().select('name').selectedInclusively());
        assert.equal(true, mquery().select(***REMOVED*** name:1 ***REMOVED***).selectedInclusively());
        done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);

  describe('selectedExclusively', function() ***REMOVED***
    describe('returns false', function()***REMOVED***
      it('when no fields have been selected', function(done) ***REMOVED***
        assert.equal(false, mquery().selectedExclusively());
        assert.equal(false, mquery().select(***REMOVED******REMOVED***).selectedExclusively());
        done();
      ***REMOVED***);
      it('when fields have only been included', function(done) ***REMOVED***
        assert.equal(false, mquery().select('name').selectedExclusively());
        assert.equal(false, mquery().select(***REMOVED*** name: 1 ***REMOVED***).selectedExclusively());
        done();
      ***REMOVED***);
    ***REMOVED***);

    describe('returns true', function() ***REMOVED***
      it('when any field has been excluded', function(done) ***REMOVED***
        assert.equal(true, mquery().select('-name').selectedExclusively());
        assert.equal(true, mquery().select(***REMOVED*** name:0 ***REMOVED***).selectedExclusively());
        assert.equal(true, mquery().select('-_id').selectedExclusively());
        assert.strictEqual(true, mquery().select('name bio -_id').selectedExclusively());
        assert.strictEqual(true, mquery().select(***REMOVED*** name: 1, _id: 0 ***REMOVED***).selectedExclusively());
        done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);

  describe('slice', function()***REMOVED***
    describe('with 0 args', function()***REMOVED***
      it('is chainable', function()***REMOVED***
        var m = mquery()
        assert.equal(m, m.slice());
      ***REMOVED***)
      it('is a noop', function()***REMOVED***
        var m = mquery().slice();
        assert.deepEqual(m._fields, undefined);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 1 arg', function()***REMOVED***
      it('throws if not called after where()', function()***REMOVED***
        assert.throws(function () ***REMOVED***
          mquery().slice(1);
        ***REMOVED***, /must be used after where/);
        assert.doesNotThrow(function () ***REMOVED***
          mquery().where('a').slice(1);
        ***REMOVED***);
      ***REMOVED***)
      it('that is a number', function()***REMOVED***
        var query = mquery();
        query.where('collection').slice(5);
        assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: 5***REMOVED******REMOVED***);
      ***REMOVED***)
      it('that is an array', function()***REMOVED***
        var query = mquery();
        query.where('collection').slice([5,10]);
        assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: [5,10]***REMOVED******REMOVED***);
      ***REMOVED***)
      it('that is an object', function() ***REMOVED***
        var query = mquery();
        query.slice(***REMOVED*** collection: [5, 10] ***REMOVED***);
        assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: [5,10]***REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 args', function()***REMOVED***
      describe('and first is a number', function()***REMOVED***
        it('throws if not called after where', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().slice(2,3);
          ***REMOVED***, /must be used after where/);
        ***REMOVED***)
        it('does not throw if used after where', function()***REMOVED***
          var query = mquery();
          query.where('collection').slice(2,3);
          assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: [2,3]***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
      it('and first is not a number', function()***REMOVED***
        var query = mquery().slice('collection', [-5, 2]);
        assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: [-5,2]***REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('with 3 args', function()***REMOVED***
      it('works', function()***REMOVED***
        var query = mquery();
        query.slice('collection', 14, 10);
        assert.deepEqual(query._fields, ***REMOVED***collection: ***REMOVED***$slice: [14, 10]***REMOVED******REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    noDistinct('slice');
    no('count', 'slice');
  ***REMOVED***)

  // options

  describe('sort', function()***REMOVED***
    describe('with 0 args', function()***REMOVED***
      it('chains', function()***REMOVED***
        var m = mquery();
        assert.equal(m, m.sort());
      ***REMOVED***)
      it('has no affect', function()***REMOVED***
        var m = mquery();
        assert.equal(m.options.sort, undefined);
      ***REMOVED***)
    ***REMOVED***);

    it('works', function()***REMOVED***
      var query = mquery();
      query.sort('a -c b');
      assert.deepEqual(query.options.sort, ***REMOVED*** a : 1, b: 1, c : -1***REMOVED***);

      query = mquery();
      query.sort(***REMOVED***'a': 1, 'c': -1, 'b': 'asc', e: 'descending', f: 'ascending'***REMOVED***);
      assert.deepEqual(query.options.sort, ***REMOVED***'a': 1, 'c': -1, 'b': 1, 'e': -1, 'f': 1***REMOVED***);

      query = mquery();
      var e= undefined;

      e= undefined;
      try ***REMOVED***
        query.sort('a', 1, 'c', -1, 'b', 1);
      ***REMOVED*** catch (err) ***REMOVED***
        e= err;
      ***REMOVED***
      assert.ok(e, 'uh oh. no error was thrown');
      assert.equal(e.message, 'Invalid sort() argument. Must be a string, object, or array.');
    ***REMOVED***);

    it('handles $meta sort options', function()***REMOVED***
      var query = mquery();
      query.sort(***REMOVED*** score: ***REMOVED*** $meta : "textScore" ***REMOVED*** ***REMOVED***);
      assert.deepEqual(query.options.sort, ***REMOVED*** score : ***REMOVED*** $meta : "textScore" ***REMOVED*** ***REMOVED***);
    ***REMOVED***);

    it('array syntax', function()***REMOVED***
      var query = mquery();
      query.sort([['field', 1], ['test', -1]]);
      assert.deepEqual(query.options.sort, [['field', 1], ['test', -1]]);
    ***REMOVED***);

    it('throws with mixed array/object syntax', function()***REMOVED***
      var query = mquery();
      assert.throws(function() ***REMOVED***
        query.sort(***REMOVED*** field: 1 ***REMOVED***).sort([['test', -1]]);
      ***REMOVED***, /Can't mix sort syntaxes/);
      assert.throws(function() ***REMOVED***
        query.sort([['field', 1]]).sort(***REMOVED*** test: 1 ***REMOVED***);
      ***REMOVED***, /Can't mix sort syntaxes/);
    ***REMOVED***);

    it('works with maps', function() ***REMOVED***
      if (typeof Map === 'undefined') ***REMOVED***
        return this.skip();
      ***REMOVED***
      var query = mquery();
      query.sort(new Map().set('field', 1).set('test', -1));
      assert.deepEqual(query.options.sort, new Map().set('field', 1).set('test', -1));
    ***REMOVED***);
  ***REMOVED***)

  function simpleOption (type, options) ***REMOVED***
    describe(type, function()***REMOVED***
      it('sets the ' + type + ' option', function()***REMOVED***
        var m = mquery()[type](2);
        var optionName = options.name || type;
        assert.equal(2, m.options[optionName]);
      ***REMOVED***)
      it('is chainable', function()***REMOVED***
        var m = mquery();
        assert.equal(m[type](3), m);
      ***REMOVED***)

      if (!options.distinct) noDistinct(type);
      if (!options.count) no('count', type);
    ***REMOVED***)
  ***REMOVED***

  var negated = ***REMOVED***
      limit: ***REMOVED***distinct: false, count: true***REMOVED***
    , skip: ***REMOVED***distinct: false, count: true***REMOVED***
    , maxScan: ***REMOVED***distinct: false, count: false***REMOVED***
    , batchSize: ***REMOVED***distinct: false, count: false***REMOVED***
    , maxTime: ***REMOVED***distinct: true, count: true, name: 'maxTimeMS' ***REMOVED***
    , comment: ***REMOVED***distinct: false, count: false***REMOVED***
  ***REMOVED***;
  Object.keys(negated).forEach(function (key) ***REMOVED***
    simpleOption(key, negated[key]);
  ***REMOVED***)

  describe('snapshot', function()***REMOVED***
    it('works', function()***REMOVED***
      var query = mquery();
      query.snapshot();
      assert.equal(true, query.options.snapshot);

      var query = mquery()
      query.snapshot(true);
      assert.equal(true, query.options.snapshot);

      var query = mquery()
      query.snapshot(false);
      assert.equal(false, query.options.snapshot);
    ***REMOVED***)
    noDistinct('snapshot');
    no('count', 'snapshot');
  ***REMOVED***)

  describe('hint', function()***REMOVED***
    it('accepts an object', function()***REMOVED***
      var query2 = mquery();
      query2.hint(***REMOVED***'a': 1, 'b': -1***REMOVED***);
      assert.deepEqual(query2.options.hint, ***REMOVED***'a': 1, 'b': -1***REMOVED***);
    ***REMOVED***)

    it('accepts a string', function()***REMOVED***
      var query2 = mquery();
      query2.hint('a');
      assert.deepEqual(query2.options.hint, 'a');
    ***REMOVED***)

    it('rejects everything else', function()***REMOVED***
      assert.throws(function()***REMOVED***
        mquery().hint(['c']);
      ***REMOVED***, /Invalid hint./);
      assert.throws(function()***REMOVED***
        mquery().hint(1);
      ***REMOVED***, /Invalid hint./);
    ***REMOVED***)

    describe('does not have side affects', function()***REMOVED***
      it('on invalid arg', function()***REMOVED***
        var m = mquery();
        try ***REMOVED***
          m.hint(1);
        ***REMOVED*** catch (err) ***REMOVED***
          // ignore
        ***REMOVED***
        assert.equal(undefined, m.options.hint);
      ***REMOVED***)
      it('on missing arg', function()***REMOVED***
        var m = mquery().hint();
        assert.equal(undefined, m.options.hint);
      ***REMOVED***)
    ***REMOVED***)

    noDistinct('hint');
  ***REMOVED***)

  describe('slaveOk', function()***REMOVED***
    it('works', function()***REMOVED***
      var query = mquery();
      query.slaveOk();
      assert.equal(true, query.options.slaveOk);

      var query = mquery()
      query.slaveOk(true);
      assert.equal(true, query.options.slaveOk);

      var query = mquery()
      query.slaveOk(false);
      assert.equal(false, query.options.slaveOk);
    ***REMOVED***)
  ***REMOVED***)

  describe('read', function()***REMOVED***
    it('sets associated readPreference option', function()***REMOVED***
      var m = mquery();
      m.read('p');
      assert.equal('primary', m.options.readPreference);
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      assert.equal(m, m.read('sp'));
    ***REMOVED***)
  ***REMOVED***)

  describe('tailable', function()***REMOVED***
    it('works', function()***REMOVED***
      var query = mquery();
      query.tailable();
      assert.equal(true, query.options.tailable);

      var query = mquery()
      query.tailable(true);
      assert.equal(true, query.options.tailable);

      var query = mquery()
      query.tailable(false);
      assert.equal(false, query.options.tailable);
    ***REMOVED***)
    it('is chainable', function()***REMOVED***
      var m = mquery();
      assert.equal(m, m.tailable());
    ***REMOVED***)
    noDistinct('tailable');
    no('count', 'tailable');
  ***REMOVED***)

  // query utilities

  describe('merge', function()***REMOVED***
    describe('with falsy arg', function()***REMOVED***
      it('returns itself', function()***REMOVED***
        var m = mquery();
        assert.equal(m, m.merge());
        assert.equal(m, m.merge(null));
        assert.equal(m, m.merge(0));
      ***REMOVED***)
    ***REMOVED***)
    describe('with an argument', function()***REMOVED***
      describe('that is not a query or plain object', function()***REMOVED***
        it('throws', function()***REMOVED***
          assert.throws(function () ***REMOVED***
            mquery().merge([]);
          ***REMOVED***, /Invalid argument/);
          assert.throws(function () ***REMOVED***
            mquery().merge('merge');
          ***REMOVED***, /Invalid argument/);
          assert.doesNotThrow(function () ***REMOVED***
            mquery().merge(***REMOVED******REMOVED***);
          ***REMOVED***, /Invalid argument/);
        ***REMOVED***)
      ***REMOVED***)

      describe('that is a query', function()***REMOVED***
        it('merges conditions, field selection, and options', function()***REMOVED***
          var m = mquery(***REMOVED*** x: 'hi' ***REMOVED***, ***REMOVED*** select: 'x y', another: true ***REMOVED***)
          var n = mquery().merge(m);
          assert.deepEqual(n._conditions, m._conditions);
          assert.deepEqual(n._fields, m._fields);
          assert.deepEqual(n.options, m.options);
        ***REMOVED***)
        it('clones update arguments', function(done)***REMOVED***
          var original = ***REMOVED*** $set: ***REMOVED*** iTerm: true ***REMOVED******REMOVED***
          var m = mquery().update(original);
          var n = mquery().merge(m);
          m.update(***REMOVED*** $set: ***REMOVED*** x: 2 ***REMOVED******REMOVED***)
          assert.notDeepEqual(m._update, n._update);
          done();
        ***REMOVED***)
        it('is chainable', function()***REMOVED***
          var m = mquery(***REMOVED*** x: 'hi' ***REMOVED***);
          var n = mquery();
          assert.equal(n, n.merge(m));
        ***REMOVED***)
      ***REMOVED***)

      describe('that is an object', function()***REMOVED***
        it('merges', function()***REMOVED***
          var m = ***REMOVED*** x: 'hi' ***REMOVED***;
          var n = mquery().merge(m);
          assert.deepEqual(n._conditions, ***REMOVED*** x: 'hi' ***REMOVED***);
        ***REMOVED***)
        it('clones update arguments', function(done)***REMOVED***
          var original = ***REMOVED*** $set: ***REMOVED*** iTerm: true ***REMOVED******REMOVED***
          var m = mquery().update(original);
          var n = mquery().merge(original);
          m.update(***REMOVED*** $set: ***REMOVED*** x: 2 ***REMOVED******REMOVED***)
          assert.notDeepEqual(m._update, n._update);
          done();
        ***REMOVED***)
        it('is chainable', function()***REMOVED***
          var m = ***REMOVED*** x: 'hi' ***REMOVED***;
          var n = mquery();
          assert.equal(n, n.merge(m));
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  // queries

  describe('find', function()***REMOVED***
    describe('with no callback', function()***REMOVED***
      it('does not execute', function()***REMOVED***
        var m = mquery();
        assert.doesNotThrow(function () ***REMOVED***
          m.find()
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.find(***REMOVED*** x: 1 ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery().find(***REMOVED*** x: 1 ***REMOVED***).find().find(***REMOVED*** y: 2 ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED***x:1,y:2***REMOVED***);
    ***REMOVED***)

    it('merges other queries', function()***REMOVED***
      var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***);
      m.tailable();
      m.select('_id');
      var a = mquery().find(m);
      assert.deepEqual(a._conditions, m._conditions);
      assert.deepEqual(a.options, m.options);
      assert.deepEqual(a._fields, m._fields);
    ***REMOVED***)

    describe('executes', function()***REMOVED***
      before(function (done) ***REMOVED***
        col.insert(***REMOVED*** name: 'mquery' ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done);
      ***REMOVED***);

      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: 'mquery' ***REMOVED***, done);
      ***REMOVED***)

      it('when criteria is passed with a callback', function(done)***REMOVED***
        mquery(col).find(***REMOVED*** name: 'mquery' ***REMOVED***, function (err, docs) ***REMOVED***
          assert.ifError(err);
          assert.equal(1, docs.length);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when Query is passed with a callback', function(done)***REMOVED***
        var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***);
        mquery(col).find(m, function (err, docs) ***REMOVED***
          assert.ifError(err);
          assert.equal(1, docs.length);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when just a callback is passed', function(done)***REMOVED***
        mquery(***REMOVED*** name: 'mquery' ***REMOVED***).collection(col).find(function (err, docs) ***REMOVED***
          assert.ifError(err);
          assert.equal(1, docs.length);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('findOne', function()***REMOVED***
    describe('with no callback', function()***REMOVED***
      it('does not execute', function()***REMOVED***
        var m = mquery();
        assert.doesNotThrow(function () ***REMOVED***
          m.findOne()
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.findOne(***REMOVED*** x: 1 ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.findOne(***REMOVED*** x: 1 ***REMOVED***).findOne().findOne(***REMOVED*** y: 2 ***REMOVED***);
      assert.equal(m, n);
      assert.deepEqual(m._conditions, ***REMOVED***x:1,y:2***REMOVED***);
      assert.equal('findOne', m.op);
    ***REMOVED***)

    it('merges other queries', function()***REMOVED***
      var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***);
      m.read('nearest');
      m.select('_id');
      var a = mquery().findOne(m);
      assert.deepEqual(a._conditions, m._conditions);
      assert.deepEqual(a.options, m.options);
      assert.deepEqual(a._fields, m._fields);
    ***REMOVED***)

    describe('executes', function()***REMOVED***
      before(function (done) ***REMOVED***
        col.insert(***REMOVED*** name: 'mquery findone' ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done);
      ***REMOVED***);

      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: 'mquery findone' ***REMOVED***, done);
      ***REMOVED***)

      it('when criteria is passed with a callback', function(done)***REMOVED***
        mquery(col).findOne(***REMOVED*** name: 'mquery findone' ***REMOVED***, function (err, doc) ***REMOVED***
          assert.ifError(err);
          assert.ok(doc);
          assert.equal('mquery findone', doc.name);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when Query is passed with a callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** name: 'mquery findone' ***REMOVED***);
        mquery(col).findOne(m, function (err, doc) ***REMOVED***
          assert.ifError(err);
          assert.ok(doc);
          assert.equal('mquery findone', doc.name);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when just a callback is passed', function(done)***REMOVED***
        mquery(***REMOVED*** name: 'mquery findone' ***REMOVED***).collection(col).findOne(function (err, doc) ***REMOVED***
          assert.ifError(err);
          assert.ok(doc);
          assert.equal('mquery findone', doc.name);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('count', function()***REMOVED***
    describe('with no callback', function()***REMOVED***
      it('does not execute', function()***REMOVED***
        var m = mquery();
        assert.doesNotThrow(function () ***REMOVED***
          m.count()
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.count(***REMOVED*** x: 1 ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery();
      var n = m.count(***REMOVED*** x: 1 ***REMOVED***).count().count(***REMOVED*** y: 2 ***REMOVED***);
      assert.equal(m, n);
      assert.deepEqual(m._conditions, ***REMOVED***x:1,y:2***REMOVED***);
      assert.equal('count', m.op);
    ***REMOVED***)

    it('merges other queries', function()***REMOVED***
      var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***);
      m.read('nearest');
      m.select('_id');
      var a = mquery().count(m);
      assert.deepEqual(a._conditions, m._conditions);
      assert.deepEqual(a.options, m.options);
      assert.deepEqual(a._fields, m._fields);
    ***REMOVED***)

    describe('executes', function()***REMOVED***
      before(function (done) ***REMOVED***
        col.insert(***REMOVED*** name: 'mquery count' ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done);
      ***REMOVED***);

      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: 'mquery count' ***REMOVED***, done);
      ***REMOVED***)

      it('when criteria is passed with a callback', function(done)***REMOVED***
        mquery(col).count(***REMOVED*** name: 'mquery count' ***REMOVED***, function (err, count) ***REMOVED***
          assert.ifError(err);
          assert.ok(count);
          assert.ok(1 === count);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when Query is passed with a callback', function(done)***REMOVED***
        var m = mquery(***REMOVED*** name: 'mquery count' ***REMOVED***);
        mquery(col).count(m, function (err, count) ***REMOVED***
          assert.ifError(err);
          assert.ok(count);
          assert.ok(1 === count);
          done();
        ***REMOVED***)
      ***REMOVED***)
      it('when just a callback is passed', function(done)***REMOVED***
        mquery(***REMOVED*** name: 'mquery count' ***REMOVED***).collection(col).count(function (err, count) ***REMOVED***
          assert.ifError(err);
          assert.ok(1 === count);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('validates its option', function()***REMOVED***
      it('sort', function(done)***REMOVED***
        assert.doesNotThrow(function()***REMOVED***
          var m = mquery().sort('x').count();
        ***REMOVED***);
        done();
      ***REMOVED***)

      it('select', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().select('x').count();
        ***REMOVED***, /field selection and slice cannot be used with count/);
        done();
      ***REMOVED***)

      it('slice', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().where('x').slice(-3).count();
        ***REMOVED***, /field selection and slice cannot be used with count/);
        done();
      ***REMOVED***)

      it('limit', function(done)***REMOVED***
        assert.doesNotThrow(function()***REMOVED***
          var m = mquery().limit(3).count();
        ***REMOVED***)
        done();
      ***REMOVED***)

      it('skip', function(done)***REMOVED***
        assert.doesNotThrow(function()***REMOVED***
          var m = mquery().skip(3).count();
        ***REMOVED***)
        done();
      ***REMOVED***)

      it('batchSize', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery(***REMOVED******REMOVED***, ***REMOVED*** batchSize: 3 ***REMOVED***).count();
        ***REMOVED***, /batchSize cannot be used with count/);
        done();
      ***REMOVED***)

      it('comment', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().comment('mquery').count();
        ***REMOVED***, /comment cannot be used with count/);
        done();
      ***REMOVED***)

      it('maxScan', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().maxScan(300).count();
        ***REMOVED***, /maxScan cannot be used with count/);
        done();
      ***REMOVED***)

      it('snapshot', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().snapshot().count();
        ***REMOVED***, /snapshot cannot be used with count/);
        done();
      ***REMOVED***)

      it('tailable', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().tailable().count();
        ***REMOVED***, /tailable cannot be used with count/);
        done();
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('distinct', function()***REMOVED***
    describe('with no callback', function()***REMOVED***
      it('does not execute', function()***REMOVED***
        var m = mquery();
        assert.doesNotThrow(function () ***REMOVED***
          m.distinct()
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.distinct('name')
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.distinct(***REMOVED*** name: 'mquery distinct' ***REMOVED***)
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.distinct(***REMOVED*** name: 'mquery distinct' ***REMOVED***, 'name')
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery(***REMOVED***x:1***REMOVED***).distinct('name');
      var n = m.distinct(***REMOVED***y:2***REMOVED***);
      assert.equal(m, n);
      assert.deepEqual(n._conditions, ***REMOVED***x:1, y:2***REMOVED***);
      assert.equal('name', n._distinct);
      assert.equal('distinct', n.op);
    ***REMOVED***);

    it('overwrites field', function()***REMOVED***
      var m = mquery(***REMOVED*** name: 'mquery' ***REMOVED***).distinct('name');
      m.distinct('rename');
      assert.equal(m._distinct, 'rename');
      m.distinct(***REMOVED***x:1***REMOVED***, 'renamed');
      assert.equal(m._distinct, 'renamed');
    ***REMOVED***)

    it('merges other queries', function()***REMOVED***
      var m = mquery().distinct(***REMOVED*** name: 'mquery' ***REMOVED***, 'age')
      m.read('nearest');
      var a = mquery().distinct(m);
      assert.deepEqual(a._conditions, m._conditions);
      assert.deepEqual(a.options, m.options);
      assert.deepEqual(a._fields, m._fields);
      assert.deepEqual(a._distinct, m._distinct);
    ***REMOVED***)

    describe('executes', function()***REMOVED***
      before(function (done) ***REMOVED***
        col.insert(***REMOVED*** name: 'mquery distinct', age: 1 ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done);
      ***REMOVED***);

      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: 'mquery distinct' ***REMOVED***, done);
      ***REMOVED***)

      it('when distinct arg is passed with a callback', function(done)***REMOVED***
        mquery(col).distinct('distinct', function (err, doc) ***REMOVED***
          assert.ifError(err);
          assert.ok(doc);
          done();
        ***REMOVED***)
      ***REMOVED***)
      describe('when criteria is passed with a callback', function()***REMOVED***
        it('if distinct arg was declared', function(done)***REMOVED***
          mquery(col).distinct('age').distinct(***REMOVED*** name: 'mquery distinct' ***REMOVED***, function (err, doc) ***REMOVED***
            assert.ifError(err);
            assert.ok(doc);
            done();
          ***REMOVED***)
        ***REMOVED***)
        it('but not if distinct arg was not declared', function()***REMOVED***
          assert.throws(function()***REMOVED***
            mquery(col).distinct(***REMOVED*** name: 'mquery distinct' ***REMOVED***, function()***REMOVED******REMOVED***)
          ***REMOVED***, /No value for `distinct`/)
        ***REMOVED***)
      ***REMOVED***)
      describe('when Query is passed with a callback', function()***REMOVED***
        var m = mquery(***REMOVED*** name: 'mquery distinct' ***REMOVED***);
        it('if distinct arg was declared', function(done)***REMOVED***
          mquery(col).distinct('age').distinct(m, function (err, doc) ***REMOVED***
            assert.ifError(err);
            assert.ok(doc);
            done();
          ***REMOVED***)
        ***REMOVED***)
        it('but not if distinct arg was not declared', function()***REMOVED***
          assert.throws(function()***REMOVED***
            mquery(col).distinct(m, function()***REMOVED******REMOVED***)
          ***REMOVED***, /No value for `distinct`/)
        ***REMOVED***)
      ***REMOVED***)
      describe('when just a callback is passed', function(done)***REMOVED***
        it('if distinct arg was declared', function(done)***REMOVED***
          var m = mquery(***REMOVED*** name: 'mquery distinct' ***REMOVED***);
          m.collection(col);
          m.distinct('age');
          m.distinct(function (err, doc) ***REMOVED***
            assert.ifError(err);
            assert.ok(doc);
            done();
          ***REMOVED***);
        ***REMOVED***)
        it('but not if no distinct arg was declared', function()***REMOVED***
          var m = mquery();
          m.collection(col);
          assert.throws(function () ***REMOVED***
            m.distinct(function()***REMOVED******REMOVED***);
          ***REMOVED***, /No value for `distinct`/);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('validates its option', function()***REMOVED***
      it('sort', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().sort('x').distinct();
        ***REMOVED***, /sort cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('select', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().select('x').distinct();
        ***REMOVED***, /field selection and slice cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('slice', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().where('x').slice(-3).distinct();
        ***REMOVED***, /field selection and slice cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('limit', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().limit(3).distinct();
        ***REMOVED***, /limit cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('skip', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().skip(3).distinct();
        ***REMOVED***, /skip cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('batchSize', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery(***REMOVED******REMOVED***, ***REMOVED*** batchSize: 3 ***REMOVED***).distinct();
        ***REMOVED***, /batchSize cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('comment', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().comment('mquery').distinct();
        ***REMOVED***, /comment cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('maxScan', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().maxScan(300).distinct();
        ***REMOVED***, /maxScan cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('snapshot', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().snapshot().distinct();
        ***REMOVED***, /snapshot cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('hint', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().hint(***REMOVED*** x: 1 ***REMOVED***).distinct();
        ***REMOVED***, /hint cannot be used with distinct/);
        done();
      ***REMOVED***)

      it('tailable', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().tailable().distinct();
        ***REMOVED***, /tailable cannot be used with distinct/);
        done();
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('update', function()***REMOVED***
    describe('with no callback', function()***REMOVED***
      it('does not execute', function()***REMOVED***
        var m = mquery();
        assert.doesNotThrow(function () ***REMOVED***
          m.update(***REMOVED*** name: 'old' ***REMOVED***, ***REMOVED*** name: 'updated' ***REMOVED***, ***REMOVED*** multi: true ***REMOVED***)
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.update(***REMOVED*** name: 'old' ***REMOVED***, ***REMOVED*** name: 'updated' ***REMOVED***)
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.update(***REMOVED*** name: 'updated' ***REMOVED***)
        ***REMOVED***)
        assert.doesNotThrow(function () ***REMOVED***
          m.update()
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    it('is chainable', function()***REMOVED***
      var m = mquery(***REMOVED***x:1***REMOVED***).update(***REMOVED*** y: 2 ***REMOVED***);
      var n = m.where(***REMOVED***y:2***REMOVED***);
      assert.equal(m, n);
      assert.deepEqual(n._conditions, ***REMOVED***x:1, y:2***REMOVED***);
      assert.deepEqual(***REMOVED*** y: 2 ***REMOVED***, n._update);
      assert.equal('update', n.op);
    ***REMOVED***);

    it('merges update doc arg', function()***REMOVED***
      var a = [1,2];
      var m = mquery().where(***REMOVED*** name: 'mquery' ***REMOVED***).update(***REMOVED*** x: 'stuff', a: a ***REMOVED***);
      m.update(***REMOVED*** z: 'stuff' ***REMOVED***);
      assert.deepEqual(m._update, ***REMOVED*** z: 'stuff', x: 'stuff', a: a ***REMOVED***);
      assert.deepEqual(m._conditions, ***REMOVED*** name: 'mquery' ***REMOVED***);
      assert.ok(!m.options.overwrite);
      m.update(***REMOVED******REMOVED***, ***REMOVED*** z: 'renamed' ***REMOVED***, ***REMOVED*** overwrite: true ***REMOVED***);
      assert.ok(m.options.overwrite === true);
      assert.deepEqual(m._conditions, ***REMOVED*** name: 'mquery' ***REMOVED***);
      assert.deepEqual(m._update, ***REMOVED*** z: 'renamed', x: 'stuff', a: a ***REMOVED***);
      a.push(3);
      assert.notDeepEqual(m._update, ***REMOVED*** z: 'renamed', x: 'stuff', a: a ***REMOVED***);
    ***REMOVED***)

    it('merges other options', function()***REMOVED***
      var m = mquery();
      m.setOptions(***REMOVED*** overwrite: true ***REMOVED***);
      m.update(***REMOVED*** age: 77 ***REMOVED***, ***REMOVED*** name: 'pagemill' ***REMOVED***, ***REMOVED*** multi: true ***REMOVED***)
      assert.deepEqual(***REMOVED*** age: 77 ***REMOVED***, m._conditions);
      assert.deepEqual(***REMOVED*** name: 'pagemill' ***REMOVED***, m._update);
      assert.deepEqual(***REMOVED*** overwrite: true, multi: true ***REMOVED***, m.options);
    ***REMOVED***)

    describe('executes', function()***REMOVED***
      var id;
      before(function (done) ***REMOVED***
        col.insert(***REMOVED*** name: 'mquery update', age: 1 ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err, res) ***REMOVED***
          id = res.insertedIds[0];
          done();
        ***REMOVED***);
      ***REMOVED***);

      after(function(done)***REMOVED***
        col.remove(***REMOVED*** _id: id ***REMOVED***, done);
      ***REMOVED***)

      describe('when conds + doc + opts + callback passed', function()***REMOVED***
        it('works', function(done)***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***)
          m.update(***REMOVED******REMOVED***, ***REMOVED*** name: 'Sparky' ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(res.result.n, 1);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(doc.name, 'Sparky');
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('when conds + doc + callback passed', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).update(***REMOVED*** _id: id ***REMOVED***, ***REMOVED*** name: 'fairgrounds' ***REMOVED***, function (err, num, doc) ***REMOVED***
            assert.ifError(err);
            assert.ok(1, num);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(doc.name, 'fairgrounds');
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('when doc + callback passed', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***).update(***REMOVED*** name: 'changed' ***REMOVED***, function (err, num, doc) ***REMOVED***
            assert.ifError(err);
            assert.ok(1, num);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(doc.name, 'changed');
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('when just callback passed', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.setOptions(***REMOVED*** safe: true ***REMOVED***);
          m.update(***REMOVED*** name: 'Frankenweenie' ***REMOVED***);
          m.update(function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(res.result.n, 1);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(doc.name, 'Frankenweenie');
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('without a callback', function()***REMOVED***
        it('when forced by exec()', function(done)***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.setOptions(***REMOVED*** safe: true, multi: true ***REMOVED***);
          m.update(***REMOVED*** name: 'forced' ***REMOVED***);

          var update = m._collection.update;
          m._collection.update = function (conds, doc, opts, cb) ***REMOVED***
            m._collection.update = update;

            assert.ok(opts.safe);
            assert.ok(true === opts.multi);
            assert.equal('forced', doc.$set.name);
            done();
          ***REMOVED***

          m.exec()
        ***REMOVED***)
      ***REMOVED***)

      describe('except when update doc is empty and missing overwrite flag', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.setOptions(***REMOVED*** safe: true ***REMOVED***);
          m.update(***REMOVED*** ***REMOVED***, function (err, num) ***REMOVED***
            assert.ifError(err);
            assert.ok(0 === num);
            setTimeout(function()***REMOVED***
              m.findOne(function (err, doc) ***REMOVED***
                assert.ifError(err);
                assert.equal(3, mquery.utils.keys(doc).length);
                assert.equal(id, doc._id.toString());
                assert.equal('Frankenweenie', doc.name);
                done();
              ***REMOVED***)
            ***REMOVED***, 300);
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***);

      describe('when update doc is set with overwrite flag', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.setOptions(***REMOVED*** safe: true, overwrite: true ***REMOVED***);
          m.update(***REMOVED*** all: 'yep', two: 2 ***REMOVED***, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(res.result.n, 1);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(3, mquery.utils.keys(doc).length);
              assert.equal('yep', doc.all);
              assert.equal(2, doc.two);
              assert.equal(id, doc._id.toString());
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('when update doc is empty with overwrite flag', function()***REMOVED***
        it('works', function (done) ***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.setOptions(***REMOVED*** safe: true, overwrite: true ***REMOVED***);
          m.update(***REMOVED*** ***REMOVED***, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(res.result.n, 1);
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(1, mquery.utils.keys(doc).length);
              assert.equal(id, doc._id.toString());
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('when boolean (true) - exec()', function()***REMOVED***
        it('works', function(done)***REMOVED***
          var m = mquery(col).where(***REMOVED*** _id: id ***REMOVED***);
          m.update(***REMOVED*** name: 'bool' ***REMOVED***).update(true);
          setTimeout(function () ***REMOVED***
            m.findOne(function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.ok(doc);
              assert.equal('bool', doc.name);
              done();
            ***REMOVED***)
          ***REMOVED***, 300)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('remove', function()***REMOVED***
    describe('with 0 args', function()***REMOVED***
      var name = 'remove: no args test'
      before(function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done)
      ***REMOVED***)
      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done)
      ***REMOVED***)

      it('does not execute', function(done)***REMOVED***
        var remove = col.remove;
        col.remove = function () ***REMOVED***
          col.remove = remove;
          done(new Error('remove executed!'));
        ***REMOVED***

        var m = mquery(col).where(***REMOVED*** name: name ***REMOVED***).remove()
        setTimeout(function () ***REMOVED***
          col.remove = remove;
          done();
        ***REMOVED***, 10);
      ***REMOVED***)

      it('chains', function()***REMOVED***
        var m = mquery();
        assert.equal(m, m.remove());
      ***REMOVED***)
    ***REMOVED***)

    describe('with 1 argument', function()***REMOVED***
      var name = 'remove: 1 arg test'
      before(function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done)
      ***REMOVED***)
      after(function(done)***REMOVED***
        col.remove(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, done)
      ***REMOVED***)

      describe('that is a', function()***REMOVED***
        it('plain object', function()***REMOVED***
          var m = mquery(col).remove(***REMOVED*** name: 'Whiskers' ***REMOVED***);
          m.remove(***REMOVED*** color: '#fff' ***REMOVED***)
          assert.deepEqual(***REMOVED*** name: 'Whiskers', color: '#fff' ***REMOVED***, m._conditions);
        ***REMOVED***)

        it('query', function()***REMOVED***
          var q = mquery(***REMOVED*** color: '#fff' ***REMOVED***);
          var m = mquery(col).remove(***REMOVED*** name: 'Whiskers' ***REMOVED***);
          m.remove(q)
          assert.deepEqual(***REMOVED*** name: 'Whiskers', color: '#fff' ***REMOVED***, m._conditions);
        ***REMOVED***)

        it('function', function(done)***REMOVED***
          mquery(col, ***REMOVED*** safe: true ***REMOVED***).where(***REMOVED***name: name***REMOVED***).remove(function (err) ***REMOVED***
            assert.ifError(err);
            mquery(col).findOne(***REMOVED*** name: name ***REMOVED***, function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.equal(null, doc);
              done();
            ***REMOVED***)
          ***REMOVED***);
        ***REMOVED***)

        it('boolean (true) - execute', function(done)***REMOVED***
          col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
            assert.ifError(err);
            mquery(col).findOne(***REMOVED*** name: name ***REMOVED***, function (err, doc) ***REMOVED***
              assert.ifError(err);
              assert.ok(doc);
              mquery(col).remove(true);
              setTimeout(function () ***REMOVED***
                mquery(col).find(function (err, docs) ***REMOVED***
                  assert.ifError(err);
                  assert.ok(docs);
                  assert.equal(0, docs.length);
                  done();
                ***REMOVED***)
              ***REMOVED***, 300)
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('with 2 arguments', function()***REMOVED***
      var name = 'remove: 2 arg test'
      beforeEach(function(done)***REMOVED***
        col.remove(***REMOVED******REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          col.insert([***REMOVED*** name: 'shelly' ***REMOVED***, ***REMOVED*** name: name ***REMOVED***], ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
            assert.ifError(err);
            mquery(col).find(function (err, docs) ***REMOVED***
              assert.ifError(err);
              assert.equal(2, docs.length);
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('plain object + callback', function()***REMOVED***
        it('works', function(done)***REMOVED***
          mquery(col).remove(***REMOVED*** name: name ***REMOVED***, function (err) ***REMOVED***
            assert.ifError(err);
            mquery(col).find(function (err, docs) ***REMOVED***
              assert.ifError(err);
              assert.ok(docs);
              assert.equal(1, docs.length);
              assert.equal('shelly', docs[0].name);
              done();
            ***REMOVED***)
          ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)

      describe('mquery + callback', function()***REMOVED***
        it('works', function(done)***REMOVED***
          var m = mquery(***REMOVED*** name: name ***REMOVED***);
          mquery(col).remove(m, function (err) ***REMOVED***
            assert.ifError(err);
            mquery(col).find(function (err, docs) ***REMOVED***
              assert.ifError(err);
              assert.ok(docs);
              assert.equal(1, docs.length);
              assert.equal('shelly', docs[0].name);
              done();
            ***REMOVED***)
          ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  function validateFindAndModifyOptions (method) ***REMOVED***
    describe('validates its option', function()***REMOVED***
      it('sort', function(done)***REMOVED***
        assert.doesNotThrow(function()***REMOVED***
          var m = mquery().sort('x')[method]();
        ***REMOVED***)
        done();
      ***REMOVED***)

      it('select', function(done)***REMOVED***
        assert.doesNotThrow(function()***REMOVED***
          var m = mquery().select('x')[method]();
        ***REMOVED***)
        done();
      ***REMOVED***)

      it('limit', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().limit(3)[method]();
        ***REMOVED***, new RegExp('limit cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('skip', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().skip(3)[method]();
        ***REMOVED***, new RegExp('skip cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('batchSize', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery(***REMOVED******REMOVED***, ***REMOVED*** batchSize: 3 ***REMOVED***)[method]();
        ***REMOVED***, new RegExp('batchSize cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('maxScan', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().maxScan(300)[method]();
        ***REMOVED***, new RegExp('maxScan cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('snapshot', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().snapshot()[method]();
        ***REMOVED***, new RegExp('snapshot cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('hint', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().hint(***REMOVED*** x: 1 ***REMOVED***)[method]();
        ***REMOVED***, new RegExp('hint cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('tailable', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().tailable()[method]();
        ***REMOVED***, new RegExp('tailable cannot be used with ' + method));
        done();
      ***REMOVED***)

      it('comment', function(done)***REMOVED***
        assert.throws(function()***REMOVED***
          var m = mquery().comment('mquery')[method]();
        ***REMOVED***, new RegExp('comment cannot be used with ' + method));
        done();
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***

  describe('findOneAndUpdate', function()***REMOVED***
    var name = 'findOneAndUpdate + fn'

    validateFindAndModifyOptions('findOneAndUpdate');

    describe('with 0 args', function()***REMOVED***
      it('makes no changes', function()***REMOVED***
        var m = mquery();
        var n = m.findOneAndUpdate();
        assert.deepEqual(m, n);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 1 arg', function()***REMOVED***
      describe('that is an object', function()***REMOVED***
        it('updates the doc', function()***REMOVED***
          var m = mquery();
          var n = m.findOneAndUpdate(***REMOVED*** $set: ***REMOVED*** name: '1 arg' ***REMOVED******REMOVED***);
          assert.deepEqual(n._update, ***REMOVED*** $set: ***REMOVED*** name: '1 arg' ***REMOVED******REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
      describe('that is a query', function()***REMOVED***
        it('updates the doc', function()***REMOVED***
          var m = mquery(***REMOVED*** name: name ***REMOVED***).update(***REMOVED*** x: 1 ***REMOVED***);
          var n = mquery().findOneAndUpdate(m);
          assert.deepEqual(n._update, ***REMOVED*** x: 1 ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
      it('that is a function', function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          var m = mquery(***REMOVED*** name: name ***REMOVED***).collection(col);
          name = '1 arg';
          var n = m.update(***REMOVED*** $set: ***REMOVED*** name: name ***REMOVED******REMOVED***);
          n.findOneAndUpdate(function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.ok(res.value);
            assert.equal(name, res.value.name);
            done();
          ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
    describe('with 2 args', function()***REMOVED***
      it('conditions + update', function()***REMOVED***
        var m = mquery(col);
        m.findOneAndUpdate(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** age: 100 ***REMOVED***);
        assert.deepEqual(***REMOVED*** name: name ***REMOVED***, m._conditions);
        assert.deepEqual(***REMOVED*** age: 100 ***REMOVED***, m._update);
      ***REMOVED***)
      it('query + update', function()***REMOVED***
        var n = mquery(***REMOVED*** name: name ***REMOVED***);
        var m = mquery(col);
        m.findOneAndUpdate(n, ***REMOVED*** age: 100 ***REMOVED***);
        assert.deepEqual(***REMOVED*** name: name ***REMOVED***, m._conditions);
        assert.deepEqual(***REMOVED*** age: 100 ***REMOVED***, m._update);
      ***REMOVED***)
      it('update + callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** name: name ***REMOVED***);
        m.findOneAndUpdate(***REMOVED******REMOVED***, ***REMOVED*** $inc: ***REMOVED*** age: 10 ***REMOVED******REMOVED***, ***REMOVED*** new: true ***REMOVED***, function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal(10, res.value.age);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 3 args', function()***REMOVED***
      it('conditions + update + options', function()***REMOVED***
        var m = mquery();
        var n = m.findOneAndUpdate(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** works: true ***REMOVED***, ***REMOVED*** new: false ***REMOVED***);
        assert.deepEqual(***REMOVED*** name: name***REMOVED***, n._conditions);
        assert.deepEqual(***REMOVED*** works: true ***REMOVED***, n._update);
        assert.deepEqual(***REMOVED*** new: false ***REMOVED***, n.options);
      ***REMOVED***)
      it('conditions + update + callback', function(done)***REMOVED***
        var m = mquery(col);
        m.findOneAndUpdate(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** works: true ***REMOVED***, ***REMOVED*** new: true ***REMOVED***, function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.ok(res.value);
          assert.equal(name, res.value.name);
          assert.ok(true === res.value.works);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 4 args', function()***REMOVED***
      it('conditions + update + options + callback', function(done)***REMOVED***
        var m = mquery(col);
        m.findOneAndUpdate(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** works: false ***REMOVED***, ***REMOVED*** new: false ***REMOVED***,  function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.ok(res.value);
          assert.equal(name, res.value.name);
          assert.ok(true === res.value.works);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('findOneAndRemove', function()***REMOVED***
    var name = 'findOneAndRemove'

    validateFindAndModifyOptions('findOneAndRemove');

    describe('with 0 args', function()***REMOVED***
      it('makes no changes', function()***REMOVED***
        var m = mquery();
        var n = m.findOneAndRemove();
        assert.deepEqual(m, n);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 1 arg', function()***REMOVED***
      describe('that is an object', function()***REMOVED***
        it('updates the doc', function()***REMOVED***
          var m = mquery();
          var n = m.findOneAndRemove(***REMOVED*** name: '1 arg' ***REMOVED***);
          assert.deepEqual(n._conditions, ***REMOVED*** name: '1 arg' ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
      describe('that is a query', function()***REMOVED***
        it('updates the doc', function()***REMOVED***
          var m = mquery(***REMOVED*** name: name ***REMOVED***);
          var n = m.findOneAndRemove(m);
          assert.deepEqual(n._conditions, ***REMOVED*** name: name ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
      it('that is a function', function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          var m = mquery(***REMOVED*** name: name ***REMOVED***).collection(col);
          m.findOneAndRemove(function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.ok(res.value);
            assert.equal(name, res.value.name);
            done();
          ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
    describe('with 2 args', function()***REMOVED***
      it('conditions + options', function()***REMOVED***
        var m = mquery(col);
        m.findOneAndRemove(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** new: false ***REMOVED***);
        assert.deepEqual(***REMOVED*** name: name ***REMOVED***, m._conditions);
        assert.deepEqual(***REMOVED*** new: false ***REMOVED***, m.options);
      ***REMOVED***)
      it('query + options', function()***REMOVED***
        var n = mquery(***REMOVED*** name: name ***REMOVED***);
        var m = mquery(col);
        m.findOneAndRemove(n, ***REMOVED*** sort: ***REMOVED*** x: 1 ***REMOVED******REMOVED***);
        assert.deepEqual(***REMOVED*** name: name ***REMOVED***, m._conditions);
        assert.deepEqual(***REMOVED*** sort: ***REMOVED*** 'x': 1 ***REMOVED******REMOVED***, m.options);
      ***REMOVED***)
      it('conditions + callback', function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          var m = mquery(col);
          m.findOneAndRemove(***REMOVED*** name: name ***REMOVED***, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(name, res.value.name);
            done();
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***)
      it('query + callback', function(done)***REMOVED***
        col.insert(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          var n = mquery(***REMOVED*** name: name ***REMOVED***)
          var m = mquery(col);
          m.findOneAndRemove(n, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(name, res.value.name);
            done();
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
    describe('with 3 args', function()***REMOVED***
      it('conditions + options + callback', function(done)***REMOVED***
        name = 'findOneAndRemove + conds + options + cb';
        col.insert([***REMOVED*** name: name ***REMOVED***, ***REMOVED*** name: 'a' ***REMOVED***], ***REMOVED*** safe: true ***REMOVED***, function (err) ***REMOVED***
          assert.ifError(err);
          var m = mquery(col);
          m.findOneAndRemove(***REMOVED*** name: name ***REMOVED***, ***REMOVED*** sort: ***REMOVED*** name: 1 ***REMOVED******REMOVED***, function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.ok(res.value);
            assert.equal(name, res.value.name);
            done();
          ***REMOVED***);
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('exec', function()***REMOVED***
    beforeEach(function(done)***REMOVED***
      col.insert([***REMOVED*** name: 'exec', age: 1 ***REMOVED***, ***REMOVED*** name: 'exec', age: 2 ***REMOVED***], done);
    ***REMOVED***)

    afterEach(function(done)***REMOVED***
      mquery(col).remove(done);
    ***REMOVED***)

    it('requires an op', function()***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().exec()
      ***REMOVED***, /Missing query type/);
    ***REMOVED***)

    describe('find', function() ***REMOVED***
      it('works', function(done)***REMOVED***
        var m = mquery(col).find(***REMOVED*** name: 'exec' ***REMOVED***);
        m.exec(function (err, docs) ***REMOVED***
          assert.ifError(err);
          assert.equal(2, docs.length);
          done();
        ***REMOVED***)
      ***REMOVED***)

      it('works with readPreferences', function (done) ***REMOVED***
        var m = mquery(col).find(***REMOVED*** name: 'exec' ***REMOVED***);
        try ***REMOVED***
          var rp = new require('mongodb').ReadPreference('primary');
          m.read(rp);
        ***REMOVED*** catch (e) ***REMOVED***
          if (e.code === 'MODULE_NOT_FOUND')
            e = null;
          done(e);
          return;
        ***REMOVED***
        m.exec(function (err, docs) ***REMOVED***
          assert.ifError(err);
          assert.equal(2, docs.length);
          done();
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***);

    it('findOne', function(done)***REMOVED***
      var m = mquery(col).findOne(***REMOVED*** age: 2 ***REMOVED***);
      m.exec(function (err, doc) ***REMOVED***
        assert.ifError(err);
        assert.equal(2, doc.age);
        done();
      ***REMOVED***)
    ***REMOVED***)

    it('count', function(done)***REMOVED***
      var m = mquery(col).count(***REMOVED*** name: 'exec' ***REMOVED***);
      m.exec(function (err, count) ***REMOVED***
        assert.ifError(err);
        assert.equal(2, count);
        done();
      ***REMOVED***)
    ***REMOVED***)

    it('distinct', function(done)***REMOVED***
      var m = mquery(***REMOVED*** name: 'exec' ***REMOVED***);
      m.collection(col);
      m.distinct('age');
      m.exec(function (err, array) ***REMOVED***
        assert.ifError(err);
        assert.ok(Array.isArray(array));
        assert.equal(2, array.length);
        assert(~array.indexOf(1));
        assert(~array.indexOf(2));
        done();
      ***REMOVED***);
    ***REMOVED***)

    describe('update', function()***REMOVED***
      var num;

      it('with a callback', function(done)***REMOVED***
        var m = mquery(col);
        m.where(***REMOVED*** name: 'exec' ***REMOVED***)

        m.count(function (err, _num) ***REMOVED***
          assert.ifError(err);
          num = _num;
          m.setOptions(***REMOVED*** multi: true ***REMOVED***)
          m.update(***REMOVED*** name: 'exec + update' ***REMOVED***);
          m.exec(function (err, res) ***REMOVED***
            assert.ifError(err);
            assert.equal(num, res.result.n);
            mquery(col).find(***REMOVED*** name: 'exec + update' ***REMOVED***, function (err, docs) ***REMOVED***
              assert.ifError(err);
              assert.equal(num, docs.length);
              done();
            ***REMOVED***)
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('updateMany', function() ***REMOVED***
        it('works', function(done) ***REMOVED***
          mquery(col).updateMany(***REMOVED*** name: 'exec' ***REMOVED***, ***REMOVED*** name: 'test' ***REMOVED***).
            exec(function(error) ***REMOVED***
              assert.ifError(error);
              mquery(col).count(***REMOVED*** name: 'test' ***REMOVED***).exec(function(error, res) ***REMOVED***
                assert.ifError(error);
                assert.equal(res, 2);
                done();
              ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***);

      describe('updateOne', function() ***REMOVED***
        it('works', function(done) ***REMOVED***
          mquery(col).updateOne(***REMOVED*** name: 'exec' ***REMOVED***, ***REMOVED*** name: 'test' ***REMOVED***).
            exec(function(error) ***REMOVED***
              assert.ifError(error);
              mquery(col).count(***REMOVED*** name: 'test' ***REMOVED***).exec(function(error, res) ***REMOVED***
                assert.ifError(error);
                assert.equal(res, 1);
                done();
              ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***);

      describe('replaceOne', function() ***REMOVED***
        it('works', function(done) ***REMOVED***
          mquery(col).replaceOne(***REMOVED*** name: 'exec' ***REMOVED***, ***REMOVED*** name: 'test' ***REMOVED***).
            exec(function(error) ***REMOVED***
              assert.ifError(error);
              mquery(col).findOne(***REMOVED*** name: 'test' ***REMOVED***).exec(function(error, res) ***REMOVED***
                assert.ifError(error);
                assert.equal(res.name, 'test');
                assert.ok(res.age == null);
                done();
              ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***);

      it('without a callback', function(done)***REMOVED***
        var m = mquery(col)
        m.where(***REMOVED*** name: 'exec + update' ***REMOVED***).setOptions(***REMOVED*** multi: true ***REMOVED***)
        m.update(***REMOVED*** name: 'exec' ***REMOVED***);

        // unsafe write
        m.exec();

        setTimeout(function () ***REMOVED***
          mquery(col).find(***REMOVED*** name: 'exec' ***REMOVED***, function (err, docs) ***REMOVED***
            assert.ifError(err);
            assert.equal(2, docs.length);
            done();
          ***REMOVED***)
        ***REMOVED***, 200)
      ***REMOVED***)
      it('preserves key ordering', function(done) ***REMOVED***
        var m = mquery(col);

        var m2 = m.update(***REMOVED*** _id : 'something' ***REMOVED***, ***REMOVED*** '1' : 1, '2' : 2, '3' : 3***REMOVED***);
        var doc = m2._updateForExec().$set;
        var count = 0;
        for (var i in doc) ***REMOVED***
          if (count == 0) ***REMOVED***
            assert.equal('1', i);
          ***REMOVED*** else if (count == 1) ***REMOVED***
            assert.equal('2', i);
          ***REMOVED*** else if (count ==2) ***REMOVED***
            assert.equal('3', i);
          ***REMOVED***
          count++;
        ***REMOVED***
        done();
      ***REMOVED***);
    ***REMOVED***)

    describe('remove', function()***REMOVED***
      it('with a callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** age: 2 ***REMOVED***).remove();
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal(1, res.result.n);
          done();
        ***REMOVED***)
      ***REMOVED***)

      it('without a callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** age: 1 ***REMOVED***).remove();
        m.exec();

        setTimeout(function () ***REMOVED***
          mquery(col).where('name', 'exec').count(function(err, num) ***REMOVED***
            assert.equal(1, num);
            done();
          ***REMOVED***)
        ***REMOVED***, 200)
      ***REMOVED***)
    ***REMOVED***)

    describe('deleteOne', function()***REMOVED***
      it('with a callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** age: ***REMOVED*** $gte: 0 ***REMOVED*** ***REMOVED***).deleteOne();
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal(res.result.n, 1);
          done();
        ***REMOVED***)
      ***REMOVED***)

      it('with justOne set', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** age: ***REMOVED*** $gte: 0 ***REMOVED*** ***REMOVED***).
          // Should ignore `justOne`
          setOptions(***REMOVED*** justOne: false ***REMOVED***).
          deleteOne();
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal(res.result.n, 1);
          done();
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('deleteMany', function()***REMOVED***
      it('with a callback', function(done)***REMOVED***
        var m = mquery(col).where(***REMOVED*** age: ***REMOVED*** $gte: 0 ***REMOVED*** ***REMOVED***).deleteMany();
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal(res.result.n, 2);
          done();
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('findOneAndUpdate', function()***REMOVED***
      it('with a callback', function(done)***REMOVED***
        var m = mquery(col);
        m.findOneAndUpdate(***REMOVED*** name: 'exec', age: 1 ***REMOVED***, ***REMOVED*** $set: ***REMOVED*** name: 'findOneAndUpdate' ***REMOVED******REMOVED***);
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal('findOneAndUpdate', res.value.name);
          done();
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)

    describe('findOneAndRemove', function()***REMOVED***
      it('with a callback', function(done)***REMOVED***
        var m = mquery(col);
        m.findOneAndRemove(***REMOVED*** name: 'exec', age: 2 ***REMOVED***);
        m.exec(function (err, res) ***REMOVED***
          assert.ifError(err);
          assert.equal('exec', res.value.name);
          assert.equal(2, res.value.age);
          mquery(col).count(***REMOVED*** name: 'exec' ***REMOVED***, function (err, num) ***REMOVED***
            assert.ifError(err);
            assert.equal(1, num);
            done();
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('setTraceFunction', function() ***REMOVED***
    beforeEach(function(done)***REMOVED***
      col.insert([***REMOVED*** name: 'trace', age: 93 ***REMOVED***], done);
    ***REMOVED***)

    it('calls trace function when executing query', function(done) ***REMOVED***
      var m = mquery(col);

      var resultTraceCalled;

      m.setTraceFunction(function (method, queryInfo) ***REMOVED***
        try ***REMOVED***
          assert.equal('findOne', method);
          assert.equal('trace', queryInfo.conditions.name);
        ***REMOVED*** catch (e) ***REMOVED***
          done(e);
        ***REMOVED***

        return function(err, result, millis) ***REMOVED***
          try ***REMOVED***
            assert.equal(93, result.age);
          ***REMOVED*** catch (e) ***REMOVED***
            done(e);
          ***REMOVED***
          resultTraceCalled = true;
        ***REMOVED***;
      ***REMOVED***);

      m.findOne(***REMOVED***name: 'trace'***REMOVED***, function (err, doc) ***REMOVED***
        assert.ifError(err);
        assert.equal(resultTraceCalled, true);
        assert.equal(93, doc.age);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('inherits trace function when calling toConstructor', function(done) ***REMOVED***
      function traceFunction () ***REMOVED*** return function() ***REMOVED******REMOVED*** ***REMOVED***;

      var tracedQuery = mquery().setTraceFunction(traceFunction).toConstructor();

      var query = tracedQuery();
      assert.equal(traceFunction, query._traceFunction);

      done();
    ***REMOVED***);
  ***REMOVED***);

  describe('thunk', function() ***REMOVED***
    it('returns a function', function(done) ***REMOVED***
      assert.equal('function', typeof mquery().thunk());
      done();
    ***REMOVED***);

    it('passes the fn arg to `exec`', function(done) ***REMOVED***
      function cb() ***REMOVED******REMOVED***
      var m = mquery();

      m.exec = function testing(fn) ***REMOVED***
        assert.equal(this, m);
        assert.equal(cb, fn);
        done();
      ***REMOVED***

      m.thunk()(cb);
    ***REMOVED***);
  ***REMOVED***);

  describe('then', function() ***REMOVED***
    before(function(done)***REMOVED***
      col.insert([***REMOVED*** name: 'then', age: 1 ***REMOVED***, ***REMOVED*** name: 'then', age: 2 ***REMOVED***], done);
    ***REMOVED***)

    after(function(done)***REMOVED***
      mquery(col).remove(***REMOVED*** name: 'then' ***REMOVED***).exec(done);
    ***REMOVED***)

    it('returns a promise A+ compat object', function(done) ***REMOVED***
      var m = mquery(col).find();
      assert.equal('function', typeof m.then);
      done();
    ***REMOVED***);

    it('creates a promise that is resolved on success', function(done) ***REMOVED***
      var promise = mquery(col).count(***REMOVED*** name: 'then' ***REMOVED***).then();
      promise.then(function(count)***REMOVED***
        assert.equal(2, count);
        done();
      ***REMOVED***, done);
    ***REMOVED***);

    it('supports exec() cb being called synchronously #66', function(done) ***REMOVED***
      var query = mquery(col).count(***REMOVED*** name: 'then' ***REMOVED***);
      query.exec = function(cb) ***REMOVED***
        cb(null, 66);
      ***REMOVED***

      query.then(success, done);
      function success(count)***REMOVED***
        assert.equal(66, count);
        done();
      ***REMOVED***
    ***REMOVED***);

    it('supports other Promise libs', function(done) ***REMOVED***
      var bluebird = mquery.Promise;

      // hack for testing
      mquery.Promise = function P() ***REMOVED***
        mquery.Promise = bluebird;
        this.then = function(x, y) ***REMOVED***
          return x + y;
        ***REMOVED***
      ***REMOVED***

      var val = mquery(col).count(***REMOVED*** name: 'exec' ***REMOVED***).then(1, 2);
      assert.equal(val, 3);
      done();
    ***REMOVED***);
  ***REMOVED***);

  describe('stream', function() ***REMOVED***
    before(function(done)***REMOVED***
      col.insert([***REMOVED*** name: 'stream', age: 1 ***REMOVED***, ***REMOVED*** name: 'stream', age: 2 ***REMOVED***], done);
    ***REMOVED***)

    after(function(done)***REMOVED***
      mquery(col).remove(***REMOVED*** name: 'stream' ***REMOVED***).exec(done);
    ***REMOVED***)

    describe('throws', function() ***REMOVED***
      describe('if used with non-find operations', function() ***REMOVED***
        var ops = ['update', 'findOneAndUpdate', 'remove', 'count', 'distinct'];

        ops.forEach(function(op) ***REMOVED***
          assert.throws(function()***REMOVED***
            mquery(col)[op]().stream();
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***);

    it('returns a stream', function(done) ***REMOVED***
      var stream = mquery(col).find(***REMOVED*** name: 'stream' ***REMOVED***).stream();
      var count = 0;
      var err;

      stream.on('data', function(doc)***REMOVED***
        assert.equal('stream', doc.name);
        ++count;
      ***REMOVED***);

      stream.on('error', function(er) ***REMOVED***
        err = er;
      ***REMOVED***);

      stream.on('end', function()***REMOVED***
        if (err) return done(err);
        assert.equal(2, count);
        done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);

  function noDistinct (type) ***REMOVED***
    it('cannot be used with distinct()', function(done)***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery().distinct('name')[type](4);
      ***REMOVED***, new RegExp(type + ' cannot be used with distinct'));
      done();
    ***REMOVED***)
  ***REMOVED***

  function no (method, type) ***REMOVED***
    it('cannot be used with ' + method + '()', function(done)***REMOVED***
      assert.throws(function () ***REMOVED***
        mquery()[method]()[type](4);
      ***REMOVED***, new RegExp(type + ' cannot be used with ' + method));
      done();
    ***REMOVED***)
  ***REMOVED***

  // query internal

  describe('_updateForExec', function()***REMOVED***
    it('returns a clone of the update object with same key order #19', function(done)***REMOVED***
      var update = ***REMOVED******REMOVED***;
      update.$push = ***REMOVED*** n: ***REMOVED*** $each: [***REMOVED***x:10***REMOVED***], $slice: -1, $sort: ***REMOVED***x:1***REMOVED******REMOVED******REMOVED***;

      var q = mquery().update(***REMOVED*** x: 1 ***REMOVED***, update);

      // capture original key order
      var order = [];
      for (var key in q._update.$push.n) ***REMOVED***
        order.push(key);
      ***REMOVED***

      // compare output
      var doc = q._updateForExec();
      var i = 0;
      for (var key in doc.$push.n) ***REMOVED***
        assert.equal(key, order[i]);
        i++;
      ***REMOVED***

      done();
    ***REMOVED***)
  ***REMOVED***)
***REMOVED***)
