var arrayMap = require('./_arrayMap'),
    baseIntersection = require('./_baseIntersection'),
    baseIteratee = require('./_baseIteratee'),
    baseRest = require('./_baseRest'),
    castArrayLikeObject = require('./_castArrayLikeObject'),
    last = require('./last');

/**
 * This method is like `_.intersection` except that it accepts `iteratee`
 * which is invoked for each element of each `arrays` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param ***REMOVED***...Array***REMOVED*** [arrays] The arrays to inspect.
 * @param ***REMOVED***Function***REMOVED*** [iteratee=_.identity] The iteratee invoked per element.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new array of intersecting values.
 * @example
 *
 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [2.1]
 *
 * // The `_.property` iteratee shorthand.
 * _.intersectionBy([***REMOVED*** 'x': 1 ***REMOVED***], [***REMOVED*** 'x': 2 ***REMOVED***, ***REMOVED*** 'x': 1 ***REMOVED***], 'x');
 * // => [***REMOVED*** 'x': 1 ***REMOVED***]
 */
var intersectionBy = baseRest(function(arrays) ***REMOVED***
  var iteratee = last(arrays),
      mapped = arrayMap(arrays, castArrayLikeObject);

  if (iteratee === last(mapped)) ***REMOVED***
    iteratee = undefined;
  ***REMOVED*** else ***REMOVED***
    mapped.pop();
  ***REMOVED***
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped, baseIteratee(iteratee, 2))
    : [];
***REMOVED***);

module.exports = intersectionBy;
