/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param ***REMOVED***Array***REMOVED*** args The provided arguments.
 * @param ***REMOVED***Array***REMOVED*** partials The arguments to prepend to those provided.
 * @param ***REMOVED***Array***REMOVED*** holders The `partials` placeholder indexes.
 * @params ***REMOVED***boolean***REMOVED*** [isCurried] Specify composing for a curried function.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) ***REMOVED***
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) ***REMOVED***
    result[leftIndex] = partials[leftIndex];
  ***REMOVED***
  while (++argsIndex < holdersLength) ***REMOVED***
    if (isUncurried || argsIndex < argsLength) ***REMOVED***
      result[holders[argsIndex]] = args[argsIndex];
    ***REMOVED***
  ***REMOVED***
  while (rangeLength--) ***REMOVED***
    result[leftIndex++] = args[argsIndex++];
  ***REMOVED***
  return result;
***REMOVED***

module.exports = composeArgs;
