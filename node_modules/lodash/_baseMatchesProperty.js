var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param ***REMOVED***string***REMOVED*** path The path of the property to get.
 * @param ***REMOVED*******REMOVED*** srcValue The value to match.
 * @returns ***REMOVED***Function***REMOVED*** Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) ***REMOVED***
  if (isKey(path) && isStrictComparable(srcValue)) ***REMOVED***
    return matchesStrictComparable(toKey(path), srcValue);
  ***REMOVED***
  return function(object) ***REMOVED***
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  ***REMOVED***;
***REMOVED***

module.exports = baseMatchesProperty;
