var baseIsEqual = require('./_baseIsEqual');

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param ***REMOVED*******REMOVED*** value The value to compare.
 * @param ***REMOVED*******REMOVED*** other The other value to compare.
 * @param ***REMOVED***Function***REMOVED*** [customizer] The function to customize comparisons.
 * @returns ***REMOVED***boolean***REMOVED*** Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) ***REMOVED***
 *   return /^h(?:i|ello)$/.test(value);
 * ***REMOVED***
 *
 * function customizer(objValue, othValue) ***REMOVED***
 *   if (isGreeting(objValue) && isGreeting(othValue)) ***REMOVED***
 *     return true;
 *   ***REMOVED***
 * ***REMOVED***
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */
function isEqualWith(value, other, customizer) ***REMOVED***
  customizer = typeof customizer == 'function' ? customizer : undefined;
  var result = customizer ? customizer(value, other) : undefined;
  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
***REMOVED***

module.exports = isEqualWith;
