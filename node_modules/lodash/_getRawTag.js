var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param ***REMOVED*******REMOVED*** value The value to query.
 * @returns ***REMOVED***string***REMOVED*** Returns the raw `toStringTag`.
 */
function getRawTag(value) ***REMOVED***
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try ***REMOVED***
    value[symToStringTag] = undefined;
    var unmasked = true;
  ***REMOVED*** catch (e) ***REMOVED******REMOVED***

  var result = nativeObjectToString.call(value);
  if (unmasked) ***REMOVED***
    if (isOwn) ***REMOVED***
      value[symToStringTag] = tag;
    ***REMOVED*** else ***REMOVED***
      delete value[symToStringTag];
    ***REMOVED***
  ***REMOVED***
  return result;
***REMOVED***

module.exports = getRawTag;
