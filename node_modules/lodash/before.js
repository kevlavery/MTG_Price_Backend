var toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param ***REMOVED***number***REMOVED*** n The number of calls at which `func` is no longer invoked.
 * @param ***REMOVED***Function***REMOVED*** func The function to restrict.
 * @returns ***REMOVED***Function***REMOVED*** Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) ***REMOVED***
  var result;
  if (typeof func != 'function') ***REMOVED***
    throw new TypeError(FUNC_ERROR_TEXT);
  ***REMOVED***
  n = toInteger(n);
  return function() ***REMOVED***
    if (--n > 0) ***REMOVED***
      result = func.apply(this, arguments);
    ***REMOVED***
    if (n <= 1) ***REMOVED***
      func = undefined;
    ***REMOVED***
    return result;
  ***REMOVED***;
***REMOVED***

module.exports = before;
