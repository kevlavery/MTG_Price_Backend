var baseFlatten = require('./_baseFlatten'),
    map = require('./map'),
    toInteger = require('./toInteger');

/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param ***REMOVED***Array|Object***REMOVED*** collection The collection to iterate over.
 * @param ***REMOVED***Function***REMOVED*** [iteratee=_.identity] The function invoked per iteration.
 * @param ***REMOVED***number***REMOVED*** [depth=1] The maximum recursion depth.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new flattened array.
 * @example
 *
 * function duplicate(n) ***REMOVED***
 *   return [[[n, n]]];
 * ***REMOVED***
 *
 * _.flatMapDepth([1, 2], duplicate, 2);
 * // => [[1, 1], [2, 2]]
 */
function flatMapDepth(collection, iteratee, depth) ***REMOVED***
  depth = depth === undefined ? 1 : toInteger(depth);
  return baseFlatten(map(collection, iteratee), depth);
***REMOVED***

module.exports = flatMapDepth;
