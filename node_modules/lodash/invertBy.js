var baseIteratee = require('./_baseIteratee'),
    createInverter = require('./_createInverter');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * This method is like `_.invert` except that the inverted object is generated
 * from the results of running each element of `object` thru `iteratee`. The
 * corresponding inverted value of each inverted key is an array of keys
 * responsible for generating the inverted value. The iteratee is invoked
 * with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.1.0
 * @category Object
 * @param ***REMOVED***Object***REMOVED*** object The object to invert.
 * @param ***REMOVED***Function***REMOVED*** [iteratee=_.identity] The iteratee invoked per element.
 * @returns ***REMOVED***Object***REMOVED*** Returns the new inverted object.
 * @example
 *
 * var object = ***REMOVED*** 'a': 1, 'b': 2, 'c': 1 ***REMOVED***;
 *
 * _.invertBy(object);
 * // => ***REMOVED*** '1': ['a', 'c'], '2': ['b'] ***REMOVED***
 *
 * _.invertBy(object, function(value) ***REMOVED***
 *   return 'group' + value;
 * ***REMOVED***);
 * // => ***REMOVED*** 'group1': ['a', 'c'], 'group2': ['b'] ***REMOVED***
 */
var invertBy = createInverter(function(result, value, key) ***REMOVED***
  if (value != null &&
      typeof value.toString != 'function') ***REMOVED***
    value = nativeObjectToString.call(value);
  ***REMOVED***

  if (hasOwnProperty.call(result, value)) ***REMOVED***
    result[value].push(key);
  ***REMOVED*** else ***REMOVED***
    result[value] = [key];
  ***REMOVED***
***REMOVED***, baseIteratee);

module.exports = invertBy;
