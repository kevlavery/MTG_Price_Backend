var baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    baseUniq = require('./_baseUniq'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    last = require('./last');

/**
 * This method is like `_.union` except that it accepts `comparator` which
 * is invoked to compare elements of `arrays`. Result values are chosen from
 * the first array in which the value occurs. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param ***REMOVED***...Array***REMOVED*** [arrays] The arrays to inspect.
 * @param ***REMOVED***Function***REMOVED*** [comparator] The comparator invoked per element.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new array of combined values.
 * @example
 *
 * var objects = [***REMOVED*** 'x': 1, 'y': 2 ***REMOVED***, ***REMOVED*** 'x': 2, 'y': 1 ***REMOVED***];
 * var others = [***REMOVED*** 'x': 1, 'y': 1 ***REMOVED***, ***REMOVED*** 'x': 1, 'y': 2 ***REMOVED***];
 *
 * _.unionWith(objects, others, _.isEqual);
 * // => [***REMOVED*** 'x': 1, 'y': 2 ***REMOVED***, ***REMOVED*** 'x': 2, 'y': 1 ***REMOVED***, ***REMOVED*** 'x': 1, 'y': 1 ***REMOVED***]
 */
var unionWith = baseRest(function(arrays) ***REMOVED***
  var comparator = last(arrays);
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
***REMOVED***);

module.exports = unionWith;
