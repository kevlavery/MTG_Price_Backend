var LazyWrapper = require('./_LazyWrapper'),
    LodashWrapper = require('./_LodashWrapper'),
    baseAt = require('./_baseAt'),
    flatRest = require('./_flatRest'),
    isIndex = require('./_isIndex'),
    thru = require('./thru');

/**
 * This method is the wrapper version of `_.at`.
 *
 * @name at
 * @memberOf _
 * @since 1.0.0
 * @category Seq
 * @param ***REMOVED***...(string|string[])***REMOVED*** [paths] The property paths to pick.
 * @returns ***REMOVED***Object***REMOVED*** Returns the new `lodash` wrapper instance.
 * @example
 *
 * var object = ***REMOVED*** 'a': [***REMOVED*** 'b': ***REMOVED*** 'c': 3 ***REMOVED*** ***REMOVED***, 4] ***REMOVED***;
 *
 * _(object).at(['a[0].b.c', 'a[1]']).value();
 * // => [3, 4]
 */
var wrapperAt = flatRest(function(paths) ***REMOVED***
  var length = paths.length,
      start = length ? paths[0] : 0,
      value = this.__wrapped__,
      interceptor = function(object) ***REMOVED*** return baseAt(object, paths); ***REMOVED***;

  if (length > 1 || this.__actions__.length ||
      !(value instanceof LazyWrapper) || !isIndex(start)) ***REMOVED***
    return this.thru(interceptor);
  ***REMOVED***
  value = value.slice(start, +start + (length ? 1 : 0));
  value.__actions__.push(***REMOVED***
    'func': thru,
    'args': [interceptor],
    'thisArg': undefined
  ***REMOVED***);
  return new LodashWrapper(value, this.__chain__).thru(function(array) ***REMOVED***
    if (length && !array.length) ***REMOVED***
      array.push(undefined);
    ***REMOVED***
    return array;
  ***REMOVED***);
***REMOVED***);

module.exports = wrapperAt;
