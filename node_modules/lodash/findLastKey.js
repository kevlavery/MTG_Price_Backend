var baseFindKey = require('./_baseFindKey'),
    baseForOwnRight = require('./_baseForOwnRight'),
    baseIteratee = require('./_baseIteratee');

/**
 * This method is like `_.findKey` except that it iterates over elements of
 * a collection in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param ***REMOVED***Object***REMOVED*** object The object to inspect.
 * @param ***REMOVED***Function***REMOVED*** [predicate=_.identity] The function invoked per iteration.
 * @returns ***REMOVED***string|undefined***REMOVED*** Returns the key of the matched element,
 *  else `undefined`.
 * @example
 *
 * var users = ***REMOVED***
 *   'barney':  ***REMOVED*** 'age': 36, 'active': true ***REMOVED***,
 *   'fred':    ***REMOVED*** 'age': 40, 'active': false ***REMOVED***,
 *   'pebbles': ***REMOVED*** 'age': 1,  'active': true ***REMOVED***
 * ***REMOVED***;
 *
 * _.findLastKey(users, function(o) ***REMOVED*** return o.age < 40; ***REMOVED***);
 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastKey(users, ***REMOVED*** 'age': 36, 'active': true ***REMOVED***);
 * // => 'barney'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastKey(users, ['active', false]);
 * // => 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastKey(users, 'active');
 * // => 'pebbles'
 */
function findLastKey(object, predicate) ***REMOVED***
  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
***REMOVED***

module.exports = findLastKey;
