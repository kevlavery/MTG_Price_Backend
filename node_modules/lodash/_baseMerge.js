var Stack = require('./_Stack'),
    assignMergeValue = require('./_assignMergeValue'),
    baseFor = require('./_baseFor'),
    baseMergeDeep = require('./_baseMergeDeep'),
    isObject = require('./isObject'),
    keysIn = require('./keysIn'),
    safeGet = require('./_safeGet');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param ***REMOVED***Object***REMOVED*** object The destination object.
 * @param ***REMOVED***Object***REMOVED*** source The source object.
 * @param ***REMOVED***number***REMOVED*** srcIndex The index of `source`.
 * @param ***REMOVED***Function***REMOVED*** [customizer] The function to customize merged values.
 * @param ***REMOVED***Object***REMOVED*** [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) ***REMOVED***
  if (object === source) ***REMOVED***
    return;
  ***REMOVED***
  baseFor(source, function(srcValue, key) ***REMOVED***
    if (isObject(srcValue)) ***REMOVED***
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    ***REMOVED***
    else ***REMOVED***
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) ***REMOVED***
        newValue = srcValue;
      ***REMOVED***
      assignMergeValue(object, key, newValue);
    ***REMOVED***
  ***REMOVED***, keysIn);
***REMOVED***

module.exports = baseMerge;
