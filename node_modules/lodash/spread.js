var apply = require('./_apply'),
    arrayPush = require('./_arrayPush'),
    baseRest = require('./_baseRest'),
    castSlice = require('./_castSlice'),
    toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * create function and an array of arguments much like
 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
 *
 * **Note:** This method is based on the
 * [spread operator](https://mdn.io/spread_operator).
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Function
 * @param ***REMOVED***Function***REMOVED*** func The function to spread arguments over.
 * @param ***REMOVED***number***REMOVED*** [start=0] The start position of the spread.
 * @returns ***REMOVED***Function***REMOVED*** Returns the new function.
 * @example
 *
 * var say = _.spread(function(who, what) ***REMOVED***
 *   return who + ' says ' + what;
 * ***REMOVED***);
 *
 * say(['fred', 'hello']);
 * // => 'fred says hello'
 *
 * var numbers = Promise.all([
 *   Promise.resolve(40),
 *   Promise.resolve(36)
 * ]);
 *
 * numbers.then(_.spread(function(x, y) ***REMOVED***
 *   return x + y;
 * ***REMOVED***));
 * // => a Promise of 76
 */
function spread(func, start) ***REMOVED***
  if (typeof func != 'function') ***REMOVED***
    throw new TypeError(FUNC_ERROR_TEXT);
  ***REMOVED***
  start = start == null ? 0 : nativeMax(toInteger(start), 0);
  return baseRest(function(args) ***REMOVED***
    var array = args[start],
        otherArgs = castSlice(args, 0, start);

    if (array) ***REMOVED***
      arrayPush(otherArgs, array);
    ***REMOVED***
    return apply(func, this, otherArgs);
  ***REMOVED***);
***REMOVED***

module.exports = spread;
