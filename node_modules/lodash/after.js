var toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The opposite of `_.before`; this method creates a function that invokes
 * `func` once it's called `n` or more times.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param ***REMOVED***number***REMOVED*** n The number of calls before `func` is invoked.
 * @param ***REMOVED***Function***REMOVED*** func The function to restrict.
 * @returns ***REMOVED***Function***REMOVED*** Returns the new restricted function.
 * @example
 *
 * var saves = ['profile', 'settings'];
 *
 * var done = _.after(saves.length, function() ***REMOVED***
 *   console.log('done saving!');
 * ***REMOVED***);
 *
 * _.forEach(saves, function(type) ***REMOVED***
 *   asyncSave(***REMOVED*** 'type': type, 'complete': done ***REMOVED***);
 * ***REMOVED***);
 * // => Logs 'done saving!' after the two async saves have completed.
 */
function after(n, func) ***REMOVED***
  if (typeof func != 'function') ***REMOVED***
    throw new TypeError(FUNC_ERROR_TEXT);
  ***REMOVED***
  n = toInteger(n);
  return function() ***REMOVED***
    if (--n < 1) ***REMOVED***
      return func.apply(this, arguments);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

module.exports = after;
