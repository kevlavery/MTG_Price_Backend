var baseOrderBy = require('./_baseOrderBy'),
    isArray = require('./isArray');

/**
 * This method is like `_.sortBy` except that it allows specifying the sort
 * orders of the iteratees to sort by. If `orders` is unspecified, all values
 * are sorted in ascending order. Otherwise, specify an order of "desc" for
 * descending or "asc" for ascending sort order of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param ***REMOVED***Array|Object***REMOVED*** collection The collection to iterate over.
 * @param ***REMOVED***Array[]|Function[]|Object[]|string[]***REMOVED*** [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @param ***REMOVED***string[]***REMOVED*** [orders] The sort orders of `iteratees`.
 * @param- ***REMOVED***Object***REMOVED*** [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new sorted array.
 * @example
 *
 * var users = [
 *   ***REMOVED*** 'user': 'fred',   'age': 48 ***REMOVED***,
 *   ***REMOVED*** 'user': 'barney', 'age': 34 ***REMOVED***,
 *   ***REMOVED*** 'user': 'fred',   'age': 40 ***REMOVED***,
 *   ***REMOVED*** 'user': 'barney', 'age': 36 ***REMOVED***
 * ];
 *
 * // Sort by `user` in ascending order and by `age` in descending order.
 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
 */
function orderBy(collection, iteratees, orders, guard) ***REMOVED***
  if (collection == null) ***REMOVED***
    return [];
  ***REMOVED***
  if (!isArray(iteratees)) ***REMOVED***
    iteratees = iteratees == null ? [] : [iteratees];
  ***REMOVED***
  orders = guard ? undefined : orders;
  if (!isArray(orders)) ***REMOVED***
    orders = orders == null ? [] : [orders];
  ***REMOVED***
  return baseOrderBy(collection, iteratees, orders);
***REMOVED***

module.exports = orderBy;
