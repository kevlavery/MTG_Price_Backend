var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    arrayMap = require('./_arrayMap'),
    baseUnary = require('./_baseUnary'),
    cacheHas = require('./_cacheHas');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param ***REMOVED***Array***REMOVED*** array The array to inspect.
 * @param ***REMOVED***Array***REMOVED*** values The values to exclude.
 * @param ***REMOVED***Function***REMOVED*** [iteratee] The iteratee invoked per element.
 * @param ***REMOVED***Function***REMOVED*** [comparator] The comparator invoked per element.
 * @returns ***REMOVED***Array***REMOVED*** Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) ***REMOVED***
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) ***REMOVED***
    return result;
  ***REMOVED***
  if (iteratee) ***REMOVED***
    values = arrayMap(values, baseUnary(iteratee));
  ***REMOVED***
  if (comparator) ***REMOVED***
    includes = arrayIncludesWith;
    isCommon = false;
  ***REMOVED***
  else if (values.length >= LARGE_ARRAY_SIZE) ***REMOVED***
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  ***REMOVED***
  outer:
  while (++index < length) ***REMOVED***
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) ***REMOVED***
      var valuesIndex = valuesLength;
      while (valuesIndex--) ***REMOVED***
        if (values[valuesIndex] === computed) ***REMOVED***
          continue outer;
        ***REMOVED***
      ***REMOVED***
      result.push(value);
    ***REMOVED***
    else if (!includes(values, computed, comparator)) ***REMOVED***
      result.push(value);
    ***REMOVED***
  ***REMOVED***
  return result;
***REMOVED***

module.exports = baseDifference;
