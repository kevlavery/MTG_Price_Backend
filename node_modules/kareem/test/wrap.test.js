var assert = require('assert');
var Kareem = require('../');

describe('wrap()', function() ***REMOVED***
  var hooks;

  beforeEach(function() ***REMOVED***
    hooks = new Kareem();
  ***REMOVED***);

  it('handles pre errors', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done('error!');
    ***REMOVED***);

    hooks.post('cook', function(obj) ***REMOVED***
      obj.tofu = 'no';
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [obj];
    args.push(function(error, result) ***REMOVED***
      assert.equal('error!', error);
      assert.ok(!result);
      assert.equal(undefined, obj.tofu);
      done();
    ***REMOVED***);

    hooks.wrap(
      'cook',
      function(o, callback) ***REMOVED***
        // Should never get called
        assert.ok(false);
        callback(null, o);
      ***REMOVED***,
      obj,
      args);
  ***REMOVED***);

  it('handles pre errors when no callback defined', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done('error!');
    ***REMOVED***);

    hooks.post('cook', function(obj) ***REMOVED***
      obj.tofu = 'no';
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [obj];

    hooks.wrap(
      'cook',
      function(o, callback) ***REMOVED***
        // Should never get called
        assert.ok(false);
        callback(null, o);
      ***REMOVED***,
      obj,
      args);

    setTimeout(
      function() ***REMOVED***
        done();
      ***REMOVED***,
      25);
  ***REMOVED***);

  it('handles errors in wrapped function', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done();
    ***REMOVED***);

    hooks.post('cook', function(obj) ***REMOVED***
      obj.tofu = 'no';
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [obj];
    args.push(function(error, result) ***REMOVED***
      assert.equal('error!', error);
      assert.ok(!result);
      assert.equal(undefined, obj.tofu);
      done();
    ***REMOVED***);

    hooks.wrap(
      'cook',
      function(o, callback) ***REMOVED***
        callback('error!');
      ***REMOVED***,
      obj,
      args);
  ***REMOVED***);

  it('handles errors in post', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done();
    ***REMOVED***);

    hooks.post('cook', function(obj, callback) ***REMOVED***
      obj.tofu = 'no';
      callback('error!');
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [obj];
    args.push(function(error, result) ***REMOVED***
      assert.equal('error!', error);
      assert.ok(!result);
      assert.equal('no', obj.tofu);
      done();
    ***REMOVED***);

    hooks.wrap(
      'cook',
      function(o, callback) ***REMOVED***
        callback(null, o);
      ***REMOVED***,
      obj,
      args);
  ***REMOVED***);

  it('defers errors to post hooks if enabled', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done(new Error('fail'));
    ***REMOVED***);

    hooks.post('cook', function(error, res, callback) ***REMOVED***
      callback(new Error('another error occurred'));
    ***REMOVED***);

    var args = [];
    args.push(function(error) ***REMOVED***
      assert.equal(error.message, 'another error occurred');
      done();
    ***REMOVED***);

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        assert.ok(false);
        callback();
      ***REMOVED***,
      null,
      args,
      ***REMOVED*** useErrorHandlers: true, numCallbackParams: 1 ***REMOVED***);
  ***REMOVED***);

  it('error handlers with no callback', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done(new Error('fail'));
    ***REMOVED***);

    hooks.post('cook', function(error, callback) ***REMOVED***
      assert.equal(error.message, 'fail');
      done();
    ***REMOVED***);

    var args = [];

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        assert.ok(false);
        callback();
      ***REMOVED***,
      null,
      args,
      ***REMOVED*** useErrorHandlers: true ***REMOVED***);
  ***REMOVED***);

  it('error handlers with no error', function(done) ***REMOVED***
    hooks.post('cook', function(error, callback) ***REMOVED***
      callback(new Error('another error occurred'));
    ***REMOVED***);

    var args = [];
    args.push(function(error) ***REMOVED***
      assert.ifError(error);
      done();
    ***REMOVED***);

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        callback();
      ***REMOVED***,
      null,
      args,
      ***REMOVED*** useErrorHandlers: true ***REMOVED***);
  ***REMOVED***);

  it('works with no args', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done();
    ***REMOVED***);

    hooks.post('cook', function(callback) ***REMOVED***
      obj.tofu = 'no';
      callback();
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [];

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        callback(null);
      ***REMOVED***,
      obj,
      args);

    setTimeout(
      function() ***REMOVED***
        assert.equal('no', obj.tofu);
        done();
      ***REMOVED***,
      25);
  ***REMOVED***);

  it('handles pre errors with no args', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      done('error!');
    ***REMOVED***);

    hooks.post('cook', function(callback) ***REMOVED***
      obj.tofu = 'no';
      callback();
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [];

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        callback(null);
      ***REMOVED***,
      obj,
      args);

    setTimeout(
      function() ***REMOVED***
        assert.equal(undefined, obj.tofu);
        done();
      ***REMOVED***,
      25);
  ***REMOVED***);

  it('handles wrapped function errors with no args', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      obj.waffles = false;
      done();
    ***REMOVED***);

    hooks.post('cook', function(callback) ***REMOVED***
      obj.tofu = 'no';
      callback();
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [];

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        callback('error!');
      ***REMOVED***,
      obj,
      args);

    setTimeout(
      function() ***REMOVED***
        assert.equal(false, obj.waffles);
        assert.equal(undefined, obj.tofu);
        done();
      ***REMOVED***,
      25);
  ***REMOVED***);

  it('handles post errors with no args', function(done) ***REMOVED***
    hooks.pre('cook', function(done) ***REMOVED***
      obj.waffles = false;
      done();
    ***REMOVED***);

    hooks.post('cook', function(callback) ***REMOVED***
      obj.tofu = 'no';
      callback('error!');
    ***REMOVED***);

    var obj = ***REMOVED*** bacon: 0, eggs: 0 ***REMOVED***;

    var args = [];

    hooks.wrap(
      'cook',
      function(callback) ***REMOVED***
        callback();
      ***REMOVED***,
      obj,
      args);

    setTimeout(
      function() ***REMOVED***
        assert.equal(false, obj.waffles);
        assert.equal('no', obj.tofu);
        done();
      ***REMOVED***,
      25);
  ***REMOVED***);

  it('sync wrappers', function() ***REMOVED***
    var calledPre = 0;
    var calledFn = 0;
    var calledPost = 0;
    hooks.pre('cook', function() ***REMOVED***
      ++calledPre;
    ***REMOVED***);

    hooks.post('cook', function() ***REMOVED***
      ++calledPost;
    ***REMOVED***);

    var wrapper = hooks.createWrapperSync('cook', function() ***REMOVED*** ++calledFn; ***REMOVED***);

    wrapper();

    assert.equal(calledPre, 1);
    assert.equal(calledFn, 1);
    assert.equal(calledPost, 1);
  ***REMOVED***);
***REMOVED***);
