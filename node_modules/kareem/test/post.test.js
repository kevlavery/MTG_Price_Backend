'use strict';

const assert = require('assert');
const Kareem = require('../');

describe('execPost', function() ***REMOVED***
  var hooks;

  beforeEach(function() ***REMOVED***
    hooks = new Kareem();
  ***REMOVED***);

  it('handles errors', function(done) ***REMOVED***
    hooks.post('cook', function(eggs, callback) ***REMOVED***
      callback('error!');
    ***REMOVED***);

    hooks.execPost('cook', null, [4], function(error, eggs) ***REMOVED***
      assert.equal('error!', error);
      assert.ok(!eggs);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('unshift', function() ***REMOVED***
    var f1 = function() ***REMOVED******REMOVED***;
    var f2 = function() ***REMOVED******REMOVED***;
    hooks.post('cook', f1);
    hooks.post('cook', f2, true);
    assert.strictEqual(hooks._posts.get('cook')[0], f2);
    assert.strictEqual(hooks._posts.get('cook')[1], f1);
  ***REMOVED***);

  it('multiple posts', function(done) ***REMOVED***
    hooks.post('cook', function(eggs, callback) ***REMOVED***
      setTimeout(
        function() ***REMOVED***
          callback();
        ***REMOVED***,
        5);
    ***REMOVED***);

    hooks.post('cook', function(eggs, callback) ***REMOVED***
      setTimeout(
        function() ***REMOVED***
          callback();
        ***REMOVED***,
        5);
    ***REMOVED***);

    hooks.execPost('cook', null, [4], function(error, eggs) ***REMOVED***
      assert.ifError(error);
      assert.equal(4, eggs);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('error posts', function(done) ***REMOVED***
    var called = ***REMOVED******REMOVED***;
    hooks.post('cook', function(eggs, callback) ***REMOVED***
      called.first = true;
      callback();
    ***REMOVED***);

    hooks.post('cook', function(eggs, callback) ***REMOVED***
      called.second = true;
      callback(new Error('fail'));
    ***REMOVED***);

    hooks.post('cook', function(eggs, callback) ***REMOVED***
      assert.ok(false);
    ***REMOVED***);

    hooks.post('cook', function(error, eggs, callback) ***REMOVED***
      called.fourth = true;
      assert.equal(error.message, 'fail');
      callback(new Error('fourth'));
    ***REMOVED***);

    hooks.post('cook', function(error, eggs, callback) ***REMOVED***
      called.fifth = true;
      assert.equal(error.message, 'fourth');
      callback(new Error('fifth'));
    ***REMOVED***);

    hooks.execPost('cook', null, [4], function(error, eggs) ***REMOVED***
      assert.ok(error);
      assert.equal(error.message, 'fifth');
      assert.deepEqual(called, ***REMOVED***
        first: true,
        second: true,
        fourth: true,
        fifth: true
      ***REMOVED***);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('error posts with initial error', function(done) ***REMOVED***
    var called = ***REMOVED******REMOVED***;

    hooks.post('cook', function(eggs, callback) ***REMOVED***
      assert.ok(false);
    ***REMOVED***);

    hooks.post('cook', function(error, eggs, callback) ***REMOVED***
      called.second = true;
      assert.equal(error.message, 'fail');
      callback(new Error('second'));
    ***REMOVED***);

    hooks.post('cook', function(error, eggs, callback) ***REMOVED***
      called.third = true;
      assert.equal(error.message, 'second');
      callback(new Error('third'));
    ***REMOVED***);

    hooks.post('cook', function(error, eggs, callback) ***REMOVED***
      called.fourth = true;
      assert.equal(error.message, 'third');
      callback();
    ***REMOVED***);

    var options = ***REMOVED*** error: new Error('fail') ***REMOVED***;
    hooks.execPost('cook', null, [4], options, function(error, eggs) ***REMOVED***
      assert.ok(error);
      assert.equal(error.message, 'third');
      assert.deepEqual(called, ***REMOVED***
        second: true,
        third: true,
        fourth: true
      ***REMOVED***);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('supports returning a promise', function(done) ***REMOVED***
    var calledPost = 0;

    hooks.post('cook', function() ***REMOVED***
      return new Promise(resolve => ***REMOVED***
        setTimeout(() => ***REMOVED***
          ++calledPost;
          resolve();
        ***REMOVED***, 100);
      ***REMOVED***);
    ***REMOVED***);

    hooks.execPost('cook', null, [], ***REMOVED******REMOVED***, function(error) ***REMOVED***
      assert.ifError(error);
      assert.equal(calledPost, 1);
      done();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

describe('execPostSync', function() ***REMOVED***
  var hooks;

  beforeEach(function() ***REMOVED***
    hooks = new Kareem();
  ***REMOVED***);

  it('executes hooks synchronously', function() ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.post('cook', function() ***REMOVED***
      execed.first = true;
    ***REMOVED***);

    hooks.post('cook', function() ***REMOVED***
      execed.second = true;
    ***REMOVED***);

    hooks.execPostSync('cook', null);
    assert.ok(execed.first);
    assert.ok(execed.second);
  ***REMOVED***);

  it('works with no hooks specified', function() ***REMOVED***
    assert.doesNotThrow(function() ***REMOVED***
      hooks.execPostSync('cook', null);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);
