var assert = require('assert');
var Kareem = require('../');

describe('execPre', function() ***REMOVED***
  var hooks;

  beforeEach(function() ***REMOVED***
    hooks = new Kareem();
  ***REMOVED***);

  it('handles errors with multiple pres', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', function(done) ***REMOVED***
      execed.first = true;
      done();
    ***REMOVED***);

    hooks.pre('cook', function(done) ***REMOVED***
      execed.second = true;
      done('error!');
    ***REMOVED***);

    hooks.pre('cook', function(done) ***REMOVED***
      execed.third = true;
      done();
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal('error!', err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('sync errors', function(done) ***REMOVED***
    var called = 0;

    hooks.pre('cook', function(next) ***REMOVED***
      throw new Error('woops!');
    ***REMOVED***);

    hooks.pre('cook', function(next) ***REMOVED***
      ++called;
      next();
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal(err.message, 'woops!');
      assert.equal(called, 0);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('unshift', function() ***REMOVED***
    var f1 = function() ***REMOVED******REMOVED***;
    var f2 = function() ***REMOVED******REMOVED***;
    hooks.pre('cook', false, f1);
    hooks.pre('cook', false, f2, null, true);
    assert.strictEqual(hooks._pres['cook'][0].fn, f2);
    assert.strictEqual(hooks._pres['cook'][1].fn, f1);
  ***REMOVED***);

  it('handles async errors', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.first = true;
      setTimeout(
        function() ***REMOVED***
          done('error!');
        ***REMOVED***,
        5);

      next();
    ***REMOVED***);

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.second = true;
      setTimeout(
        function() ***REMOVED***
          done('other error!');
        ***REMOVED***,
        10);

      next();
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal('error!', err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('handles async errors in next()', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.first = true;
      setTimeout(
        function() ***REMOVED***
          done('other error!');
        ***REMOVED***,
        15);

      next();
    ***REMOVED***);

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.second = true;
      setTimeout(
        function() ***REMOVED***
          next('error!');
          done('another error!');
        ***REMOVED***,
        5);
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal('error!', err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('handles async errors in next() when already done', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.first = true;
      setTimeout(
        function() ***REMOVED***
          done('other error!');
        ***REMOVED***,
        5);

      next();
    ***REMOVED***);

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.second = true;
      setTimeout(
        function() ***REMOVED***
          next('error!');
          done('another error!');
        ***REMOVED***,
        25);
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal('other error!', err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('async pres with clone()', function(done) ***REMOVED***
    var execed = false;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed = true;
      setTimeout(
        function() ***REMOVED***
          done();
        ***REMOVED***,
        5);

      next();
    ***REMOVED***);

    hooks.clone().execPre('cook', null, function(err) ***REMOVED***
      assert.ifError(err);
      assert.ok(execed);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('returns correct error when async pre errors', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.first = true;
      setTimeout(
        function() ***REMOVED***
          done('other error!');
        ***REMOVED***,
        5);

      next();
    ***REMOVED***);

    hooks.pre('cook', function(next) ***REMOVED***
      execed.second = true;
      setTimeout(
        function() ***REMOVED***
          next('error!');
        ***REMOVED***,
        15);
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.equal('other error!', err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('lets async pres run when fully sync pres are done', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', true, function(next, done) ***REMOVED***
      execed.first = true;
      setTimeout(
        function() ***REMOVED***
          done();
        ***REMOVED***,
        5);

      next();
    ***REMOVED***);

    hooks.pre('cook', function() ***REMOVED***
      execed.second = true;
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.ifError(err);
      assert.equal(2, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      done();
    ***REMOVED***);
  ***REMOVED***);

  it('allows passing arguments to the next pre', function(done) ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', function(next) ***REMOVED***
      execed.first = true;
      next(null, 'test');
    ***REMOVED***);

    hooks.pre('cook', function(next, p) ***REMOVED***
      execed.second = true;
      assert.equal(p, 'test');
      next();
    ***REMOVED***);

    hooks.pre('cook', function(next, p) ***REMOVED***
      execed.third = true;
      assert.ok(!p);
      next();
    ***REMOVED***);

    hooks.execPre('cook', null, function(err) ***REMOVED***
      assert.ifError(err);
      assert.equal(3, Object.keys(execed).length);
      assert.ok(execed.first);
      assert.ok(execed.second);
      assert.ok(execed.third);
      done();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

describe('execPreSync', function() ***REMOVED***
  var hooks;

  beforeEach(function() ***REMOVED***
    hooks = new Kareem();
  ***REMOVED***);

  it('executes hooks synchronously', function() ***REMOVED***
    var execed = ***REMOVED******REMOVED***;

    hooks.pre('cook', function() ***REMOVED***
      execed.first = true;
    ***REMOVED***);

    hooks.pre('cook', function() ***REMOVED***
      execed.second = true;
    ***REMOVED***);

    hooks.execPreSync('cook', null);
    assert.ok(execed.first);
    assert.ok(execed.second);
  ***REMOVED***);

  it('works with no hooks specified', function() ***REMOVED***
    assert.doesNotThrow(function() ***REMOVED***
      hooks.execPreSync('cook', null);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);
