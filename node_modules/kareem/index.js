'use strict';

function Kareem() ***REMOVED***
  this._pres = ***REMOVED******REMOVED***;
  this._posts = ***REMOVED******REMOVED***;
***REMOVED***

Kareem.prototype.execPre = function(name, context, args, callback) ***REMOVED***
  if (arguments.length === 3) ***REMOVED***
    callback = args;
    args = [];
  ***REMOVED***
  var pres = get(this._pres, name, []);
  var numPres = pres.length;
  var numAsyncPres = pres.numAsync || 0;
  var currentPre = 0;
  var asyncPresLeft = numAsyncPres;
  var done = false;
  var $args = args;

  if (!numPres) ***REMOVED***
    return process.nextTick(function() ***REMOVED***
      callback(null);
    ***REMOVED***);
  ***REMOVED***

  var next = function() ***REMOVED***
    if (currentPre >= numPres) ***REMOVED***
      return;
    ***REMOVED***
    var pre = pres[currentPre];

    if (pre.isAsync) ***REMOVED***
      var args = [
        decorateNextFn(_next),
        decorateNextFn(function(error) ***REMOVED***
          if (error) ***REMOVED***
            if (done) ***REMOVED***
              return;
            ***REMOVED***
            done = true;
            return callback(error);
          ***REMOVED***
          if (--asyncPresLeft === 0 && currentPre >= numPres) ***REMOVED***
            return callback(null);
          ***REMOVED***
        ***REMOVED***)
      ];

      callMiddlewareFunction(pre.fn, context, args, args[0]);
    ***REMOVED*** else if (pre.fn.length > 0) ***REMOVED***
      var args = [decorateNextFn(_next)];
      var _args = arguments.length >= 2 ? arguments : [null].concat($args);
      for (var i = 1; i < _args.length; ++i) ***REMOVED***
        args.push(_args[i]);
      ***REMOVED***

      callMiddlewareFunction(pre.fn, context, args, args[0]);
    ***REMOVED*** else ***REMOVED***
      let error = null;
      let maybePromise = null;
      try ***REMOVED***
        maybePromise = pre.fn.call(context);
      ***REMOVED*** catch (err) ***REMOVED***
        error = err;
      ***REMOVED***

      if (isPromise(maybePromise)) ***REMOVED***
        maybePromise.then(() => _next(), err => _next(err));
      ***REMOVED*** else ***REMOVED***
        if (++currentPre >= numPres) ***REMOVED***
          if (asyncPresLeft > 0) ***REMOVED***
            // Leave parallel hooks to run
            return;
          ***REMOVED*** else ***REMOVED***
            return process.nextTick(function() ***REMOVED***
              callback(error);
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***
        next(error);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  next.apply(null, [null].concat(args));

  function _next(error) ***REMOVED***
    if (error) ***REMOVED***
      if (done) ***REMOVED***
        return;
      ***REMOVED***
      done = true;
      return callback(error);
    ***REMOVED***

    if (++currentPre >= numPres) ***REMOVED***
      if (asyncPresLeft > 0) ***REMOVED***
        // Leave parallel hooks to run
        return;
      ***REMOVED*** else ***REMOVED***
        return callback(null);
      ***REMOVED***
    ***REMOVED***

    next.apply(context, arguments);
  ***REMOVED***
***REMOVED***;

Kareem.prototype.execPreSync = function(name, context, args) ***REMOVED***
  var pres = get(this._pres, name, []);
  var numPres = pres.length;

  for (var i = 0; i < numPres; ++i) ***REMOVED***
    pres[i].fn.apply(context, args || []);
  ***REMOVED***
***REMOVED***;

Kareem.prototype.execPost = function(name, context, args, options, callback) ***REMOVED***
  if (arguments.length < 5) ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED***
  var posts = get(this._posts, name, []);
  var numPosts = posts.length;
  var currentPost = 0;

  var firstError = null;
  if (options && options.error) ***REMOVED***
    firstError = options.error;
  ***REMOVED***

  if (!numPosts) ***REMOVED***
    return process.nextTick(function() ***REMOVED***
      callback.apply(null, [firstError].concat(args));
    ***REMOVED***);
  ***REMOVED***

  var next = function() ***REMOVED***
    var post = posts[currentPost];
    var numArgs = 0;
    var argLength = args.length;
    var newArgs = [];
    for (var i = 0; i < argLength; ++i) ***REMOVED***
      numArgs += args[i] && args[i]._kareemIgnore ? 0 : 1;
      if (!args[i] || !args[i]._kareemIgnore) ***REMOVED***
        newArgs.push(args[i]);
      ***REMOVED***
    ***REMOVED***

    if (firstError) ***REMOVED***
      if (post.length === numArgs + 2) ***REMOVED***
        var _cb = decorateNextFn(function(error) ***REMOVED***
          if (error) ***REMOVED***
            firstError = error;
          ***REMOVED***
          if (++currentPost >= numPosts) ***REMOVED***
            return callback.call(null, firstError);
          ***REMOVED***
          next();
        ***REMOVED***);

        callMiddlewareFunction(post, context,
          [firstError].concat(newArgs).concat([_cb]), _cb);
      ***REMOVED*** else ***REMOVED***
        if (++currentPost >= numPosts) ***REMOVED***
          return callback.call(null, firstError);
        ***REMOVED***
        next();
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      const _cb = decorateNextFn(function(error) ***REMOVED***
        if (error) ***REMOVED***
          firstError = error;
          return next();
        ***REMOVED***

        if (++currentPost >= numPosts) ***REMOVED***
          return callback.apply(null, [null].concat(args));
        ***REMOVED***

        next();
      ***REMOVED***);

      if (post.length === numArgs + 2) ***REMOVED***
        // Skip error handlers if no error
        if (++currentPost >= numPosts) ***REMOVED***
          return callback.apply(null, [null].concat(args));
        ***REMOVED***
        return next();
      ***REMOVED***
      if (post.length === numArgs + 1) ***REMOVED***
        callMiddlewareFunction(post, context, newArgs.concat([_cb]), _cb);
      ***REMOVED*** else ***REMOVED***
        let error;
        let maybePromise;
        try ***REMOVED***
          maybePromise = post.apply(context, newArgs);
        ***REMOVED*** catch (err) ***REMOVED***
          error = err;
          firstError = err;
        ***REMOVED***

        if (isPromise(maybePromise)) ***REMOVED***
          return maybePromise.then(() => _cb(), err => _cb(err));
        ***REMOVED***

        if (++currentPost >= numPosts) ***REMOVED***
          return callback.apply(null, [error].concat(args));
        ***REMOVED***

        next(error);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  next();
***REMOVED***;

Kareem.prototype.execPostSync = function(name, context, args) ***REMOVED***
  var posts = get(this._posts, name, []);
  var numPosts = posts.length;

  for (var i = 0; i < numPosts; ++i) ***REMOVED***
    posts[i].apply(context, args || []);
  ***REMOVED***
***REMOVED***;

Kareem.prototype.createWrapperSync = function(name, fn) ***REMOVED***
  var kareem = this;
  return function syncWrapper() ***REMOVED***
    kareem.execPreSync(name, this, arguments);

    var toReturn = fn.apply(this, arguments);

    kareem.execPostSync(name, this, [toReturn]);

    return toReturn;
  ***REMOVED***;
***REMOVED***

function _handleWrapError(instance, error, name, context, args, options, callback) ***REMOVED***
  if (options.useErrorHandlers) ***REMOVED***
    var _options = ***REMOVED*** error: error ***REMOVED***;
    return instance.execPost(name, context, args, _options, function(error) ***REMOVED***
      return typeof callback === 'function' && callback(error);
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    return typeof callback === 'function' ?
      callback(error) :
      undefined;
  ***REMOVED***
***REMOVED***

Kareem.prototype.wrap = function(name, fn, context, args, options) ***REMOVED***
  var lastArg = (args.length > 0 ? args[args.length - 1] : null);
  var argsWithoutCb = typeof lastArg === 'function' ?
    args.slice(0, args.length - 1) :
    args;
  var _this = this;

  options = options || ***REMOVED******REMOVED***;

  this.execPre(name, context, args, function(error) ***REMOVED***
    if (error) ***REMOVED***
      var numCallbackParams = options.numCallbackParams || 0;
      var errorArgs = options.contextParameter ? [context] : [];
      for (var i = errorArgs.length; i < numCallbackParams; ++i) ***REMOVED***
        errorArgs.push(null);
      ***REMOVED***
      return _handleWrapError(_this, error, name, context, errorArgs,
        options, lastArg);
    ***REMOVED***

    var end = (typeof lastArg === 'function' ? args.length - 1 : args.length);
    fn.apply(context, args.slice(0, end).concat(_cb));

    function _cb() ***REMOVED***
      var args = arguments;
      var argsWithoutError = Array.prototype.slice.call(arguments, 1);
      if (options.nullResultByDefault && argsWithoutError.length === 0) ***REMOVED***
        argsWithoutError.push(null);
      ***REMOVED***
      if (arguments[0]) ***REMOVED***
        // Assume error
        return _handleWrapError(_this, arguments[0], name, context,
          argsWithoutError, options, lastArg);
      ***REMOVED*** else ***REMOVED***
        _this.execPost(name, context, argsWithoutError, function() ***REMOVED***
          if (arguments[0]) ***REMOVED***
            return typeof lastArg === 'function' ?
              lastArg(arguments[0]) :
              undefined;
          ***REMOVED***

          return typeof lastArg === 'function' ?
            lastArg.apply(context, arguments) :
            undefined;
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

Kareem.prototype.hasHooks = function(name) ***REMOVED***
  return this._pres[name] != null || this._posts[name] != null;
***REMOVED***;

Kareem.prototype.createWrapper = function(name, fn, context, options) ***REMOVED***
  var _this = this;
  if (!this.hasHooks(name)) ***REMOVED***
    // Fast path: if there's no hooks for this function, just return the
    // function wrapped in a nextTick()
    return function() ***REMOVED***
      process.nextTick(() => fn.apply(this, arguments));
    ***REMOVED***;
  ***REMOVED***
  return function() ***REMOVED***
    var _context = context || this;
    var args = Array.prototype.slice.call(arguments);
    _this.wrap(name, fn, _context, args, options);
  ***REMOVED***;
***REMOVED***;

Kareem.prototype.pre = function(name, isAsync, fn, error, unshift) ***REMOVED***
  if (typeof arguments[1] !== 'boolean') ***REMOVED***
    error = fn;
    fn = isAsync;
    isAsync = false;
  ***REMOVED***

  this._pres[name] = get(this._pres, name, []);
  const pres = this._pres[name];

  if (isAsync) ***REMOVED***
    pres.numAsync = pres.numAsync || 0;
    ++pres.numAsync;
  ***REMOVED***

  if (unshift) ***REMOVED***
    pres.unshift(***REMOVED*** fn: fn, isAsync: isAsync ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    pres.push(***REMOVED*** fn: fn, isAsync: isAsync ***REMOVED***);
  ***REMOVED***

  return this;
***REMOVED***;

Kareem.prototype.post = function(name, fn, unshift) ***REMOVED***
  this._posts[name] = get(this._posts, name, []);

  if (unshift) ***REMOVED***
    this._posts[name].unshift(fn);
  ***REMOVED*** else ***REMOVED***
    this._posts[name].push(fn);
  ***REMOVED***
  return this;
***REMOVED***;

Kareem.prototype.clone = function() ***REMOVED***
  const n = new Kareem();

  for (let key of Object.keys(this._pres)) ***REMOVED***
    n._pres[key] = this._pres[key].slice();
    n._pres[key].numAsync = this._pres[key].numAsync;
  ***REMOVED***
  for (let key of Object.keys(this._posts)) ***REMOVED***
    n._posts[key] = this._posts[key].slice();
  ***REMOVED***

  return n;
***REMOVED***;

Kareem.prototype.merge = function(other) ***REMOVED***
  var ret = this.clone();

  for (let key of Object.keys(other._pres)) ***REMOVED***
    const sourcePres = get(ret._pres, key, []);
    const deduplicated = other._pres[key].
      // Deduplicate based on `fn`
      filter(p => sourcePres.map(_p => _p.fn).indexOf(p.fn) === -1);
    ret._pres[key] = sourcePres.concat(deduplicated);
    ret._pres[key].numAsync = get(ret._pres[key], 'numAsync', 0);
    ret._pres[key].numAsync += deduplicated.filter(p => p.isAsync).length;
  ***REMOVED***
  for (let key of Object.keys(other._posts)) ***REMOVED***
    const sourcePosts = get(ret._posts, key, []);
    const deduplicated = other._posts[key].
      filter(p => sourcePosts.indexOf(p) === -1);
    ret._posts[key] = sourcePosts.concat(deduplicated);
  ***REMOVED***

  return ret;
***REMOVED***;

function get(obj, key, def) ***REMOVED***
  if (obj[key] != null) ***REMOVED***
    return obj[key];
  ***REMOVED***
  return def;
***REMOVED***

function callMiddlewareFunction(fn, context, args, next) ***REMOVED***
  let maybePromise;
  try ***REMOVED***
    maybePromise = fn.apply(context, args);
  ***REMOVED*** catch (error) ***REMOVED***
    return next(error);
  ***REMOVED***

  if (isPromise(maybePromise)) ***REMOVED***
    maybePromise.then(() => next(), err => next(err));
  ***REMOVED***
***REMOVED***

function isPromise(v) ***REMOVED***
  return v != null && typeof v.then === 'function';
***REMOVED***

function decorateNextFn(fn) ***REMOVED***
  var called = false;
  var _this = this;
  return function() ***REMOVED***
    // Ensure this function can only be called once
    if (called) ***REMOVED***
      return;
    ***REMOVED***
    called = true;
    // Make sure to clear the stack so try/catch doesn't catch errors
    // in subsequent middleware
    return process.nextTick(() => fn.apply(_this, arguments));
  ***REMOVED***;
***REMOVED***

module.exports = Kareem;
