/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = onFinished
module.exports.isFinished = isFinished

/**
 * Module dependencies.
 * @private
 */

var first = require('ee-first')

/**
 * Variables.
 * @private
 */

/* istanbul ignore next */
var defer = typeof setImmediate === 'function'
  ? setImmediate
  : function(fn)***REMOVED*** process.nextTick(fn.bind.apply(fn, arguments)) ***REMOVED***

/**
 * Invoke callback when the response has finished, useful for
 * cleaning up resources afterwards.
 *
 * @param ***REMOVED***object***REMOVED*** msg
 * @param ***REMOVED***function***REMOVED*** listener
 * @return ***REMOVED***object***REMOVED***
 * @public
 */

function onFinished(msg, listener) ***REMOVED***
  if (isFinished(msg) !== false) ***REMOVED***
    defer(listener, null, msg)
    return msg
  ***REMOVED***

  // attach the listener to the message
  attachListener(msg, listener)

  return msg
***REMOVED***

/**
 * Determine if message is already finished.
 *
 * @param ***REMOVED***object***REMOVED*** msg
 * @return ***REMOVED***boolean***REMOVED***
 * @public
 */

function isFinished(msg) ***REMOVED***
  var socket = msg.socket

  if (typeof msg.finished === 'boolean') ***REMOVED***
    // OutgoingMessage
    return Boolean(msg.finished || (socket && !socket.writable))
  ***REMOVED***

  if (typeof msg.complete === 'boolean') ***REMOVED***
    // IncomingMessage
    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
  ***REMOVED***

  // don't know
  return undefined
***REMOVED***

/**
 * Attach a finished listener to the message.
 *
 * @param ***REMOVED***object***REMOVED*** msg
 * @param ***REMOVED***function***REMOVED*** callback
 * @private
 */

function attachFinishedListener(msg, callback) ***REMOVED***
  var eeMsg
  var eeSocket
  var finished = false

  function onFinish(error) ***REMOVED***
    eeMsg.cancel()
    eeSocket.cancel()

    finished = true
    callback(error)
  ***REMOVED***

  // finished on first message event
  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)

  function onSocket(socket) ***REMOVED***
    // remove listener
    msg.removeListener('socket', onSocket)

    if (finished) return
    if (eeMsg !== eeSocket) return

    // finished on first socket event
    eeSocket = first([[socket, 'error', 'close']], onFinish)
  ***REMOVED***

  if (msg.socket) ***REMOVED***
    // socket already assigned
    onSocket(msg.socket)
    return
  ***REMOVED***

  // wait for socket to be assigned
  msg.on('socket', onSocket)

  if (msg.socket === undefined) ***REMOVED***
    // node.js 0.8 patch
    patchAssignSocket(msg, onSocket)
  ***REMOVED***
***REMOVED***

/**
 * Attach the listener to the message.
 *
 * @param ***REMOVED***object***REMOVED*** msg
 * @return ***REMOVED***function***REMOVED***
 * @private
 */

function attachListener(msg, listener) ***REMOVED***
  var attached = msg.__onFinished

  // create a private single listener with queue
  if (!attached || !attached.queue) ***REMOVED***
    attached = msg.__onFinished = createListener(msg)
    attachFinishedListener(msg, attached)
  ***REMOVED***

  attached.queue.push(listener)
***REMOVED***

/**
 * Create listener on message.
 *
 * @param ***REMOVED***object***REMOVED*** msg
 * @return ***REMOVED***function***REMOVED***
 * @private
 */

function createListener(msg) ***REMOVED***
  function listener(err) ***REMOVED***
    if (msg.__onFinished === listener) msg.__onFinished = null
    if (!listener.queue) return

    var queue = listener.queue
    listener.queue = null

    for (var i = 0; i < queue.length; i++) ***REMOVED***
      queue[i](err, msg)
    ***REMOVED***
  ***REMOVED***

  listener.queue = []

  return listener
***REMOVED***

/**
 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
 *
 * @param ***REMOVED***ServerResponse***REMOVED*** res
 * @param ***REMOVED***function***REMOVED*** callback
 * @private
 */

function patchAssignSocket(res, callback) ***REMOVED***
  var assignSocket = res.assignSocket

  if (typeof assignSocket !== 'function') return

  // res.on('socket', callback) is broken in 0.8
  res.assignSocket = function _assignSocket(socket) ***REMOVED***
    assignSocket.call(this, socket)
    callback(socket)
  ***REMOVED***
***REMOVED***
