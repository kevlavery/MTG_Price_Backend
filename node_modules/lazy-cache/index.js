'use strict';

/**
 * Cache results of the first function call to ensure only calling once.
 *
 * ```js
 * var utils = require('lazy-cache')(require);
 * // cache the call to `require('ansi-yellow')`
 * utils('ansi-yellow', 'yellow');
 * // use `ansi-yellow`
 * console.log(utils.yellow('this is yellow'));
 * ```
 *
 * @param  ***REMOVED***Function***REMOVED*** `fn` Function that will be called only once.
 * @return ***REMOVED***Function***REMOVED*** Function that can be called to get the cached function
 * @api public
 */

function lazyCache(fn) ***REMOVED***
  var cache = ***REMOVED******REMOVED***;
  var proxy = function(mod, name) ***REMOVED***
    name = name || camelcase(mod);

    // check both boolean and string in case `process.env` cases to string
    if (process.env.UNLAZY === 'true' || process.env.UNLAZY === true || process.env.TRAVIS) ***REMOVED***
      cache[name] = fn(mod);
    ***REMOVED***

    Object.defineProperty(proxy, name, ***REMOVED***
      enumerable: true,
      configurable: true,
      get: getter
    ***REMOVED***);

    function getter() ***REMOVED***
      if (cache.hasOwnProperty(name)) ***REMOVED***
        return cache[name];
      ***REMOVED***
      return (cache[name] = fn(mod));
    ***REMOVED***
    return getter;
  ***REMOVED***;
  return proxy;
***REMOVED***

/**
 * Used to camelcase the name to be stored on the `lazy` object.
 *
 * @param  ***REMOVED***String***REMOVED*** `str` String containing `_`, `.`, `-` or whitespace that will be camelcased.
 * @return ***REMOVED***String***REMOVED*** camelcased string.
 */

function camelcase(str) ***REMOVED***
  if (str.length === 1) ***REMOVED***
    return str.toLowerCase();
  ***REMOVED***
  str = str.replace(/^[\W_]+|[\W_]+$/g, '').toLowerCase();
  return str.replace(/[\W_]+(\w|$)/g, function(_, ch) ***REMOVED***
    return ch.toUpperCase();
  ***REMOVED***);
***REMOVED***

/**
 * Expose `lazyCache`
 */

module.exports = lazyCache;
