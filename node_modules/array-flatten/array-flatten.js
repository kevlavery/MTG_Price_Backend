'use strict'

/**
 * Expose `arrayFlatten`.
 */
module.exports = arrayFlatten

/**
 * Recursive flatten function with depth.
 *
 * @param  ***REMOVED***Array***REMOVED***  array
 * @param  ***REMOVED***Array***REMOVED***  result
 * @param  ***REMOVED***Number***REMOVED*** depth
 * @return ***REMOVED***Array***REMOVED***
 */
function flattenWithDepth (array, result, depth) ***REMOVED***
  for (var i = 0; i < array.length; i++) ***REMOVED***
    var value = array[i]

    if (depth > 0 && Array.isArray(value)) ***REMOVED***
      flattenWithDepth(value, result, depth - 1)
    ***REMOVED*** else ***REMOVED***
      result.push(value)
    ***REMOVED***
  ***REMOVED***

  return result
***REMOVED***

/**
 * Recursive flatten function. Omitting depth is slightly faster.
 *
 * @param  ***REMOVED***Array***REMOVED*** array
 * @param  ***REMOVED***Array***REMOVED*** result
 * @return ***REMOVED***Array***REMOVED***
 */
function flattenForever (array, result) ***REMOVED***
  for (var i = 0; i < array.length; i++) ***REMOVED***
    var value = array[i]

    if (Array.isArray(value)) ***REMOVED***
      flattenForever(value, result)
    ***REMOVED*** else ***REMOVED***
      result.push(value)
    ***REMOVED***
  ***REMOVED***

  return result
***REMOVED***

/**
 * Flatten an array, with the ability to define a depth.
 *
 * @param  ***REMOVED***Array***REMOVED***  array
 * @param  ***REMOVED***Number***REMOVED*** depth
 * @return ***REMOVED***Array***REMOVED***
 */
function arrayFlatten (array, depth) ***REMOVED***
  if (depth == null) ***REMOVED***
    return flattenForever(array, [])
  ***REMOVED***

  return flattenWithDepth(array, [], depth)
***REMOVED***
