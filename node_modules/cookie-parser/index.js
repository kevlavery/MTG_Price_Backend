/*!
 * cookie-parser
 * Copyright(c) 2014 TJ Holowaychuk
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */

var cookie = require('cookie');
var signature = require('cookie-signature');

/**
 * Module exports.
 * @public
 */

module.exports = cookieParser;
module.exports.JSONCookie = JSONCookie;
module.exports.JSONCookies = JSONCookies;
module.exports.signedCookie = signedCookie;
module.exports.signedCookies = signedCookies;

/**
 * Parse Cookie header and populate `req.cookies`
 * with an object keyed by the cookie names.
 *
 * @param ***REMOVED***string|array***REMOVED*** [secret] A string (or array of strings) representing cookie signing secret(s).
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @return ***REMOVED***Function***REMOVED***
 * @public
 */

function cookieParser(secret, options) ***REMOVED***
  return function cookieParser(req, res, next) ***REMOVED***
    if (req.cookies) ***REMOVED***
      return next();
    ***REMOVED***

    var cookies = req.headers.cookie;
    var secrets = !secret || Array.isArray(secret)
      ? (secret || [])
      : [secret];

    req.secret = secrets[0];
    req.cookies = Object.create(null);
    req.signedCookies = Object.create(null);

    // no cookies
    if (!cookies) ***REMOVED***
      return next();
    ***REMOVED***

    req.cookies = cookie.parse(cookies, options);

    // parse signed cookies
    if (secrets.length !== 0) ***REMOVED***
      req.signedCookies = signedCookies(req.cookies, secrets);
      req.signedCookies = JSONCookies(req.signedCookies);
    ***REMOVED***

    // parse JSON cookies
    req.cookies = JSONCookies(req.cookies);

    next();
  ***REMOVED***;
***REMOVED***

/**
 * Parse JSON cookie string.
 *
 * @param ***REMOVED***String***REMOVED*** str
 * @return ***REMOVED***Object***REMOVED*** Parsed object or undefined if not json cookie
 * @public
 */

function JSONCookie(str) ***REMOVED***
  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') ***REMOVED***
    return undefined;
  ***REMOVED***

  try ***REMOVED***
    return JSON.parse(str.slice(2));
  ***REMOVED*** catch (err) ***REMOVED***
    return undefined;
  ***REMOVED***
***REMOVED***

/**
 * Parse JSON cookies.
 *
 * @param ***REMOVED***Object***REMOVED*** obj
 * @return ***REMOVED***Object***REMOVED***
 * @public
 */

function JSONCookies(obj) ***REMOVED***
  var cookies = Object.keys(obj);
  var key;
  var val;

  for (var i = 0; i < cookies.length; i++) ***REMOVED***
    key = cookies[i];
    val = JSONCookie(obj[key]);

    if (val) ***REMOVED***
      obj[key] = val;
    ***REMOVED***
  ***REMOVED***

  return obj;
***REMOVED***

/**
 * Parse a signed cookie string, return the decoded value.
 *
 * @param ***REMOVED***String***REMOVED*** str signed cookie string
 * @param ***REMOVED***string|array***REMOVED*** secret
 * @return ***REMOVED***String***REMOVED*** decoded value
 * @public
 */

function signedCookie(str, secret) ***REMOVED***
  if (typeof str !== 'string') ***REMOVED***
    return undefined;
  ***REMOVED***

  if (str.substr(0, 2) !== 's:') ***REMOVED***
    return str;
  ***REMOVED***

  var secrets = !secret || Array.isArray(secret)
    ? (secret || [])
    : [secret];

  for (var i = 0; i < secrets.length; i++) ***REMOVED***
    var val = signature.unsign(str.slice(2), secrets[i]);

    if (val !== false) ***REMOVED***
      return val;
    ***REMOVED***
  ***REMOVED***

  return false;
***REMOVED***

/**
 * Parse signed cookies, returning an object containing the decoded key/value
 * pairs, while removing the signed key from obj.
 *
 * @param ***REMOVED***Object***REMOVED*** obj
 * @param ***REMOVED***string|array***REMOVED*** secret
 * @return ***REMOVED***Object***REMOVED***
 * @public
 */

function signedCookies(obj, secret) ***REMOVED***
  var cookies = Object.keys(obj);
  var dec;
  var key;
  var ret = Object.create(null);
  var val;

  for (var i = 0; i < cookies.length; i++) ***REMOVED***
    key = cookies[i];
    val = obj[key];
    dec = signedCookie(val, secret);

    if (val !== dec) ***REMOVED***
      ret[key] = dec;
      delete obj[key];
    ***REMOVED***
  ***REMOVED***

  return ret;
***REMOVED***
