#!/usr/bin/env node

var optimist = require('optimist')
    .usage('Precompile handlebar templates.\nUsage: $0 [template|directory]...', ***REMOVED***
      'f': ***REMOVED***
        'type': 'string',
        'description': 'Output File',
        'alias': 'output'
      ***REMOVED***,
      'map': ***REMOVED***
        'type': 'string',
        'description': 'Source Map File'
      ***REMOVED***,
      'a': ***REMOVED***
        'type': 'boolean',
        'description': 'Exports amd style (require.js)',
        'alias': 'amd'
      ***REMOVED***,
      'c': ***REMOVED***
        'type': 'string',
        'description': 'Exports CommonJS style, path to Handlebars module',
        'alias': 'commonjs',
        'default': null
      ***REMOVED***,
      'h': ***REMOVED***
        'type': 'string',
        'description': 'Path to handlebar.js (only valid for amd-style)',
        'alias': 'handlebarPath',
        'default': ''
      ***REMOVED***,
      'k': ***REMOVED***
        'type': 'string',
        'description': 'Known helpers',
        'alias': 'known'
      ***REMOVED***,
      'o': ***REMOVED***
        'type': 'boolean',
        'description': 'Known helpers only',
        'alias': 'knownOnly'
      ***REMOVED***,
      'm': ***REMOVED***
        'type': 'boolean',
        'description': 'Minimize output',
        'alias': 'min'
      ***REMOVED***,
      'n': ***REMOVED***
        'type': 'string',
        'description': 'Template namespace',
        'alias': 'namespace',
        'default': 'Handlebars.templates'
      ***REMOVED***,
      's': ***REMOVED***
        'type': 'boolean',
        'description': 'Output template function only.',
        'alias': 'simple'
      ***REMOVED***,
      'N': ***REMOVED***
        'type': 'string',
        'description': 'Name of passed string templates. Optional if running in a simple mode. Required when operating on multiple templates.',
        'alias': 'name'
      ***REMOVED***,
      'i': ***REMOVED***
        'type': 'string',
        'description': 'Generates a template from the passed CLI argument.\n"-" is treated as a special value and causes stdin to be read for the template value.',
        'alias': 'string'
      ***REMOVED***,
      'r': ***REMOVED***
        'type': 'string',
        'description': 'Template root. Base value that will be stripped from template names.',
        'alias': 'root'
      ***REMOVED***,
      'p': ***REMOVED***
        'type': 'boolean',
        'description': 'Compiling a partial template',
        'alias': 'partial'
      ***REMOVED***,
      'd': ***REMOVED***
        'type': 'boolean',
        'description': 'Include data when compiling',
        'alias': 'data'
      ***REMOVED***,
      'e': ***REMOVED***
        'type': 'string',
        'description': 'Template extension.',
        'alias': 'extension',
        'default': 'handlebars'
      ***REMOVED***,
      'b': ***REMOVED***
        'type': 'boolean',
        'description': 'Removes the BOM (Byte Order Mark) from the beginning of the templates.',
        'alias': 'bom'
      ***REMOVED***,
      'v': ***REMOVED***
        'type': 'boolean',
        'description': 'Prints the current compiler version',
        'alias': 'version'
      ***REMOVED***,

      'help': ***REMOVED***
        'type': 'boolean',
        'description': 'Outputs this message'
      ***REMOVED***
    ***REMOVED***)

    .wrap(120)
    .check(function(argv) ***REMOVED***
      if (argv.version) ***REMOVED***
        return;
      ***REMOVED***
    ***REMOVED***);


var argv = optimist.argv;
argv.files = argv._;
delete argv._;

var Precompiler = require('../dist/cjs/precompiler');
Precompiler.loadTemplates(argv, function(err, opts) ***REMOVED***
  if (err) ***REMOVED***
    throw err;
  ***REMOVED***

  if (opts.help || (!opts.templates.length && !opts.version)) ***REMOVED***
    optimist.showHelp();
  ***REMOVED*** else ***REMOVED***
    Precompiler.cli(opts);
  ***REMOVED***
***REMOVED***);
