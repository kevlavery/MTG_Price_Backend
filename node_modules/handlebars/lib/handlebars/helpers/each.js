import ***REMOVED***appendContextPath, blockParams, createFrame, isArray, isFunction***REMOVED*** from '../utils';
import Exception from '../exception';

export default function(instance) ***REMOVED***
  instance.registerHelper('each', function(context, options) ***REMOVED***
    if (!options) ***REMOVED***
      throw new Exception('Must pass iterator to #each');
    ***REMOVED***

    let fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data,
        contextPath;

    if (options.data && options.ids) ***REMOVED***
      contextPath = appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    ***REMOVED***

    if (isFunction(context)) ***REMOVED*** context = context.call(this); ***REMOVED***

    if (options.data) ***REMOVED***
      data = createFrame(options.data);
    ***REMOVED***

    function execIteration(field, index, last) ***REMOVED***
      if (data) ***REMOVED***
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) ***REMOVED***
          data.contextPath = contextPath + field;
        ***REMOVED***
      ***REMOVED***

      ret = ret + fn(context[field], ***REMOVED***
        data: data,
        blockParams: blockParams([context[field], field], [contextPath + field, null])
      ***REMOVED***);
    ***REMOVED***

    if (context && typeof context === 'object') ***REMOVED***
      if (isArray(context)) ***REMOVED***
        for (let j = context.length; i < j; i++) ***REMOVED***
          if (i in context) ***REMOVED***
            execIteration(i, i, i === context.length - 1);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        let priorKey;

        for (let key in context) ***REMOVED***
          if (context.hasOwnProperty(key)) ***REMOVED***
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) ***REMOVED***
              execIteration(priorKey, i - 1);
            ***REMOVED***
            priorKey = key;
            i++;
          ***REMOVED***
        ***REMOVED***
        if (priorKey !== undefined) ***REMOVED***
          execIteration(priorKey, i - 1, true);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    if (i === 0) ***REMOVED***
      ret = inverse(this);
    ***REMOVED***

    return ret;
  ***REMOVED***);
***REMOVED***
