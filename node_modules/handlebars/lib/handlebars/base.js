import ***REMOVED***createFrame, extend, toString***REMOVED*** from './utils';
import Exception from './exception';
import ***REMOVED***registerDefaultHelpers***REMOVED*** from './helpers';
import ***REMOVED***registerDefaultDecorators***REMOVED*** from './decorators';
import logger from './logger';

export const VERSION = '4.0.5';
export const COMPILER_REVISION = 7;

export const REVISION_CHANGES = ***REMOVED***
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
***REMOVED***;

const objectType = '[object Object]';

export function HandlebarsEnvironment(helpers, partials, decorators) ***REMOVED***
  this.helpers = helpers || ***REMOVED******REMOVED***;
  this.partials = partials || ***REMOVED******REMOVED***;
  this.decorators = decorators || ***REMOVED******REMOVED***;

  registerDefaultHelpers(this);
  registerDefaultDecorators(this);
***REMOVED***

HandlebarsEnvironment.prototype = ***REMOVED***
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: logger.log,

  registerHelper: function(name, fn) ***REMOVED***
    if (toString.call(name) === objectType) ***REMOVED***
      if (fn) ***REMOVED*** throw new Exception('Arg not supported with multiple helpers'); ***REMOVED***
      extend(this.helpers, name);
    ***REMOVED*** else ***REMOVED***
      this.helpers[name] = fn;
    ***REMOVED***
  ***REMOVED***,
  unregisterHelper: function(name) ***REMOVED***
    delete this.helpers[name];
  ***REMOVED***,

  registerPartial: function(name, partial) ***REMOVED***
    if (toString.call(name) === objectType) ***REMOVED***
      extend(this.partials, name);
    ***REMOVED*** else ***REMOVED***
      if (typeof partial === 'undefined') ***REMOVED***
        throw new Exception(`Attempting to register a partial called "$***REMOVED***name***REMOVED***" as undefined`);
      ***REMOVED***
      this.partials[name] = partial;
    ***REMOVED***
  ***REMOVED***,
  unregisterPartial: function(name) ***REMOVED***
    delete this.partials[name];
  ***REMOVED***,

  registerDecorator: function(name, fn) ***REMOVED***
    if (toString.call(name) === objectType) ***REMOVED***
      if (fn) ***REMOVED*** throw new Exception('Arg not supported with multiple decorators'); ***REMOVED***
      extend(this.decorators, name);
    ***REMOVED*** else ***REMOVED***
      this.decorators[name] = fn;
    ***REMOVED***
  ***REMOVED***,
  unregisterDecorator: function(name) ***REMOVED***
    delete this.decorators[name];
  ***REMOVED***
***REMOVED***;

export let log = logger.log;

export ***REMOVED***createFrame, logger***REMOVED***;
