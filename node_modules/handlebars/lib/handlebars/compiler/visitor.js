import Exception from '../exception';

function Visitor() ***REMOVED***
  this.parents = [];
***REMOVED***

Visitor.prototype = ***REMOVED***
  constructor: Visitor,
  mutating: false,

  // Visits a given value. If mutating, will replace the value if necessary.
  acceptKey: function(node, name) ***REMOVED***
    let value = this.accept(node[name]);
    if (this.mutating) ***REMOVED***
      // Hacky sanity check: This may have a few false positives for type for the helper
      // methods but will generally do the right thing without a lot of overhead.
      if (value && !Visitor.prototype[value.type]) ***REMOVED***
        throw new Exception('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
      ***REMOVED***
      node[name] = value;
    ***REMOVED***
  ***REMOVED***,

  // Performs an accept operation with added sanity check to ensure
  // required keys are not removed.
  acceptRequired: function(node, name) ***REMOVED***
    this.acceptKey(node, name);

    if (!node[name]) ***REMOVED***
      throw new Exception(node.type + ' requires ' + name);
    ***REMOVED***
  ***REMOVED***,

  // Traverses a given array. If mutating, empty respnses will be removed
  // for child elements.
  acceptArray: function(array) ***REMOVED***
    for (let i = 0, l = array.length; i < l; i++) ***REMOVED***
      this.acceptKey(array, i);

      if (!array[i]) ***REMOVED***
        array.splice(i, 1);
        i--;
        l--;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,

  accept: function(object) ***REMOVED***
    if (!object) ***REMOVED***
      return;
    ***REMOVED***

    /* istanbul ignore next: Sanity code */
    if (!this[object.type]) ***REMOVED***
      throw new Exception('Unknown type: ' + object.type, object);
    ***REMOVED***

    if (this.current) ***REMOVED***
      this.parents.unshift(this.current);
    ***REMOVED***
    this.current = object;

    let ret = this[object.type](object);

    this.current = this.parents.shift();

    if (!this.mutating || ret) ***REMOVED***
      return ret;
    ***REMOVED*** else if (ret !== false) ***REMOVED***
      return object;
    ***REMOVED***
  ***REMOVED***,

  Program: function(program) ***REMOVED***
    this.acceptArray(program.body);
  ***REMOVED***,

  MustacheStatement: visitSubExpression,
  Decorator: visitSubExpression,

  BlockStatement: visitBlock,
  DecoratorBlock: visitBlock,

  PartialStatement: visitPartial,
  PartialBlockStatement: function(partial) ***REMOVED***
    visitPartial.call(this, partial);

    this.acceptKey(partial, 'program');
  ***REMOVED***,

  ContentStatement: function(/* content */) ***REMOVED******REMOVED***,
  CommentStatement: function(/* comment */) ***REMOVED******REMOVED***,

  SubExpression: visitSubExpression,

  PathExpression: function(/* path */) ***REMOVED******REMOVED***,

  StringLiteral: function(/* string */) ***REMOVED******REMOVED***,
  NumberLiteral: function(/* number */) ***REMOVED******REMOVED***,
  BooleanLiteral: function(/* bool */) ***REMOVED******REMOVED***,
  UndefinedLiteral: function(/* literal */) ***REMOVED******REMOVED***,
  NullLiteral: function(/* literal */) ***REMOVED******REMOVED***,

  Hash: function(hash) ***REMOVED***
    this.acceptArray(hash.pairs);
  ***REMOVED***,
  HashPair: function(pair) ***REMOVED***
    this.acceptRequired(pair, 'value');
  ***REMOVED***
***REMOVED***;

function visitSubExpression(mustache) ***REMOVED***
  this.acceptRequired(mustache, 'path');
  this.acceptArray(mustache.params);
  this.acceptKey(mustache, 'hash');
***REMOVED***
function visitBlock(block) ***REMOVED***
  visitSubExpression.call(this, block);

  this.acceptKey(block, 'program');
  this.acceptKey(block, 'inverse');
***REMOVED***
function visitPartial(partial) ***REMOVED***
  this.acceptRequired(partial, 'name');
  this.acceptArray(partial.params);
  this.acceptKey(partial, 'hash');
***REMOVED***

export default Visitor;
