/* eslint-disable new-cap */
import Visitor from './visitor';

export function print(ast) ***REMOVED***
  return new PrintVisitor().accept(ast);
***REMOVED***

export function PrintVisitor() ***REMOVED***
  this.padding = 0;
***REMOVED***

PrintVisitor.prototype = new Visitor();

PrintVisitor.prototype.pad = function(string) ***REMOVED***
  let out = '';

  for (let i = 0, l = this.padding; i < l; i++) ***REMOVED***
    out += '  ';
  ***REMOVED***

  out += string + '\n';
  return out;
***REMOVED***;

PrintVisitor.prototype.Program = function(program) ***REMOVED***
  let out = '',
      body = program.body,
      i, l;

  if (program.blockParams) ***REMOVED***
    let blockParams = 'BLOCK PARAMS: [';
    for (i = 0, l = program.blockParams.length; i < l; i++) ***REMOVED***
       blockParams += ' ' + program.blockParams[i];
    ***REMOVED***
    blockParams += ' ]';
    out += this.pad(blockParams);
  ***REMOVED***

  for (i = 0, l = body.length; i < l; i++) ***REMOVED***
    out += this.accept(body[i]);
  ***REMOVED***

  this.padding--;

  return out;
***REMOVED***;

PrintVisitor.prototype.MustacheStatement = function(mustache) ***REMOVED***
  return this.pad('***REMOVED******REMOVED*** ' + this.SubExpression(mustache) + ' ***REMOVED******REMOVED***');
***REMOVED***;
PrintVisitor.prototype.Decorator = function(mustache) ***REMOVED***
  return this.pad('***REMOVED******REMOVED*** DIRECTIVE ' + this.SubExpression(mustache) + ' ***REMOVED******REMOVED***');
***REMOVED***;

PrintVisitor.prototype.BlockStatement =
PrintVisitor.prototype.DecoratorBlock = function(block) ***REMOVED***
  let out = '';

  out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
  this.padding++;
  out += this.pad(this.SubExpression(block));
  if (block.program) ***REMOVED***
    out += this.pad('PROGRAM:');
    this.padding++;
    out += this.accept(block.program);
    this.padding--;
  ***REMOVED***
  if (block.inverse) ***REMOVED***
    if (block.program) ***REMOVED*** this.padding++; ***REMOVED***
    out += this.pad('***REMOVED******REMOVED***^***REMOVED******REMOVED***');
    this.padding++;
    out += this.accept(block.inverse);
    this.padding--;
    if (block.program) ***REMOVED*** this.padding--; ***REMOVED***
  ***REMOVED***
  this.padding--;

  return out;
***REMOVED***;

PrintVisitor.prototype.PartialStatement = function(partial) ***REMOVED***
  let content = 'PARTIAL:' + partial.name.original;
  if (partial.params[0]) ***REMOVED***
    content += ' ' + this.accept(partial.params[0]);
  ***REMOVED***
  if (partial.hash) ***REMOVED***
    content += ' ' + this.accept(partial.hash);
  ***REMOVED***
  return this.pad('***REMOVED******REMOVED***> ' + content + ' ***REMOVED******REMOVED***');
***REMOVED***;
PrintVisitor.prototype.PartialBlockStatement = function(partial) ***REMOVED***
  let content = 'PARTIAL BLOCK:' + partial.name.original;
  if (partial.params[0]) ***REMOVED***
    content += ' ' + this.accept(partial.params[0]);
  ***REMOVED***
  if (partial.hash) ***REMOVED***
    content += ' ' + this.accept(partial.hash);
  ***REMOVED***

  content += ' ' + this.pad('PROGRAM:');
  this.padding++;
  content += this.accept(partial.program);
  this.padding--;

  return this.pad('***REMOVED******REMOVED***> ' + content + ' ***REMOVED******REMOVED***');
***REMOVED***;

PrintVisitor.prototype.ContentStatement = function(content) ***REMOVED***
  return this.pad("CONTENT[ '" + content.value + "' ]");
***REMOVED***;

PrintVisitor.prototype.CommentStatement = function(comment) ***REMOVED***
  return this.pad("***REMOVED******REMOVED***! '" + comment.value + "' ***REMOVED******REMOVED***");
***REMOVED***;

PrintVisitor.prototype.SubExpression = function(sexpr) ***REMOVED***
  let params = sexpr.params,
      paramStrings = [],
      hash;

  for (let i = 0, l = params.length; i < l; i++) ***REMOVED***
    paramStrings.push(this.accept(params[i]));
  ***REMOVED***

  params = '[' + paramStrings.join(', ') + ']';

  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

  return this.accept(sexpr.path) + ' ' + params + hash;
***REMOVED***;

PrintVisitor.prototype.PathExpression = function(id) ***REMOVED***
  let path = id.parts.join('/');
  return (id.data ? '@' : '') + 'PATH:' + path;
***REMOVED***;


PrintVisitor.prototype.StringLiteral = function(string) ***REMOVED***
  return '"' + string.value + '"';
***REMOVED***;

PrintVisitor.prototype.NumberLiteral = function(number) ***REMOVED***
  return 'NUMBER***REMOVED***' + number.value + '***REMOVED***';
***REMOVED***;

PrintVisitor.prototype.BooleanLiteral = function(bool) ***REMOVED***
  return 'BOOLEAN***REMOVED***' + bool.value + '***REMOVED***';
***REMOVED***;

PrintVisitor.prototype.UndefinedLiteral = function() ***REMOVED***
  return 'UNDEFINED';
***REMOVED***;

PrintVisitor.prototype.NullLiteral = function() ***REMOVED***
  return 'NULL';
***REMOVED***;

PrintVisitor.prototype.Hash = function(hash) ***REMOVED***
  let pairs = hash.pairs,
      joinedPairs = [];

  for (let i = 0, l = pairs.length; i < l; i++) ***REMOVED***
    joinedPairs.push(this.accept(pairs[i]));
  ***REMOVED***

  return 'HASH***REMOVED***' + joinedPairs.join(', ') + '***REMOVED***';
***REMOVED***;
PrintVisitor.prototype.HashPair = function(pair) ***REMOVED***
  return pair.key + '=' + this.accept(pair.value);
***REMOVED***;
/* eslint-enable new-cap */
