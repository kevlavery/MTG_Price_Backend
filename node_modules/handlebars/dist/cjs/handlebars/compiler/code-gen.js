/* global define */
'use strict';

exports.__esModule = true;

var _utils = require('../utils');

var SourceNode = undefined;

try ***REMOVED***
  /* istanbul ignore next */
  if (typeof define !== 'function' || !define.amd) ***REMOVED***
    // We don't support this in AMD environments. For these environments, we asusme that
    // they are running on the browser and thus have no need for the source-map library.
    var SourceMap = require('source-map');
    SourceNode = SourceMap.SourceNode;
  ***REMOVED***
***REMOVED*** catch (err) ***REMOVED******REMOVED***
/* NOP */

/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
if (!SourceNode) ***REMOVED***
  SourceNode = function (line, column, srcFile, chunks) ***REMOVED***
    this.src = '';
    if (chunks) ***REMOVED***
      this.add(chunks);
    ***REMOVED***
  ***REMOVED***;
  /* istanbul ignore next */
  SourceNode.prototype = ***REMOVED***
    add: function add(chunks) ***REMOVED***
      if (_utils.isArray(chunks)) ***REMOVED***
        chunks = chunks.join('');
      ***REMOVED***
      this.src += chunks;
    ***REMOVED***,
    prepend: function prepend(chunks) ***REMOVED***
      if (_utils.isArray(chunks)) ***REMOVED***
        chunks = chunks.join('');
      ***REMOVED***
      this.src = chunks + this.src;
    ***REMOVED***,
    toStringWithSourceMap: function toStringWithSourceMap() ***REMOVED***
      return ***REMOVED*** code: this.toString() ***REMOVED***;
    ***REMOVED***,
    toString: function toString() ***REMOVED***
      return this.src;
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

function castChunk(chunk, codeGen, loc) ***REMOVED***
  if (_utils.isArray(chunk)) ***REMOVED***
    var ret = [];

    for (var i = 0, len = chunk.length; i < len; i++) ***REMOVED***
      ret.push(codeGen.wrap(chunk[i], loc));
    ***REMOVED***
    return ret;
  ***REMOVED*** else if (typeof chunk === 'boolean' || typeof chunk === 'number') ***REMOVED***
    // Handle primitives that the SourceNode will throw up on
    return chunk + '';
  ***REMOVED***
  return chunk;
***REMOVED***

function CodeGen(srcFile) ***REMOVED***
  this.srcFile = srcFile;
  this.source = [];
***REMOVED***

CodeGen.prototype = ***REMOVED***
  isEmpty: function isEmpty() ***REMOVED***
    return !this.source.length;
  ***REMOVED***,
  prepend: function prepend(source, loc) ***REMOVED***
    this.source.unshift(this.wrap(source, loc));
  ***REMOVED***,
  push: function push(source, loc) ***REMOVED***
    this.source.push(this.wrap(source, loc));
  ***REMOVED***,

  merge: function merge() ***REMOVED***
    var source = this.empty();
    this.each(function (line) ***REMOVED***
      source.add(['  ', line, '\n']);
    ***REMOVED***);
    return source;
  ***REMOVED***,

  each: function each(iter) ***REMOVED***
    for (var i = 0, len = this.source.length; i < len; i++) ***REMOVED***
      iter(this.source[i]);
    ***REMOVED***
  ***REMOVED***,

  empty: function empty() ***REMOVED***
    var loc = this.currentLocation || ***REMOVED*** start: ***REMOVED******REMOVED*** ***REMOVED***;
    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  ***REMOVED***,
  wrap: function wrap(chunk) ***REMOVED***
    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || ***REMOVED*** start: ***REMOVED******REMOVED*** ***REMOVED*** : arguments[1];

    if (chunk instanceof SourceNode) ***REMOVED***
      return chunk;
    ***REMOVED***

    chunk = castChunk(chunk, this, loc);

    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  ***REMOVED***,

  functionCall: function functionCall(fn, type, params) ***REMOVED***
    params = this.generateList(params);
    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  ***REMOVED***,

  quotedString: function quotedString(str) ***REMOVED***
    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    .replace(/\u2029/g, '\\u2029') + '"';
  ***REMOVED***,

  objectLiteral: function objectLiteral(obj) ***REMOVED***
    var pairs = [];

    for (var key in obj) ***REMOVED***
      if (obj.hasOwnProperty(key)) ***REMOVED***
        var value = castChunk(obj[key], this);
        if (value !== 'undefined') ***REMOVED***
          pairs.push([this.quotedString(key), ':', value]);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    var ret = this.generateList(pairs);
    ret.prepend('***REMOVED***');
    ret.add('***REMOVED***');
    return ret;
  ***REMOVED***,

  generateList: function generateList(entries) ***REMOVED***
    var ret = this.empty();

    for (var i = 0, len = entries.length; i < len; i++) ***REMOVED***
      if (i) ***REMOVED***
        ret.add(',');
      ***REMOVED***

      ret.add(castChunk(entries[i], this));
    ***REMOVED***

    return ret;
  ***REMOVED***,

  generateArray: function generateArray(entries) ***REMOVED***
    var ret = this.generateList(entries);
    ret.prepend('[');
    ret.add(']');

    return ret;
  ***REMOVED***
***REMOVED***;

exports['default'] = CodeGen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
