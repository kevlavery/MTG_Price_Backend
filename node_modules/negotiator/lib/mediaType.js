/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

module.exports = preferredMediaTypes;
module.exports.preferredMediaTypes = preferredMediaTypes;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) ***REMOVED***
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) ***REMOVED***
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) ***REMOVED***
      accepts[j++] = mediaType;
    ***REMOVED***
  ***REMOVED***

  // trim accepts
  accepts.length = j;

  return accepts;
***REMOVED***

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) ***REMOVED***
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) ***REMOVED***
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) ***REMOVED***
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"'
        ? val.substr(1, val.length - 2)
        : val;

      if (key === 'q') ***REMOVED***
        q = parseFloat(value);
        break;
      ***REMOVED***

      // store parameter
      params[key] = value;
    ***REMOVED***
  ***REMOVED***

  return ***REMOVED***
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  ***REMOVED***;
***REMOVED***

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) ***REMOVED***
  var priority = ***REMOVED***o: -1, q: 0, s: 0***REMOVED***;

  for (var i = 0; i < accepted.length; i++) ***REMOVED***
    var spec = specify(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) ***REMOVED***
      priority = spec;
    ***REMOVED***
  ***REMOVED***

  return priority;
***REMOVED***

/**
 * Get the specificity of the media type.
 * @private
 */

function specify(type, spec, index) ***REMOVED***
  var p = parseMediaType(type);
  var s = 0;

  if (!p) ***REMOVED***
    return null;
  ***REMOVED***

  if(spec.type.toLowerCase() == p.type.toLowerCase()) ***REMOVED***
    s |= 4
  ***REMOVED*** else if(spec.type != '*') ***REMOVED***
    return null;
  ***REMOVED***

  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) ***REMOVED***
    s |= 2
  ***REMOVED*** else if(spec.subtype != '*') ***REMOVED***
    return null;
  ***REMOVED***

  var keys = Object.keys(spec.params);
  if (keys.length > 0) ***REMOVED***
    if (keys.every(function (k) ***REMOVED***
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    ***REMOVED***)) ***REMOVED***
      s |= 1
    ***REMOVED*** else ***REMOVED***
      return null
    ***REMOVED***
  ***REMOVED***

  return ***REMOVED***
    i: index,
    o: spec.i,
    q: spec.q,
    s: s,
  ***REMOVED***
***REMOVED***

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes(accept, provided) ***REMOVED***
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) ***REMOVED***
    // sorted list of all types
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullType);
  ***REMOVED***

  var priorities = provided.map(function getPriority(type, index) ***REMOVED***
    return getMediaTypePriority(type, accepts, index);
  ***REMOVED***);

  // sorted list of accepted types
  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) ***REMOVED***
    return provided[priorities.indexOf(priority)];
  ***REMOVED***);
***REMOVED***

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) ***REMOVED***
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
***REMOVED***

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) ***REMOVED***
  return spec.type + '/' + spec.subtype;
***REMOVED***

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) ***REMOVED***
  return spec.q > 0;
***REMOVED***

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) ***REMOVED***
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) ***REMOVED***
    count++;
    index++;
  ***REMOVED***

  return count;
***REMOVED***

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) ***REMOVED***
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) ***REMOVED***
    key = str;
  ***REMOVED*** else ***REMOVED***
    key = str.substr(0, index);
    val = str.substr(index + 1);
  ***REMOVED***

  return [key, val];
***REMOVED***

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) ***REMOVED***
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) ***REMOVED***
    if (quoteCount(accepts[j]) % 2 == 0) ***REMOVED***
      accepts[++j] = accepts[i];
    ***REMOVED*** else ***REMOVED***
      accepts[j] += ',' + accepts[i];
    ***REMOVED***
  ***REMOVED***

  // trim accepts
  accepts.length = j + 1;

  return accepts;
***REMOVED***

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) ***REMOVED***
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) ***REMOVED***
    if (quoteCount(parameters[j]) % 2 == 0) ***REMOVED***
      parameters[++j] = parameters[i];
    ***REMOVED*** else ***REMOVED***
      parameters[j] += ';' + parameters[i];
    ***REMOVED***
  ***REMOVED***

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) ***REMOVED***
    parameters[i] = parameters[i].trim();
  ***REMOVED***

  return parameters;
***REMOVED***
