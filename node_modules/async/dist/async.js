/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () ***REMOVED***

    var async = ***REMOVED******REMOVED***;
    function noop() ***REMOVED******REMOVED***
    function identity(v) ***REMOVED***
        return v;
    ***REMOVED***
    function toBool(v) ***REMOVED***
        return !!v;
    ***REMOVED***
    function notId(v) ***REMOVED***
        return !v;
    ***REMOVED***

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global ||
            this;

    if (root != null) ***REMOVED***
        previous_async = root.async;
    ***REMOVED***

    async.noConflict = function () ***REMOVED***
        root.async = previous_async;
        return async;
    ***REMOVED***;

    function only_once(fn) ***REMOVED***
        return function() ***REMOVED***
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        ***REMOVED***;
    ***REMOVED***

    function _once(fn) ***REMOVED***
        return function() ***REMOVED***
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        ***REMOVED***;
    ***REMOVED***

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) ***REMOVED***
        return _toString.call(obj) === '[object Array]';
    ***REMOVED***;

    // Ported from underscore.js isObject
    var _isObject = function(obj) ***REMOVED***
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    ***REMOVED***;

    function _isArrayLike(arr) ***REMOVED***
        return _isArray(arr) || (
            // has a positive integer length property
            typeof arr.length === "number" &&
            arr.length >= 0 &&
            arr.length % 1 === 0
        );
    ***REMOVED***

    function _arrayEach(arr, iterator) ***REMOVED***
        var index = -1,
            length = arr.length;

        while (++index < length) ***REMOVED***
            iterator(arr[index], index, arr);
        ***REMOVED***
    ***REMOVED***

    function _map(arr, iterator) ***REMOVED***
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) ***REMOVED***
            result[index] = iterator(arr[index], index, arr);
        ***REMOVED***
        return result;
    ***REMOVED***

    function _range(count) ***REMOVED***
        return _map(Array(count), function (v, i) ***REMOVED*** return i; ***REMOVED***);
    ***REMOVED***

    function _reduce(arr, iterator, memo) ***REMOVED***
        _arrayEach(arr, function (x, i, a) ***REMOVED***
            memo = iterator(memo, x, i, a);
        ***REMOVED***);
        return memo;
    ***REMOVED***

    function _forEachOf(object, iterator) ***REMOVED***
        _arrayEach(_keys(object), function (key) ***REMOVED***
            iterator(object[key], key);
        ***REMOVED***);
    ***REMOVED***

    function _indexOf(arr, item) ***REMOVED***
        for (var i = 0; i < arr.length; i++) ***REMOVED***
            if (arr[i] === item) return i;
        ***REMOVED***
        return -1;
    ***REMOVED***

    var _keys = Object.keys || function (obj) ***REMOVED***
        var keys = [];
        for (var k in obj) ***REMOVED***
            if (obj.hasOwnProperty(k)) ***REMOVED***
                keys.push(k);
            ***REMOVED***
        ***REMOVED***
        return keys;
    ***REMOVED***;

    function _keyIterator(coll) ***REMOVED***
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) ***REMOVED***
            len = coll.length;
            return function next() ***REMOVED***
                i++;
                return i < len ? i : null;
            ***REMOVED***;
        ***REMOVED*** else ***REMOVED***
            keys = _keys(coll);
            len = keys.length;
            return function next() ***REMOVED***
                i++;
                return i < len ? keys[i] : null;
            ***REMOVED***;
        ***REMOVED***
    ***REMOVED***

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) ***REMOVED***
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() ***REMOVED***
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) ***REMOVED***
                rest[index] = arguments[index + startIndex];
            ***REMOVED***
            switch (startIndex) ***REMOVED***
                case 0: return func.call(this, rest);
                case 1: return func.call(this, arguments[0], rest);
            ***REMOVED***
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) ***REMOVED***
            //     args[index] = arguments[index];
            // ***REMOVED***
            // args[startIndex] = rest;
            // return func.apply(this, args);
        ***REMOVED***;
    ***REMOVED***

    function _withoutIndex(iterator) ***REMOVED***
        return function (value, index, callback) ***REMOVED***
            return iterator(value, callback);
        ***REMOVED***;
    ***REMOVED***

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function(fn) ***REMOVED***
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    ***REMOVED*** : function(fn) ***REMOVED***
        setTimeout(fn, 0);
    ***REMOVED***;

    if (typeof process === 'object' && typeof process.nextTick === 'function') ***REMOVED***
        async.nextTick = process.nextTick;
    ***REMOVED*** else ***REMOVED***
        async.nextTick = _delay;
    ***REMOVED***
    async.setImmediate = _setImmediate ? _delay : async.nextTick;


    async.forEach =
    async.each = function (arr, iterator, callback) ***REMOVED***
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    ***REMOVED***;

    async.forEachSeries =
    async.eachSeries = function (arr, iterator, callback) ***REMOVED***
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    ***REMOVED***;


    async.forEachLimit =
    async.eachLimit = function (arr, limit, iterator, callback) ***REMOVED***
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    ***REMOVED***;

    async.forEachOf =
    async.eachOf = function (object, iterator, callback) ***REMOVED***
        callback = _once(callback || noop);
        object = object || [];

        var iter = _keyIterator(object);
        var key, completed = 0;

        while ((key = iter()) != null) ***REMOVED***
            completed += 1;
            iterator(object[key], key, only_once(done));
        ***REMOVED***

        if (completed === 0) callback(null);

        function done(err) ***REMOVED***
            completed--;
            if (err) ***REMOVED***
                callback(err);
            ***REMOVED***
            // Check key is null in case iterator isn't exhausted
            // and done resolved synchronously.
            else if (key === null && completed <= 0) ***REMOVED***
                callback(null);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;

    async.forEachOfSeries =
    async.eachOfSeries = function (obj, iterator, callback) ***REMOVED***
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() ***REMOVED***
            var sync = true;
            if (key === null) ***REMOVED***
                return callback(null);
            ***REMOVED***
            iterator(obj[key], key, only_once(function (err) ***REMOVED***
                if (err) ***REMOVED***
                    callback(err);
                ***REMOVED***
                else ***REMOVED***
                    key = nextKey();
                    if (key === null) ***REMOVED***
                        return callback(null);
                    ***REMOVED*** else ***REMOVED***
                        if (sync) ***REMOVED***
                            async.setImmediate(iterate);
                        ***REMOVED*** else ***REMOVED***
                            iterate();
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***));
            sync = false;
        ***REMOVED***
        iterate();
    ***REMOVED***;



    async.forEachOfLimit =
    async.eachOfLimit = function (obj, limit, iterator, callback) ***REMOVED***
        _eachOfLimit(limit)(obj, iterator, callback);
    ***REMOVED***;

    function _eachOfLimit(limit) ***REMOVED***

        return function (obj, iterator, callback) ***REMOVED***
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) ***REMOVED***
                return callback(null);
            ***REMOVED***
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish () ***REMOVED***
                if (done && running <= 0) ***REMOVED***
                    return callback(null);
                ***REMOVED***

                while (running < limit && !errored) ***REMOVED***
                    var key = nextKey();
                    if (key === null) ***REMOVED***
                        done = true;
                        if (running <= 0) ***REMOVED***
                            callback(null);
                        ***REMOVED***
                        return;
                    ***REMOVED***
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) ***REMOVED***
                        running -= 1;
                        if (err) ***REMOVED***
                            callback(err);
                            errored = true;
                        ***REMOVED***
                        else ***REMOVED***
                            replenish();
                        ***REMOVED***
                    ***REMOVED***));
                ***REMOVED***
            ***REMOVED***)();
        ***REMOVED***;
    ***REMOVED***


    function doParallel(fn) ***REMOVED***
        return function (obj, iterator, callback) ***REMOVED***
            return fn(async.eachOf, obj, iterator, callback);
        ***REMOVED***;
    ***REMOVED***
    function doParallelLimit(fn) ***REMOVED***
        return function (obj, limit, iterator, callback) ***REMOVED***
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        ***REMOVED***;
    ***REMOVED***
    function doSeries(fn) ***REMOVED***
        return function (obj, iterator, callback) ***REMOVED***
            return fn(async.eachOfSeries, obj, iterator, callback);
        ***REMOVED***;
    ***REMOVED***

    function _asyncMap(eachfn, arr, iterator, callback) ***REMOVED***
        callback = _once(callback || noop);
        arr = arr || [];
        var results = _isArrayLike(arr) ? [] : ***REMOVED******REMOVED***;
        eachfn(arr, function (value, index, callback) ***REMOVED***
            iterator(value, function (err, v) ***REMOVED***
                results[index] = v;
                callback(err);
            ***REMOVED***);
        ***REMOVED***, function (err) ***REMOVED***
            callback(err, results);
        ***REMOVED***);
    ***REMOVED***

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject =
    async.foldl =
    async.reduce = function (arr, memo, iterator, callback) ***REMOVED***
        async.eachOfSeries(arr, function (x, i, callback) ***REMOVED***
            iterator(memo, x, function (err, v) ***REMOVED***
                memo = v;
                callback(err);
            ***REMOVED***);
        ***REMOVED***, function (err) ***REMOVED***
            callback(err, memo);
        ***REMOVED***);
    ***REMOVED***;

    async.foldr =
    async.reduceRight = function (arr, memo, iterator, callback) ***REMOVED***
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    ***REMOVED***;

    async.transform = function (arr, memo, iterator, callback) ***REMOVED***
        if (arguments.length === 3) ***REMOVED***
            callback = iterator;
            iterator = memo;
            memo = _isArray(arr) ? [] : ***REMOVED******REMOVED***;
        ***REMOVED***

        async.eachOf(arr, function(v, k, cb) ***REMOVED***
            iterator(memo, v, k, cb);
        ***REMOVED***, function(err) ***REMOVED***
            callback(err, memo);
        ***REMOVED***);
    ***REMOVED***;

    function _filter(eachfn, arr, iterator, callback) ***REMOVED***
        var results = [];
        eachfn(arr, function (x, index, callback) ***REMOVED***
            iterator(x, function (v) ***REMOVED***
                if (v) ***REMOVED***
                    results.push(***REMOVED***index: index, value: x***REMOVED***);
                ***REMOVED***
                callback();
            ***REMOVED***);
        ***REMOVED***, function () ***REMOVED***
            callback(_map(results.sort(function (a, b) ***REMOVED***
                return a.index - b.index;
            ***REMOVED***), function (x) ***REMOVED***
                return x.value;
            ***REMOVED***));
        ***REMOVED***);
    ***REMOVED***

    async.select =
    async.filter = doParallel(_filter);

    async.selectLimit =
    async.filterLimit = doParallelLimit(_filter);

    async.selectSeries =
    async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) ***REMOVED***
        _filter(eachfn, arr, function(value, cb) ***REMOVED***
            iterator(value, function(v) ***REMOVED***
                cb(!v);
            ***REMOVED***);
        ***REMOVED***, callback);
    ***REMOVED***
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) ***REMOVED***
        return function(arr, limit, iterator, cb) ***REMOVED***
            function done() ***REMOVED***
                if (cb) cb(getResult(false, void 0));
            ***REMOVED***
            function iteratee(x, _, callback) ***REMOVED***
                if (!cb) return callback();
                iterator(x, function (v) ***REMOVED***
                    if (cb && check(v)) ***REMOVED***
                        cb(getResult(true, x));
                        cb = iterator = false;
                    ***REMOVED***
                    callback();
                ***REMOVED***);
            ***REMOVED***
            if (arguments.length > 3) ***REMOVED***
                eachfn(arr, limit, iteratee, done);
            ***REMOVED*** else ***REMOVED***
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    async.any =
    async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all =
    async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) ***REMOVED***
        return x;
    ***REMOVED***
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) ***REMOVED***
        async.map(arr, function (x, callback) ***REMOVED***
            iterator(x, function (err, criteria) ***REMOVED***
                if (err) ***REMOVED***
                    callback(err);
                ***REMOVED***
                else ***REMOVED***
                    callback(null, ***REMOVED***value: x, criteria: criteria***REMOVED***);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***, function (err, results) ***REMOVED***
            if (err) ***REMOVED***
                return callback(err);
            ***REMOVED***
            else ***REMOVED***
                callback(null, _map(results.sort(comparator), function (x) ***REMOVED***
                    return x.value;
                ***REMOVED***));
            ***REMOVED***

        ***REMOVED***);

        function comparator(left, right) ***REMOVED***
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        ***REMOVED***
    ***REMOVED***;

    async.auto = function (tasks, concurrency, callback) ***REMOVED***
        if (typeof arguments[1] === 'function') ***REMOVED***
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        ***REMOVED***
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) ***REMOVED***
            return callback(null);
        ***REMOVED***
        if (!concurrency) ***REMOVED***
            concurrency = remainingTasks;
        ***REMOVED***

        var results = ***REMOVED******REMOVED***;
        var runningTasks = 0;

        var hasError = false;

        var listeners = [];
        function addListener(fn) ***REMOVED***
            listeners.unshift(fn);
        ***REMOVED***
        function removeListener(fn) ***REMOVED***
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        ***REMOVED***
        function taskComplete() ***REMOVED***
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) ***REMOVED***
                fn();
            ***REMOVED***);
        ***REMOVED***

        addListener(function () ***REMOVED***
            if (!remainingTasks) ***REMOVED***
                callback(null, results);
            ***REMOVED***
        ***REMOVED***);

        _arrayEach(keys, function (k) ***REMOVED***
            if (hasError) return;
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = _restParam(function(err, args) ***REMOVED***
                runningTasks--;
                if (args.length <= 1) ***REMOVED***
                    args = args[0];
                ***REMOVED***
                if (err) ***REMOVED***
                    var safeResults = ***REMOVED******REMOVED***;
                    _forEachOf(results, function(val, rkey) ***REMOVED***
                        safeResults[rkey] = val;
                    ***REMOVED***);
                    safeResults[k] = args;
                    hasError = true;

                    callback(err, safeResults);
                ***REMOVED***
                else ***REMOVED***
                    results[k] = args;
                    async.setImmediate(taskComplete);
                ***REMOVED***
            ***REMOVED***);
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) ***REMOVED***
                if (!(dep = tasks[requires[len]])) ***REMOVED***
                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                ***REMOVED***
                if (_isArray(dep) && _indexOf(dep, k) >= 0) ***REMOVED***
                    throw new Error('Has cyclic dependencies');
                ***REMOVED***
            ***REMOVED***
            function ready() ***REMOVED***
                return runningTasks < concurrency && _reduce(requires, function (a, x) ***REMOVED***
                    return (a && results.hasOwnProperty(x));
                ***REMOVED***, true) && !results.hasOwnProperty(k);
            ***REMOVED***
            if (ready()) ***REMOVED***
                runningTasks++;
                task[task.length - 1](taskCallback, results);
            ***REMOVED***
            else ***REMOVED***
                addListener(listener);
            ***REMOVED***
            function listener() ***REMOVED***
                if (ready()) ***REMOVED***
                    runningTasks++;
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;



    async.retry = function(times, task, callback) ***REMOVED***
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = ***REMOVED***
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        ***REMOVED***;

        function parseTimes(acc, t)***REMOVED***
            if(typeof t === 'number')***REMOVED***
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            ***REMOVED*** else if(typeof t === 'object')***REMOVED***
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            ***REMOVED*** else ***REMOVED***
                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
            ***REMOVED***
        ***REMOVED***

        var length = arguments.length;
        if (length < 1 || length > 3) ***REMOVED***
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        ***REMOVED*** else if (length <= 2 && typeof times === 'function') ***REMOVED***
            callback = task;
            task = times;
        ***REMOVED***
        if (typeof times !== 'function') ***REMOVED***
            parseTimes(opts, times);
        ***REMOVED***
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) ***REMOVED***
            function retryAttempt(task, finalAttempt) ***REMOVED***
                return function(seriesCallback) ***REMOVED***
                    task(function(err, result)***REMOVED***
                        seriesCallback(!err || finalAttempt, ***REMOVED***err: err, result: result***REMOVED***);
                    ***REMOVED***, wrappedResults);
                ***REMOVED***;
            ***REMOVED***

            function retryInterval(interval)***REMOVED***
                return function(seriesCallback)***REMOVED***
                    setTimeout(function()***REMOVED***
                        seriesCallback(null);
                    ***REMOVED***, interval);
                ***REMOVED***;
            ***REMOVED***

            while (opts.times) ***REMOVED***

                var finalAttempt = !(opts.times-=1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if(!finalAttempt && opts.interval > 0)***REMOVED***
                    attempts.push(retryInterval(opts.interval));
                ***REMOVED***
            ***REMOVED***

            async.series(attempts, function(done, data)***REMOVED***
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            ***REMOVED***);
        ***REMOVED***

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    ***REMOVED***;

    async.waterfall = function (tasks, callback) ***REMOVED***
        callback = _once(callback || noop);
        if (!_isArray(tasks)) ***REMOVED***
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        ***REMOVED***
        if (!tasks.length) ***REMOVED***
            return callback();
        ***REMOVED***
        function wrapIterator(iterator) ***REMOVED***
            return _restParam(function (err, args) ***REMOVED***
                if (err) ***REMOVED***
                    callback.apply(null, [err].concat(args));
                ***REMOVED***
                else ***REMOVED***
                    var next = iterator.next();
                    if (next) ***REMOVED***
                        args.push(wrapIterator(next));
                    ***REMOVED***
                    else ***REMOVED***
                        args.push(callback);
                    ***REMOVED***
                    ensureAsync(iterator).apply(null, args);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***
        wrapIterator(async.iterator(tasks))();
    ***REMOVED***;

    function _parallel(eachfn, tasks, callback) ***REMOVED***
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : ***REMOVED******REMOVED***;

        eachfn(tasks, function (task, key, callback) ***REMOVED***
            task(_restParam(function (err, args) ***REMOVED***
                if (args.length <= 1) ***REMOVED***
                    args = args[0];
                ***REMOVED***
                results[key] = args;
                callback(err);
            ***REMOVED***));
        ***REMOVED***, function (err) ***REMOVED***
            callback(err, results);
        ***REMOVED***);
    ***REMOVED***

    async.parallel = function (tasks, callback) ***REMOVED***
        _parallel(async.eachOf, tasks, callback);
    ***REMOVED***;

    async.parallelLimit = function(tasks, limit, callback) ***REMOVED***
        _parallel(_eachOfLimit(limit), tasks, callback);
    ***REMOVED***;

    async.series = function(tasks, callback) ***REMOVED***
        _parallel(async.eachOfSeries, tasks, callback);
    ***REMOVED***;

    async.iterator = function (tasks) ***REMOVED***
        function makeCallback(index) ***REMOVED***
            function fn() ***REMOVED***
                if (tasks.length) ***REMOVED***
                    tasks[index].apply(null, arguments);
                ***REMOVED***
                return fn.next();
            ***REMOVED***
            fn.next = function () ***REMOVED***
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            ***REMOVED***;
            return fn;
        ***REMOVED***
        return makeCallback(0);
    ***REMOVED***;

    async.apply = _restParam(function (fn, args) ***REMOVED***
        return _restParam(function (callArgs) ***REMOVED***
            return fn.apply(
                null, args.concat(callArgs)
            );
        ***REMOVED***);
    ***REMOVED***);

    function _concat(eachfn, arr, fn, callback) ***REMOVED***
        var result = [];
        eachfn(arr, function (x, index, cb) ***REMOVED***
            fn(x, function (err, y) ***REMOVED***
                result = result.concat(y || []);
                cb(err);
            ***REMOVED***);
        ***REMOVED***, function (err) ***REMOVED***
            callback(err, result);
        ***REMOVED***);
    ***REMOVED***
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) ***REMOVED***
        callback = callback || noop;
        if (test()) ***REMOVED***
            var next = _restParam(function(err, args) ***REMOVED***
                if (err) ***REMOVED***
                    callback(err);
                ***REMOVED*** else if (test.apply(this, args)) ***REMOVED***
                    iterator(next);
                ***REMOVED*** else ***REMOVED***
                    callback.apply(null, [null].concat(args));
                ***REMOVED***
            ***REMOVED***);
            iterator(next);
        ***REMOVED*** else ***REMOVED***
            callback(null);
        ***REMOVED***
    ***REMOVED***;

    async.doWhilst = function (iterator, test, callback) ***REMOVED***
        var calls = 0;
        return async.whilst(function() ***REMOVED***
            return ++calls <= 1 || test.apply(this, arguments);
        ***REMOVED***, iterator, callback);
    ***REMOVED***;

    async.until = function (test, iterator, callback) ***REMOVED***
        return async.whilst(function() ***REMOVED***
            return !test.apply(this, arguments);
        ***REMOVED***, iterator, callback);
    ***REMOVED***;

    async.doUntil = function (iterator, test, callback) ***REMOVED***
        return async.doWhilst(iterator, function() ***REMOVED***
            return !test.apply(this, arguments);
        ***REMOVED***, callback);
    ***REMOVED***;

    async.during = function (test, iterator, callback) ***REMOVED***
        callback = callback || noop;

        var next = _restParam(function(err, args) ***REMOVED***
            if (err) ***REMOVED***
                callback(err);
            ***REMOVED*** else ***REMOVED***
                args.push(check);
                test.apply(this, args);
            ***REMOVED***
        ***REMOVED***);

        var check = function(err, truth) ***REMOVED***
            if (err) ***REMOVED***
                callback(err);
            ***REMOVED*** else if (truth) ***REMOVED***
                iterator(next);
            ***REMOVED*** else ***REMOVED***
                callback(null);
            ***REMOVED***
        ***REMOVED***;

        test(check);
    ***REMOVED***;

    async.doDuring = function (iterator, test, callback) ***REMOVED***
        var calls = 0;
        async.during(function(next) ***REMOVED***
            if (calls++ < 1) ***REMOVED***
                next(null, true);
            ***REMOVED*** else ***REMOVED***
                test.apply(this, arguments);
            ***REMOVED***
        ***REMOVED***, iterator, callback);
    ***REMOVED***;

    function _queue(worker, concurrency, payload) ***REMOVED***
        if (concurrency == null) ***REMOVED***
            concurrency = 1;
        ***REMOVED***
        else if(concurrency === 0) ***REMOVED***
            throw new Error('Concurrency must not be zero');
        ***REMOVED***
        function _insert(q, data, pos, callback) ***REMOVED***
            if (callback != null && typeof callback !== "function") ***REMOVED***
                throw new Error("task callback must be a function");
            ***REMOVED***
            q.started = true;
            if (!_isArray(data)) ***REMOVED***
                data = [data];
            ***REMOVED***
            if(data.length === 0 && q.idle()) ***REMOVED***
                // call drain immediately if there are no tasks
                return async.setImmediate(function() ***REMOVED***
                    q.drain();
                ***REMOVED***);
            ***REMOVED***
            _arrayEach(data, function(task) ***REMOVED***
                var item = ***REMOVED***
                    data: task,
                    callback: callback || noop
                ***REMOVED***;

                if (pos) ***REMOVED***
                    q.tasks.unshift(item);
                ***REMOVED*** else ***REMOVED***
                    q.tasks.push(item);
                ***REMOVED***

                if (q.tasks.length === q.concurrency) ***REMOVED***
                    q.saturated();
                ***REMOVED***
            ***REMOVED***);
            async.setImmediate(q.process);
        ***REMOVED***
        function _next(q, tasks) ***REMOVED***
            return function()***REMOVED***
                workers -= 1;

                var removed = false;
                var args = arguments;
                _arrayEach(tasks, function (task) ***REMOVED***
                    _arrayEach(workersList, function (worker, index) ***REMOVED***
                        if (worker === task && !removed) ***REMOVED***
                            workersList.splice(index, 1);
                            removed = true;
                        ***REMOVED***
                    ***REMOVED***);

                    task.callback.apply(task, args);
                ***REMOVED***);
                if (q.tasks.length + workers === 0) ***REMOVED***
                    q.drain();
                ***REMOVED***
                q.process();
            ***REMOVED***;
        ***REMOVED***

        var workers = 0;
        var workersList = [];
        var q = ***REMOVED***
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function (data, callback) ***REMOVED***
                _insert(q, data, false, callback);
            ***REMOVED***,
            kill: function () ***REMOVED***
                q.drain = noop;
                q.tasks = [];
            ***REMOVED***,
            unshift: function (data, callback) ***REMOVED***
                _insert(q, data, true, callback);
            ***REMOVED***,
            process: function () ***REMOVED***
                while(!q.paused && workers < q.concurrency && q.tasks.length)***REMOVED***

                    var tasks = q.payload ?
                        q.tasks.splice(0, q.payload) :
                        q.tasks.splice(0, q.tasks.length);

                    var data = _map(tasks, function (task) ***REMOVED***
                        return task.data;
                    ***REMOVED***);

                    if (q.tasks.length === 0) ***REMOVED***
                        q.empty();
                    ***REMOVED***
                    workers += 1;
                    workersList.push(tasks[0]);
                    var cb = only_once(_next(q, tasks));
                    worker(data, cb);
                ***REMOVED***
            ***REMOVED***,
            length: function () ***REMOVED***
                return q.tasks.length;
            ***REMOVED***,
            running: function () ***REMOVED***
                return workers;
            ***REMOVED***,
            workersList: function () ***REMOVED***
                return workersList;
            ***REMOVED***,
            idle: function() ***REMOVED***
                return q.tasks.length + workers === 0;
            ***REMOVED***,
            pause: function () ***REMOVED***
                q.paused = true;
            ***REMOVED***,
            resume: function () ***REMOVED***
                if (q.paused === false) ***REMOVED*** return; ***REMOVED***
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) ***REMOVED***
                    async.setImmediate(q.process);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
        return q;
    ***REMOVED***

    async.queue = function (worker, concurrency) ***REMOVED***
        var q = _queue(function (items, cb) ***REMOVED***
            worker(items[0], cb);
        ***REMOVED***, concurrency, 1);

        return q;
    ***REMOVED***;

    async.priorityQueue = function (worker, concurrency) ***REMOVED***

        function _compareTasks(a, b)***REMOVED***
            return a.priority - b.priority;
        ***REMOVED***

        function _binarySearch(sequence, item, compare) ***REMOVED***
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) ***REMOVED***
                var mid = beg + ((end - beg + 1) >>> 1);
                if (compare(item, sequence[mid]) >= 0) ***REMOVED***
                    beg = mid;
                ***REMOVED*** else ***REMOVED***
                    end = mid - 1;
                ***REMOVED***
            ***REMOVED***
            return beg;
        ***REMOVED***

        function _insert(q, data, priority, callback) ***REMOVED***
            if (callback != null && typeof callback !== "function") ***REMOVED***
                throw new Error("task callback must be a function");
            ***REMOVED***
            q.started = true;
            if (!_isArray(data)) ***REMOVED***
                data = [data];
            ***REMOVED***
            if(data.length === 0) ***REMOVED***
                // call drain immediately if there are no tasks
                return async.setImmediate(function() ***REMOVED***
                    q.drain();
                ***REMOVED***);
            ***REMOVED***
            _arrayEach(data, function(task) ***REMOVED***
                var item = ***REMOVED***
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                ***REMOVED***;

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) ***REMOVED***
                    q.saturated();
                ***REMOVED***
                async.setImmediate(q.process);
            ***REMOVED***);
        ***REMOVED***

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) ***REMOVED***
            _insert(q, data, priority, callback);
        ***REMOVED***;

        // Remove unshift function
        delete q.unshift;

        return q;
    ***REMOVED***;

    async.cargo = function (worker, payload) ***REMOVED***
        return _queue(worker, 1, payload);
    ***REMOVED***;

    function _console_fn(name) ***REMOVED***
        return _restParam(function (fn, args) ***REMOVED***
            fn.apply(null, args.concat([_restParam(function (err, args) ***REMOVED***
                if (typeof console === 'object') ***REMOVED***
                    if (err) ***REMOVED***
                        if (console.error) ***REMOVED***
                            console.error(err);
                        ***REMOVED***
                    ***REMOVED***
                    else if (console[name]) ***REMOVED***
                        _arrayEach(args, function (x) ***REMOVED***
                            console[name](x);
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***)]));
        ***REMOVED***);
    ***REMOVED***
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) ***REMOVED***
        var memo = ***REMOVED******REMOVED***;
        var queues = ***REMOVED******REMOVED***;
        var has = Object.prototype.hasOwnProperty;
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) ***REMOVED***
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (has.call(memo, key)) ***REMOVED***   
                async.setImmediate(function () ***REMOVED***
                    callback.apply(null, memo[key]);
                ***REMOVED***);
            ***REMOVED***
            else if (has.call(queues, key)) ***REMOVED***
                queues[key].push(callback);
            ***REMOVED***
            else ***REMOVED***
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) ***REMOVED***
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) ***REMOVED***
                        q[i].apply(null, args);
                    ***REMOVED***
                ***REMOVED***)]));
            ***REMOVED***
        ***REMOVED***);
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    ***REMOVED***;

    async.unmemoize = function (fn) ***REMOVED***
        return function () ***REMOVED***
            return (fn.unmemoized || fn).apply(null, arguments);
        ***REMOVED***;
    ***REMOVED***;

    function _times(mapper) ***REMOVED***
        return function (count, iterator, callback) ***REMOVED***
            mapper(_range(count), iterator, callback);
        ***REMOVED***;
    ***REMOVED***

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) ***REMOVED***
        return async.mapLimit(_range(count), limit, iterator, callback);
    ***REMOVED***;

    async.seq = function (/* functions... */) ***REMOVED***
        var fns = arguments;
        return _restParam(function (args) ***REMOVED***
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') ***REMOVED***
                args.pop();
            ***REMOVED*** else ***REMOVED***
                callback = noop;
            ***REMOVED***

            async.reduce(fns, args, function (newargs, fn, cb) ***REMOVED***
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) ***REMOVED***
                    cb(err, nextargs);
                ***REMOVED***)]));
            ***REMOVED***,
            function (err, results) ***REMOVED***
                callback.apply(that, [err].concat(results));
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;

    async.compose = function (/* functions... */) ***REMOVED***
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    ***REMOVED***;


    function _applyEach(eachfn) ***REMOVED***
        return _restParam(function(fns, args) ***REMOVED***
            var go = _restParam(function(args) ***REMOVED***
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) ***REMOVED***
                    fn.apply(that, args.concat([cb]));
                ***REMOVED***,
                callback);
            ***REMOVED***);
            if (args.length) ***REMOVED***
                return go.apply(this, args);
            ***REMOVED***
            else ***REMOVED***
                return go;
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);


    async.forever = function (fn, callback) ***REMOVED***
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) ***REMOVED***
            if (err) ***REMOVED***
                return done(err);
            ***REMOVED***
            task(next);
        ***REMOVED***
        next();
    ***REMOVED***;

    function ensureAsync(fn) ***REMOVED***
        return _restParam(function (args) ***REMOVED***
            var callback = args.pop();
            args.push(function () ***REMOVED***
                var innerArgs = arguments;
                if (sync) ***REMOVED***
                    async.setImmediate(function () ***REMOVED***
                        callback.apply(null, innerArgs);
                    ***REMOVED***);
                ***REMOVED*** else ***REMOVED***
                    callback.apply(null, innerArgs);
                ***REMOVED***
            ***REMOVED***);
            var sync = true;
            fn.apply(this, args);
            sync = false;
        ***REMOVED***);
    ***REMOVED***

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function(values) ***REMOVED***
        var args = [null].concat(values);
        return function (callback) ***REMOVED***
            return callback.apply(this, args);
        ***REMOVED***;
    ***REMOVED***);

    async.wrapSync =
    async.asyncify = function asyncify(func) ***REMOVED***
        return _restParam(function (args) ***REMOVED***
            var callback = args.pop();
            var result;
            try ***REMOVED***
                result = func.apply(this, args);
            ***REMOVED*** catch (e) ***REMOVED***
                return callback(e);
            ***REMOVED***
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") ***REMOVED***
                result.then(function(value) ***REMOVED***
                    callback(null, value);
                ***REMOVED***)["catch"](function(err) ***REMOVED***
                    callback(err.message ? err : new Error(err));
                ***REMOVED***);
            ***REMOVED*** else ***REMOVED***
                callback(null, result);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;

    // Node.js
    if (typeof module === 'object' && module.exports) ***REMOVED***
        module.exports = async;
    ***REMOVED***
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) ***REMOVED***
        define([], function () ***REMOVED***
            return async;
        ***REMOVED***);
    ***REMOVED***
    // included directly via <script> tag
    else ***REMOVED***
        root.async = async;
    ***REMOVED***

***REMOVED***());
