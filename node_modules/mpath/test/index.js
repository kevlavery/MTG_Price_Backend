
/**
 * Test dependencies.
 */

var mpath = require('../')
var assert = require('assert')

/**
 * logging helper
 */

function log (o) ***REMOVED***
  console.log();
  console.log(require('util').inspect(o, false, 1000));
***REMOVED***

/**
 * special path for override tests
 */

var special = '_doc';

/**
 * Tests
 */

describe('mpath', function()***REMOVED***

  /**
   * test doc creator
   */

  function doc () ***REMOVED***
    var o = ***REMOVED*** first: ***REMOVED*** second: ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED******REMOVED******REMOVED***;
    o.comments = [
        ***REMOVED*** name: 'one' ***REMOVED***
      , ***REMOVED*** name: 'two', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***
      , ***REMOVED*** name: 'three'
          , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
          , _doc: ***REMOVED*** name: '3', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]  ***REMOVED******REMOVED***
    ];
    o.name = 'jiro';
    o.array = [
        ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: [4,6,8]***REMOVED******REMOVED***, ***REMOVED*** y: 10***REMOVED*** ] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: [1,2,3]***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***z: 10 ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***b: 'hi'***REMOVED******REMOVED***] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: null ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED*** b: [null, 1]***REMOVED******REMOVED***] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: null ***REMOVED***] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***y: 3 ***REMOVED***] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** array: [3, 0, null] ***REMOVED******REMOVED***
      , ***REMOVED*** o: ***REMOVED*** name: 'ha' ***REMOVED******REMOVED***
    ];
    o.arr = [
        ***REMOVED*** arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
      , ***REMOVED*** yep: true ***REMOVED***
    ]
    return o;
  ***REMOVED***

  describe('get', function()***REMOVED***
    var o = doc();

    it('`path` must be a string or array', function(done)***REMOVED***
      assert.throws(function () ***REMOVED***
        mpath.get(***REMOVED******REMOVED***, o);
      ***REMOVED***, /Must be either string or array/);
      assert.throws(function () ***REMOVED***
        mpath.get(4, o);
      ***REMOVED***, /Must be either string or array/);
      assert.throws(function () ***REMOVED***
        mpath.get(function()***REMOVED******REMOVED***, o);
      ***REMOVED***, /Must be either string or array/);
      assert.throws(function () ***REMOVED***
        mpath.get(/asdf/, o);
      ***REMOVED***, /Must be either string or array/);
      assert.throws(function () ***REMOVED***
        mpath.get(Math, o);
      ***REMOVED***, /Must be either string or array/);
      assert.throws(function () ***REMOVED***
        mpath.get(Buffer, o);
      ***REMOVED***, /Must be either string or array/);
      assert.doesNotThrow(function () ***REMOVED***
        mpath.get('string', o);
      ***REMOVED***);
      assert.doesNotThrow(function () ***REMOVED***
        mpath.get([], o);
      ***REMOVED***);
      done();
    ***REMOVED***)

    describe('without `special`', function()***REMOVED***
      it('works', function(done)***REMOVED***
        assert.equal('jiro', mpath.get('name', o));

        assert.deepEqual(
          ***REMOVED*** second: ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED******REMOVED***
          , mpath.get('first', o)
        );

        assert.deepEqual(
          ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED***
          , mpath.get('first.second', o)
        );

        assert.deepEqual(
          [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9]
          , mpath.get('first.second.third', o)
        );

        assert.deepEqual(
          3
          , mpath.get('first.second.third.0', o)
        );

        assert.deepEqual(
          9
          , mpath.get('first.second.third.2', o)
        );

        assert.deepEqual(
          ***REMOVED*** name: 'aaron' ***REMOVED***
          , mpath.get('first.second.third.1', o)
        );

        assert.deepEqual(
          'aaron'
          , mpath.get('first.second.third.1.name', o)
        );

        assert.deepEqual([
            ***REMOVED*** name: 'one' ***REMOVED***
          , ***REMOVED*** name: 'two', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***
          , ***REMOVED*** name: 'three'
            , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
            , _doc: ***REMOVED*** name: '3', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]***REMOVED******REMOVED***],
          mpath.get('comments', o));

        assert.deepEqual(***REMOVED*** name: 'one' ***REMOVED***, mpath.get('comments.0', o));
        assert.deepEqual('one', mpath.get('comments.0.name', o));
        assert.deepEqual('two', mpath.get('comments.1.name', o));
        assert.deepEqual('three', mpath.get('comments.2.name', o));

        assert.deepEqual([***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
            , mpath.get('comments.2.comments', o));

        assert.deepEqual(***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***
            , mpath.get('comments.2.comments.1', o));

        assert.deepEqual('twoo', mpath.get('comments.2.comments.1.comments.0.val', o));

        done();
      ***REMOVED***)

      it('handles array.property dot-notation', function(done)***REMOVED***
        assert.deepEqual(
            ['one', 'two', 'three']
          , mpath.get('comments.name', o)
        );
        done();
      ***REMOVED***)

      it('handles array.array notation', function(done)***REMOVED***
        assert.deepEqual(
            [undefined, undefined, [***REMOVED******REMOVED***, ***REMOVED***comments:[***REMOVED***val:'twoo'***REMOVED***]***REMOVED***]]
          , mpath.get('comments.comments', o)
        );
        done();
      ***REMOVED***)

      it('handles prop.prop.prop.arrayProperty notation', function(done)***REMOVED***
        assert.deepEqual(
          [undefined, 'aaron', undefined]
          , mpath.get('first.second.third.name', o)
        );
        assert.deepEqual(
          [1, 'aaron', 1]
          , mpath.get('first.second.third.name', o, function (v) ***REMOVED***
            return undefined === v ? 1 : v;
          ***REMOVED***)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array', function(done)***REMOVED***
        assert.deepEqual(
            [ [***REMOVED***x: ***REMOVED***b: [4,6,8]***REMOVED******REMOVED***, ***REMOVED*** y: 10***REMOVED*** ]
            , [***REMOVED***x: ***REMOVED***b: [1,2,3]***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***z: 10 ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***b: 'hi'***REMOVED******REMOVED***]
            , [***REMOVED***x: ***REMOVED***b: null ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED*** b: [null, 1]***REMOVED******REMOVED***]
            , [***REMOVED***x: null ***REMOVED***]
            , [***REMOVED***y: 3 ***REMOVED***]
            , [3, 0, null]
            , undefined
            ]
          , mpath.get('array.o.array', o)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array.index', function(done)***REMOVED***
        assert.deepEqual(
            [ ***REMOVED***x: ***REMOVED***b: [4,6,8]***REMOVED******REMOVED***
            , ***REMOVED***x: ***REMOVED***b: [1,2,3]***REMOVED******REMOVED***
            , ***REMOVED***x: ***REMOVED***b: null ***REMOVED******REMOVED***
            , ***REMOVED***x: null ***REMOVED***
            , ***REMOVED***y: 3 ***REMOVED***
            , 3
            , undefined
            ]
          , mpath.get('array.o.array.0', o)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array.index.prop', function(done)***REMOVED***
        assert.deepEqual(
            [ ***REMOVED***b: [4,6,8]***REMOVED***
            , ***REMOVED***b: [1,2,3]***REMOVED***
            , ***REMOVED***b: null ***REMOVED***
            , null
            , undefined
            , undefined
            , undefined
            ]
          , mpath.get('array.o.array.0.x', o)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array.prop', function(done)***REMOVED***
        assert.deepEqual(
            [ [undefined, 10 ]
            , [undefined, undefined, undefined]
            , [undefined, undefined]
            , [undefined]
            , [3]
            , [undefined, undefined, undefined]
            , undefined
            ]
          , mpath.get('array.o.array.y', o)
        );
        assert.deepEqual(
            [ [***REMOVED***b: [4,6,8]***REMOVED***, undefined]
            , [***REMOVED***b: [1,2,3]***REMOVED***,  ***REMOVED***z: 10 ***REMOVED***, ***REMOVED***b: 'hi'***REMOVED***]
            , [***REMOVED***b: null ***REMOVED***, ***REMOVED*** b: [null, 1]***REMOVED***]
            , [null]
            , [undefined]
            , [undefined, undefined, undefined]
            , undefined
            ]
          , mpath.get('array.o.array.x', o)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array.prop.prop', function(done)***REMOVED***
        assert.deepEqual(
            [ [[4,6,8], undefined]
            , [[1,2,3], undefined, 'hi']
            , [null, [null, 1]]
            , [null]
            , [undefined]
            , [undefined, undefined, undefined]
            , undefined
            ]
          , mpath.get('array.o.array.x.b', o)
        );
        done();
      ***REMOVED***)

      it('handles array.prop.array.prop.prop.index', function(done)***REMOVED***
        assert.deepEqual(
            [ [6, undefined]
            , [2, undefined, 'i'] // undocumented feature (string indexing)
            , [null, 1]
            , [null]
            , [undefined]
            , [undefined, undefined, undefined]
            , undefined
            ]
          , mpath.get('array.o.array.x.b.1', o)
        );
        assert.deepEqual(
            [ [6, 0]
            , [2, 0, 'i'] // undocumented feature (string indexing)
            , [null, 1]
            , [null]
            , [0]
            , [0, 0, 0]
            , 0
            ]
          , mpath.get('array.o.array.x.b.1', o, function (v) ***REMOVED***
            return undefined === v ? 0 : v;
          ***REMOVED***)
        );
        done();
      ***REMOVED***)

      it('handles array.index.prop.prop', function(done)***REMOVED***
        assert.deepEqual(
            [***REMOVED***x: ***REMOVED***b: [1,2,3]***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***z: 10 ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***b: 'hi'***REMOVED******REMOVED***]
          , mpath.get('array.1.o.array', o)
        );
        assert.deepEqual(
            ['hi','hi','hi']
          , mpath.get('array.1.o.array', o, function (v) ***REMOVED***
            if (Array.isArray(v)) ***REMOVED***
              return v.map(function (val) ***REMOVED***
                return 'hi';
              ***REMOVED***)
            ***REMOVED***
            return v;
          ***REMOVED***)
        );
        done();
      ***REMOVED***)

      it('handles array.array.index', function(done)***REMOVED***
        assert.deepEqual(
            [***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, undefined]
          , mpath.get('arr.arr.1', o)
        );
        assert.deepEqual(
            ['woot', undefined]
          , mpath.get('arr.arr.1', o, function (v) ***REMOVED***
            if (v && v.a && v.a.c) return 'woot';
            return v;
          ***REMOVED***)
        );
        done();
      ***REMOVED***)

      it('handles array.array.index.prop', function(done)***REMOVED***
        assert.deepEqual(
            [***REMOVED*** c: 48 ***REMOVED***, 'woot']
          , mpath.get('arr.arr.1.a', o, function (v) ***REMOVED***
            if (undefined === v) return 'woot';
            return v;
          ***REMOVED***)
        );
        assert.deepEqual(
            [***REMOVED*** c: 48 ***REMOVED***, undefined]
          , mpath.get('arr.arr.1.a', o)
        );
        mpath.set('arr.arr.1.a', [***REMOVED***c:49***REMOVED***,undefined], o)
        assert.deepEqual(
            [***REMOVED*** c: 49 ***REMOVED***, undefined]
          , mpath.get('arr.arr.1.a', o)
        );
        mpath.set('arr.arr.1.a', [***REMOVED***c:48***REMOVED***,undefined], o)
        done();
      ***REMOVED***)

      it('handles array.array.index.prop.prop', function(done)***REMOVED***
        assert.deepEqual(
            [48, undefined]
          , mpath.get('arr.arr.1.a.c', o)
        );
        assert.deepEqual(
            [48, 'woot']
          , mpath.get('arr.arr.1.a.c', o, function (v) ***REMOVED***
            if (undefined === v) return 'woot';
            return v;
          ***REMOVED***)
        );
        done();
      ***REMOVED***)

    ***REMOVED***)

    describe('with `special`', function()***REMOVED***
      describe('that is a string', function()***REMOVED***
        it('works', function(done)***REMOVED***
          assert.equal('jiro', mpath.get('name', o, special));

          assert.deepEqual(
            ***REMOVED*** second: ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED******REMOVED***
            , mpath.get('first', o, special)
          );

          assert.deepEqual(
            ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED***
            , mpath.get('first.second', o, special)
          );

          assert.deepEqual(
            [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9]
            , mpath.get('first.second.third', o, special)
          );

          assert.deepEqual(
            3
            , mpath.get('first.second.third.0', o, special)
          );

          assert.deepEqual(
            4
            , mpath.get('first.second.third.0', o, special, function (v) ***REMOVED***
              return 3 === v ? 4 : v;
            ***REMOVED***)
          );

          assert.deepEqual(
            9
            , mpath.get('first.second.third.2', o, special)
          );

          assert.deepEqual(
            ***REMOVED*** name: 'aaron' ***REMOVED***
            , mpath.get('first.second.third.1', o, special)
          );

          assert.deepEqual(
            'aaron'
            , mpath.get('first.second.third.1.name', o, special)
          );

          assert.deepEqual([
              ***REMOVED*** name: 'one' ***REMOVED***
            , ***REMOVED*** name: 'two', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***
            , ***REMOVED*** name: 'three'
              , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
              , _doc: ***REMOVED*** name: '3', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]***REMOVED******REMOVED***],
            mpath.get('comments', o, special));

          assert.deepEqual(***REMOVED*** name: 'one' ***REMOVED***, mpath.get('comments.0', o, special));
          assert.deepEqual('one', mpath.get('comments.0.name', o, special));
          assert.deepEqual('2', mpath.get('comments.1.name', o, special));
          assert.deepEqual('3', mpath.get('comments.2.name', o, special));
          assert.deepEqual('nice', mpath.get('comments.2.name', o, special, function (v) ***REMOVED***
            return '3' === v ? 'nice' : v;
          ***REMOVED***));

          assert.deepEqual([***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]
              , mpath.get('comments.2.comments', o, special));

          assert.deepEqual(***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED***val: 2***REMOVED***]***REMOVED******REMOVED***
              , mpath.get('comments.2.comments.1', o, special));

          assert.deepEqual(2, mpath.get('comments.2.comments.1.comments.0.val', o, special));
          done();
        ***REMOVED***)

        it('handles array.property dot-notation', function(done)***REMOVED***
          assert.deepEqual(
            ['one', '2', '3']
            , mpath.get('comments.name', o, special)
          );
          assert.deepEqual(
            ['one', 2, '3']
            , mpath.get('comments.name', o, special, function (v) ***REMOVED***
              return '2' === v ? 2 : v
            ***REMOVED***)
          );
          done();
        ***REMOVED***)

        it('handles array.array notation', function(done)***REMOVED***
          assert.deepEqual(
              [undefined, undefined, [***REMOVED******REMOVED***, ***REMOVED***_doc: ***REMOVED*** comments:[***REMOVED***val:2***REMOVED***]***REMOVED******REMOVED***]]
            , mpath.get('comments.comments', o, special)
          );
          done();
        ***REMOVED***)

        it('handles array.array.index.array', function(done)***REMOVED***
          assert.deepEqual(
              [undefined, undefined, [***REMOVED***val:2***REMOVED***]]
            , mpath.get('comments.comments.1.comments', o, special)
          );
          done();
        ***REMOVED***)

        it('handles array.array.index.array.prop', function(done)***REMOVED***
          assert.deepEqual(
              [undefined, undefined, [2]]
            , mpath.get('comments.comments.1.comments.val', o, special)
          );
          assert.deepEqual(
              ['nil', 'nil', [2]]
            , mpath.get('comments.comments.1.comments.val', o, special, function (v) ***REMOVED***
              return undefined === v ? 'nil' : v;
            ***REMOVED***)
          );
          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('that is a function', function()***REMOVED***
        var special = function (obj, key) ***REMOVED***
          return obj[key]
        ***REMOVED***

        it('works', function(done)***REMOVED***
          assert.equal('jiro', mpath.get('name', o, special));

          assert.deepEqual(
            ***REMOVED*** second: ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED******REMOVED***
            , mpath.get('first', o, special)
          );

          assert.deepEqual(
            ***REMOVED*** third: [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9] ***REMOVED***
            , mpath.get('first.second', o, special)
          );

          assert.deepEqual(
            [3,***REMOVED*** name: 'aaron' ***REMOVED***, 9]
            , mpath.get('first.second.third', o, special)
          );

          assert.deepEqual(
            3
            , mpath.get('first.second.third.0', o, special)
          );

          assert.deepEqual(
            4
            , mpath.get('first.second.third.0', o, special, function (v) ***REMOVED***
              return 3 === v ? 4 : v;
            ***REMOVED***)
          );

          assert.deepEqual(
            9
            , mpath.get('first.second.third.2', o, special)
          );

          assert.deepEqual(
            ***REMOVED*** name: 'aaron' ***REMOVED***
            , mpath.get('first.second.third.1', o, special)
          );

          assert.deepEqual(
            'aaron'
            , mpath.get('first.second.third.1.name', o, special)
          );

          assert.deepEqual([
              ***REMOVED*** name: 'one' ***REMOVED***
            , ***REMOVED*** name: 'two', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***
            , ***REMOVED*** name: 'three'
              , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
              , _doc: ***REMOVED*** name: '3', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]***REMOVED******REMOVED***],
            mpath.get('comments', o, special));

          assert.deepEqual(***REMOVED*** name: 'one' ***REMOVED***, mpath.get('comments.0', o, special));
          assert.deepEqual('one', mpath.get('comments.0.name', o, special));
          assert.deepEqual('two', mpath.get('comments.1.name', o, special));
          assert.deepEqual('three', mpath.get('comments.2.name', o, special));
          assert.deepEqual('nice', mpath.get('comments.2.name', o, special, function (v) ***REMOVED***
            return 'three' === v ? 'nice' : v;
          ***REMOVED***));

          assert.deepEqual([***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED*** val: 'twoo' ***REMOVED***] ***REMOVED***]
              , mpath.get('comments.2.comments', o, special));

          assert.deepEqual(***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***
              , mpath.get('comments.2.comments.1', o, special));

          assert.deepEqual('twoo', mpath.get('comments.2.comments.1.comments.0.val', o, special));

          var overide = false;
          assert.deepEqual('twoo', mpath.get('comments.8.comments.1.comments.0.val', o, function (obj, path) ***REMOVED***
            if (Array.isArray(obj) && 8 == path) ***REMOVED***
              overide = true;
              return obj[2];
            ***REMOVED***
            return obj[path];
          ***REMOVED***));
          assert.ok(overide);

          done();
        ***REMOVED***)

        it('in combination with map', function(done)***REMOVED***
          var special = function (obj, key) ***REMOVED***
            if (Array.isArray(obj)) return obj[key];
            return obj.mpath;
          ***REMOVED***
          var map = function (val) ***REMOVED***
            return 'convert' == val
              ? 'mpath'
              : val;
          ***REMOVED***
          var o = ***REMOVED*** mpath: [***REMOVED*** mpath: 'converse' ***REMOVED***, ***REMOVED*** mpath: 'convert' ***REMOVED***] ***REMOVED***

          assert.equal('mpath', mpath.get('something.1.kewl', o, special, map));
          done();
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***)

  describe('set', function()***REMOVED***
    describe('without `special`', function()***REMOVED***
      var o = doc();

      it('works', function(done)***REMOVED***
        mpath.set('name', 'a new val', o, function (v) ***REMOVED***
          return 'a new val' === v ? 'changed' : v;
        ***REMOVED***);
        assert.deepEqual('changed', o.name);

        mpath.set('name', 'changed', o);
        assert.deepEqual('changed', o.name);

        mpath.set('first.second.third', [1,***REMOVED***name:'x'***REMOVED***,9], o);
        assert.deepEqual([1,***REMOVED***name:'x'***REMOVED***,9], o.first.second.third);

        mpath.set('first.second.third.1.name', 'y', o)
        assert.deepEqual([1,***REMOVED***name:'y'***REMOVED***,9], o.first.second.third);

        mpath.set('comments.1.name', 'ttwwoo', o);
        assert.deepEqual(***REMOVED*** name: 'ttwwoo', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***, o.comments[1]);

        mpath.set('comments.2.comments.1.comments.0.expand', 'added', o);
        assert.deepEqual(
            ***REMOVED*** val: 'twoo', expand: 'added'***REMOVED***
          , o.comments[2].comments[1].comments[0]);

        mpath.set('comments.2.comments.1.comments.2', 'added', o);
        assert.equal(3, o.comments[2].comments[1].comments.length);
        assert.deepEqual(
            ***REMOVED*** val: 'twoo', expand: 'added'***REMOVED***
          , o.comments[2].comments[1].comments[0]);
        assert.deepEqual(
            undefined
          , o.comments[2].comments[1].comments[1]);
        assert.deepEqual(
            'added'
          , o.comments[2].comments[1].comments[2]);

        done();
      ***REMOVED***)

      describe('array.path', function()***REMOVED***
        describe('with single non-array value', function()***REMOVED***
          it('works', function(done)***REMOVED***
            mpath.set('arr.yep', false, o, function (v) ***REMOVED***
              return false === v ? true: v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: true, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true ***REMOVED***
            ], o.arr);

            mpath.set('arr.yep', false, o);

            assert.deepEqual([
              ***REMOVED*** yep: false, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: false ***REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
        describe('with array of values', function()***REMOVED***
          it('that are equal in length', function(done)***REMOVED***
            mpath.set('arr.yep', ['one',2], o, function (v) ***REMOVED***
              return 'one' === v ? 1 : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 1, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 2 ***REMOVED***
            ], o.arr);
            mpath.set('arr.yep', ['one',2], o);

            assert.deepEqual([
              ***REMOVED*** yep: 'one', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 2 ***REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)

          it('that is less than length', function(done)***REMOVED***
            mpath.set('arr.yep', [47], o, function (v) ***REMOVED***
              return 47 === v ? 4 : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 4, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 2 ***REMOVED***
            ], o.arr);

            mpath.set('arr.yep', [47], o);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 2 ***REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)

          it('that is greater than length', function(done)***REMOVED***
            mpath.set('arr.yep', [5,6,7], o, function (v) ***REMOVED***
              return 5 === v ? 'five' : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 'five', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 6 ***REMOVED***
            ], o.arr);

            mpath.set('arr.yep', [5,6,7], o);
            assert.deepEqual([
              ***REMOVED*** yep: 5, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 6 ***REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('array.$.path', function()***REMOVED***
        describe('with single non-array value', function()***REMOVED***
          it('copies the value to each item in array', function(done)***REMOVED***
            mpath.set('arr.$.yep', ***REMOVED***xtra: 'double good'***REMOVED***, o, function (v) ***REMOVED***
              return v && v.xtra ? 'hi' : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 'hi', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: 'hi'***REMOVED***
            ], o.arr);

            mpath.set('arr.$.yep', ***REMOVED***xtra: 'double good'***REMOVED***, o);
            assert.deepEqual([
              ***REMOVED*** yep: ***REMOVED***xtra:'double good'***REMOVED***, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: ***REMOVED***xtra:'double good'***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
        describe('with array of values', function()***REMOVED***
          it('copies the value to each item in array', function(done)***REMOVED***
            mpath.set('arr.$.yep', [15], o, function (v) ***REMOVED***
              return v.length === 1 ? [] : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: [], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: []***REMOVED***
            ], o.arr);

            mpath.set('arr.$.yep', [15], o);
            assert.deepEqual([
              ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: [15]***REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.path', function()***REMOVED***
        it('works', function(done)***REMOVED***
          mpath.set('arr.1.yep', 0, o, function (v) ***REMOVED***
            return 0 === v ? 'zero' : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15] , arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 'zero' ***REMOVED***
          ], o.arr);

          mpath.set('arr.1.yep', 0, o);
          assert.deepEqual([
            ***REMOVED*** yep: [15] , arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.e', 35, o, function (v) ***REMOVED***
            return 35 === v ? 3 : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 3***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 3***REMOVED***, ***REMOVED*** d: 'yep', e: 3 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.e', 35, o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 35***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 35***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.e', ['a','b'], o, function (v) ***REMOVED***
            return 'a' === v ? 'x' : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 'x'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.e', ['a','b'], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.path.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.a.b', 36, o, function (v) ***REMOVED***
            return 36 === v ? 3 : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 3 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 3 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.a.b', 36, o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 36 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 36 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.a.b', [1,2,3,4], o, function (v) ***REMOVED***
            return 2 === v ? 'two' : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 1 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 'two' ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.a.b', [1,2,3,4], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 1 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 2 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.$.path.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.$.a.b', '$', o, function (v) ***REMOVED***
            return '$' === v ? 'dolla billz' : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 'dolla billz' ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 'dolla billz' ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', '$', o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: '$' ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: '$' ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.$.a.b', [1], o, function (v) ***REMOVED***
            return Array.isArray(v) ? ***REMOVED******REMOVED*** : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: ***REMOVED******REMOVED*** ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: ***REMOVED******REMOVED*** ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', [1], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: [1] ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.index.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.0.a', 'single', o, function (v) ***REMOVED***
            return 'single' === v ? 'double' : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'double', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.arr.0.a', 'single', o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'single', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.arr.0.a', [4,8,15,16,23,42], o, function (v) ***REMOVED***
            return 4 === v ? 3 : v;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 3, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: false ***REMOVED***
          ], o.arr);

          mpath.set('arr.arr.0.a', [4,8,15,16,23,42], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 4, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: false ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.$.index.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.$.0.a', 'singles', o, function (v) ***REMOVED***
            return 0;
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 0, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('arr.arr.$.0.a', 'singles', o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'singles', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          mpath.set('$.arr.arr.0.a', 'single', o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'single', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0 ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.arr.$.0.a', [4,8,15,16,23,42], o, function (v) ***REMOVED***
            return 'nope'
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'nope', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0***REMOVED***
          ], o.arr);

          mpath.set('arr.arr.$.0.a', [4,8,15,16,23,42], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0***REMOVED***
          ], o.arr);

          mpath.set('arr.$.arr.0.a', [4,8,15,16,23,42,108], o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.path.index', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.a.7', 47, o, function (v) ***REMOVED***
            return 1
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,1], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 1 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0***REMOVED***
          ], o.arr);

          mpath.set('arr.arr.a.7', 47, o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,47], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 47 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          o.arr[1].arr = [***REMOVED*** a: [] ***REMOVED***, ***REMOVED*** a: [] ***REMOVED***, ***REMOVED*** a: null ***REMOVED***];
          mpath.set('arr.arr.a.7', [[null,46], [undefined, 'woot']], o);

          var a1 = [];
          var a2 = [];
          a1[7] = undefined;
          a2[7] = 'woot';

          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED***
          , ***REMOVED*** yep: 0, arr: [***REMOVED***a:a1***REMOVED***,***REMOVED***a:a2***REMOVED***,***REMOVED***a:null***REMOVED***] ***REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('handles array.array.path', function()***REMOVED***
        it('with single', function(done)***REMOVED***
          o.arr[1].arr = [***REMOVED******REMOVED***,***REMOVED******REMOVED***];
          assert.deepEqual([***REMOVED******REMOVED***,***REMOVED******REMOVED***], o.arr[1].arr);
          o.arr.push(***REMOVED*** arr: 'something else' ***REMOVED***);
          o.arr.push(***REMOVED*** arr: ['something else'] ***REMOVED***);
          o.arr.push(***REMOVED*** arr: [[]] ***REMOVED***);
          o.arr.push(***REMOVED*** arr: [5] ***REMOVED***);

          var weird = [];
          weird.e = 'xmas';

          // test
          mpath.set('arr.arr.e', 47, o, function (v) ***REMOVED***
            return 'xmas'
          ***REMOVED***);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [
                  ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 'xmas'***REMOVED***
                , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 'xmas'***REMOVED***
                , ***REMOVED*** d: 'yep', e: 'xmas' ***REMOVED***
              ]
            ***REMOVED***
          , ***REMOVED*** yep: 0, arr: [***REMOVED***e: 'xmas'***REMOVED***, ***REMOVED***e:'xmas'***REMOVED***] ***REMOVED***
          , ***REMOVED*** arr: 'something else' ***REMOVED***
          , ***REMOVED*** arr: ['something else'] ***REMOVED***
          , ***REMOVED*** arr: [weird] ***REMOVED***
          , ***REMOVED*** arr: [5] ***REMOVED***
          ]
          , o.arr);

          weird.e = 47;

          mpath.set('arr.arr.e', 47, o);
          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [
                  ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 47***REMOVED***
                , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 47***REMOVED***
                , ***REMOVED*** d: 'yep', e: 47 ***REMOVED***
              ]
            ***REMOVED***
          , ***REMOVED*** yep: 0, arr: [***REMOVED***e: 47***REMOVED***, ***REMOVED***e:47***REMOVED***] ***REMOVED***
          , ***REMOVED*** arr: 'something else' ***REMOVED***
          , ***REMOVED*** arr: ['something else'] ***REMOVED***
          , ***REMOVED*** arr: [weird] ***REMOVED***
          , ***REMOVED*** arr: [5] ***REMOVED***
          ]
          , o.arr);

          done();
        ***REMOVED***)
        it('with arrays', function(done)***REMOVED***
          mpath.set('arr.arr.e', [[1,2,3],[4,5],null,[],[6], [7,8,9]], o, function (v) ***REMOVED***
            return 10;
          ***REMOVED***);

          var weird = [];
          weird.e = 10;

          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [
                  ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 10***REMOVED***
                , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 10***REMOVED***
                , ***REMOVED*** d: 'yep', e: 10 ***REMOVED***
              ]
            ***REMOVED***
          , ***REMOVED*** yep: 0, arr: [***REMOVED***e: 10***REMOVED***, ***REMOVED***e:10***REMOVED***] ***REMOVED***
          , ***REMOVED*** arr: 'something else' ***REMOVED***
          , ***REMOVED*** arr: ['something else'] ***REMOVED***
          , ***REMOVED*** arr: [weird] ***REMOVED***
          , ***REMOVED*** arr: [5] ***REMOVED***
          ]
          , o.arr);

          mpath.set('arr.arr.e', [[1,2,3],[4,5],null,[],[6], [7,8,9]], o);

          weird.e = 6;

          assert.deepEqual([
            ***REMOVED*** yep: [15], arr: [
                  ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 1***REMOVED***
                , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 2***REMOVED***
                , ***REMOVED*** d: 'yep', e: 3 ***REMOVED***
              ]
            ***REMOVED***
          , ***REMOVED*** yep: 0, arr: [***REMOVED***e: 4***REMOVED***, ***REMOVED***e:5***REMOVED***] ***REMOVED***
          , ***REMOVED*** arr: 'something else' ***REMOVED***
          , ***REMOVED*** arr: ['something else'] ***REMOVED***
          , ***REMOVED*** arr: [weird] ***REMOVED***
          , ***REMOVED*** arr: [5] ***REMOVED***
          ]
          , o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***)

    describe('with `special`', function()***REMOVED***
      var o = doc();

      it('works', function(done)***REMOVED***
        mpath.set('name', 'chan', o, special, function (v) ***REMOVED***
          return 'hi';
        ***REMOVED***);
        assert.deepEqual('hi', o.name);

        mpath.set('name', 'changer', o, special);
        assert.deepEqual('changer', o.name);

        mpath.set('first.second.third', [1,***REMOVED***name:'y'***REMOVED***,9], o, special);
        assert.deepEqual([1,***REMOVED***name:'y'***REMOVED***,9], o.first.second.third);

        mpath.set('first.second.third.1.name', 'z', o, special)
        assert.deepEqual([1,***REMOVED***name:'z'***REMOVED***,9], o.first.second.third);

        mpath.set('comments.1.name', 'ttwwoo', o, special);
        assert.deepEqual(***REMOVED*** name: 'two', _doc: ***REMOVED*** name: 'ttwwoo' ***REMOVED******REMOVED***, o.comments[1]);

        mpath.set('comments.2.comments.1.comments.0.expander', 'adder', o, special, function (v) ***REMOVED***
          return 'super'
        ***REMOVED***);
        assert.deepEqual(
            ***REMOVED*** val: 2, expander: 'super'***REMOVED***
          , o.comments[2]._doc.comments[1]._doc.comments[0]);

        mpath.set('comments.2.comments.1.comments.0.expander', 'adder', o, special);
        assert.deepEqual(
            ***REMOVED*** val: 2, expander: 'adder'***REMOVED***
          , o.comments[2]._doc.comments[1]._doc.comments[0]);

        mpath.set('comments.2.comments.1.comments.2', 'set', o, special);
        assert.equal(3, o.comments[2]._doc.comments[1]._doc.comments.length);
        assert.deepEqual(
            ***REMOVED*** val: 2, expander: 'adder'***REMOVED***
          , o.comments[2]._doc.comments[1]._doc.comments[0]);
        assert.deepEqual(
            undefined
          , o.comments[2]._doc.comments[1]._doc.comments[1]);
        assert.deepEqual(
            'set'
          , o.comments[2]._doc.comments[1]._doc.comments[2]);
        done();
      ***REMOVED***)

      describe('array.path', function()***REMOVED***
        describe('with single non-array value', function()***REMOVED***
          it('works', function(done)***REMOVED***
            o.arr[1]._doc = ***REMOVED*** special: true ***REMOVED***

            mpath.set('arr.yep', false, o, special, function (v) ***REMOVED***
              return 'yes';
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 'yes', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 'yes'***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.yep', false, o, special);
            assert.deepEqual([
              ***REMOVED*** yep: false, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: false ***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
        describe('with array of values', function()***REMOVED***
          it('that are equal in length', function(done)***REMOVED***
            mpath.set('arr.yep', ['one',2], o, special, function (v) ***REMOVED***
              return 2 === v ? 20 : v;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 'one', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 20***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.yep', ['one',2], o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 'one', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 2***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)

          it('that is less than length', function(done)***REMOVED***
            mpath.set('arr.yep', [47], o, special, function (v) ***REMOVED***
              return 80;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 80, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 2***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.yep', [47], o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 2***REMOVED******REMOVED***
            ], o.arr);

            // add _doc to first element
            o.arr[0]._doc = ***REMOVED*** yep: 46, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED***

            mpath.set('arr.yep', [20], o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***], _doc: ***REMOVED*** yep: 20, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 2***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)

          it('that is greater than length', function(done)***REMOVED***
            mpath.set('arr.yep', [5,6,7], o, special, function () ***REMOVED***
              return 'x';
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***], _doc: ***REMOVED*** yep: 'x', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 'x'***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.yep', [5,6,7], o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***], _doc: ***REMOVED*** yep: 5, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 6***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('array.$.path', function()***REMOVED***
        describe('with single non-array value', function()***REMOVED***
          it('copies the value to each item in array', function(done)***REMOVED***
            mpath.set('arr.$.yep', ***REMOVED***xtra: 'double good'***REMOVED***, o, special, function (v) ***REMOVED***
              return 9;
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: 9, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 9***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.$.yep', ***REMOVED***xtra: 'double good'***REMOVED***, o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: ***REMOVED***xtra:'double good'***REMOVED***, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: ***REMOVED***xtra:'double good'***REMOVED******REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
        describe('with array of values', function()***REMOVED***
          it('copies the value to each item in array', function(done)***REMOVED***
            mpath.set('arr.$.yep', [15], o, special, function (v) ***REMOVED***
              return 'array'
            ***REMOVED***);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: 'array', arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 'array'***REMOVED******REMOVED***
            ], o.arr);

            mpath.set('arr.$.yep', [15], o, special);
            assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: [15]***REMOVED******REMOVED***
            ], o.arr);

            done();
          ***REMOVED***)
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.path', function()***REMOVED***
        it('works', function(done)***REMOVED***
          mpath.set('arr.1.yep', 0, o, special, function (v) ***REMOVED***
            return 1;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 1***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.1.yep', 0, o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.e', 35, o, special, function (v) ***REMOVED***
            return 30
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 30***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 30***REMOVED***, ***REMOVED*** d: 'yep', e: 30 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.e', 35, o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 35***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 35***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.e', ['a','b'], o, special, function (v) ***REMOVED***
            return 'a' === v ? 'A' : v;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 'A'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.e', ['a','b'], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.path.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.a.b', 36, o, special, function (v) ***REMOVED***
            return 20
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 20 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 20 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.a.b', 36, o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 36 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 36 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.a.b', [1,2,3,4], o, special, function (v) ***REMOVED***
            return v*2;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 2 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 4 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.a.b', [1,2,3,4], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 1 ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 2 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.index.array.$.path.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.0.arr.$.a.b', '$', o, special, function (v) ***REMOVED***
            return 'dollaz'
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: 'dollaz' ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: 'dollaz' ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', '$', o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: '$' ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: '$' ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.0.arr.$.a.b', [1], o, special, function (v) ***REMOVED***
            return ***REMOVED******REMOVED***;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: ***REMOVED******REMOVED*** ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: ***REMOVED******REMOVED*** ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', [1], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: ***REMOVED*** b: [1] ***REMOVED***, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.index.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.0.a', 'single', o, special, function (v) ***REMOVED***
            return 88;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 88, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.0.a', 'single', o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'single', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.arr.0.a', [4,8,15,16,23,42], o, special, function (v) ***REMOVED***
            return v*2;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 8, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.0.a', [4,8,15,16,23,42], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 4, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.$.index.path', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.$.0.a', 'singles', o, special, function (v) ***REMOVED***
            return v.toUpperCase();
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'SINGLES', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.$.0.a', 'singles', o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'singles', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('$.arr.arr.0.a', 'single', o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: 'single', e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          mpath.set('arr.arr.$.0.a', [4,8,15,16,23,42], o, special, function (v) ***REMOVED***
            return Array
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: Array, e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.$.0.a', [4,8,15,16,23,42], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.$.arr.0.a', [4,8,15,16,23,42,108], o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1] ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('array.array.path.index', function()***REMOVED***
        it('with single value', function(done)***REMOVED***
          mpath.set('arr.arr.a.7', 47, o, special, function (v) ***REMOVED***
            return Object;
          ***REMOVED***);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,Object], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': Object ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.a.7', 47, o, special);
          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,47], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 47 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
        it('with array', function(done)***REMOVED***
          o.arr[1]._doc.arr = [***REMOVED*** a: [] ***REMOVED***, ***REMOVED*** a: [] ***REMOVED***, ***REMOVED*** a: null ***REMOVED***];
          mpath.set('arr.arr.a.7', [[null,46], [undefined, 'woot']], o, special, function (v) ***REMOVED***
            return undefined === v ? 'nope' : v;
          ***REMOVED***);

          var a1 = [];
          var a2 = [];
          a1[7] = 'nope';
          a2[7] = 'woot';

          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** arr: [***REMOVED***a:a1***REMOVED***,***REMOVED***a:a2***REMOVED***,***REMOVED***a:null***REMOVED***], special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          mpath.set('arr.arr.a.7', [[null,46], [undefined, 'woot']], o, special);

          a1[7] = undefined;

          assert.deepEqual([
              ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
                , _doc: ***REMOVED*** yep: [15], arr: [***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 'a'***REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 'b'***REMOVED***, ***REMOVED*** d: 'yep', e: 35 ***REMOVED***] ***REMOVED*** ***REMOVED***
            , ***REMOVED*** yep: true, _doc: ***REMOVED*** arr: [***REMOVED***a:a1***REMOVED***,***REMOVED***a:a2***REMOVED***,***REMOVED***a:null***REMOVED***], special: true, yep: 0***REMOVED******REMOVED***
          ], o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('handles array.array.path', function()***REMOVED***
        it('with single', function(done)***REMOVED***
          o.arr[1]._doc.arr = [***REMOVED******REMOVED***,***REMOVED******REMOVED***];
          assert.deepEqual([***REMOVED******REMOVED***,***REMOVED******REMOVED***], o.arr[1]._doc.arr);
          o.arr.push(***REMOVED*** _doc: ***REMOVED*** arr: 'something else' ***REMOVED******REMOVED***);
          o.arr.push(***REMOVED*** _doc: ***REMOVED*** arr: ['something else'] ***REMOVED******REMOVED***);
          o.arr.push(***REMOVED*** _doc: ***REMOVED*** arr: [[]] ***REMOVED******REMOVED***);
          o.arr.push(***REMOVED*** _doc: ***REMOVED*** arr: [5] ***REMOVED******REMOVED***);

          // test
          mpath.set('arr.arr.e', 47, o, special);

          var weird = [];
          weird.e = 47;

          assert.deepEqual([
            ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
              , _doc: ***REMOVED***
                  yep: [15]
                , arr: [
                    ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 47***REMOVED***
                  , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 47***REMOVED***
                  , ***REMOVED*** d: 'yep', e: 47 ***REMOVED***
                  ]
              ***REMOVED***
            ***REMOVED***
          , ***REMOVED*** yep: true
              , _doc: ***REMOVED***
                  arr: [
                     ***REMOVED***e:47***REMOVED***
                   , ***REMOVED***e:47***REMOVED***
                  ]
                , special: true
                , yep: 0
              ***REMOVED***
            ***REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: 'something else' ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: ['something else'] ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: [weird] ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: [5] ***REMOVED******REMOVED***
          ]
          , o.arr);

          done();
        ***REMOVED***)
        it('with arrays', function(done)***REMOVED***
          mpath.set('arr.arr.e', [[1,2,3],[4,5],null,[],[6], [7,8,9]], o, special);

          var weird = [];
          weird.e = 6;

          assert.deepEqual([
            ***REMOVED*** yep: 47, arr: [***REMOVED*** a: ***REMOVED*** b: 47 ***REMOVED******REMOVED***, ***REMOVED*** a: ***REMOVED*** c: 48 ***REMOVED******REMOVED***, ***REMOVED*** d: 'yep' ***REMOVED***]
              , _doc: ***REMOVED***
                  yep: [15]
                , arr: [
                    ***REMOVED*** a: [4,8,15,16,23,42,108,null], e: 1***REMOVED***
                  , ***REMOVED*** a: ***REMOVED*** c: 48, b: [1], '7': 46 ***REMOVED***, e: 2***REMOVED***
                  , ***REMOVED*** d: 'yep', e: 3 ***REMOVED***
                  ]
              ***REMOVED***
            ***REMOVED***
          , ***REMOVED*** yep: true
              , _doc: ***REMOVED***
                  arr: [
                     ***REMOVED***e:4***REMOVED***
                   , ***REMOVED***e:5***REMOVED***
                  ]
                , special: true
                , yep: 0
              ***REMOVED***
            ***REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: 'something else' ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: ['something else'] ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: [weird] ***REMOVED******REMOVED***
          , ***REMOVED*** _doc: ***REMOVED*** arr: [5] ***REMOVED******REMOVED***
          ]
          , o.arr);

          done();
        ***REMOVED***)
      ***REMOVED***)

      describe('that is a function', function()***REMOVED***
        describe('without map', function()***REMOVED***
          it('works on array value', function(done)***REMOVED***
            var o = ***REMOVED*** hello: ***REMOVED*** world: [***REMOVED*** how: 'are' ***REMOVED***, ***REMOVED*** you: '?' ***REMOVED***] ***REMOVED******REMOVED***;
            var special = function (obj, key, val) ***REMOVED***
              if (val) ***REMOVED***
                obj[key] = val;
              ***REMOVED*** else ***REMOVED***
                return 'thing' == key
                  ? obj.world
                  : obj[key]
              ***REMOVED***
            ***REMOVED***
            mpath.set('hello.thing.how', 'arrrr', o, special);
            assert.deepEqual(o, ***REMOVED*** hello: ***REMOVED*** world: [***REMOVED*** how: 'arrrr' ***REMOVED***, ***REMOVED*** you: '?', how: 'arrrr' ***REMOVED***] ***REMOVED******REMOVED***);
            done();
          ***REMOVED***)
          it('works on non-array value', function(done)***REMOVED***
            var o = ***REMOVED*** hello: ***REMOVED*** world: ***REMOVED*** how: 'are you' ***REMOVED******REMOVED******REMOVED***;
            var special = function (obj, key, val) ***REMOVED***
              if (val) ***REMOVED***
                obj[key] = val;
              ***REMOVED*** else ***REMOVED***
                return 'thing' == key
                  ? obj.world
                  : obj[key]
              ***REMOVED***
            ***REMOVED***
            mpath.set('hello.thing.how', 'RU', o, special);
            assert.deepEqual(o, ***REMOVED*** hello: ***REMOVED*** world: ***REMOVED*** how: 'RU' ***REMOVED******REMOVED******REMOVED***);
            done();
          ***REMOVED***)
        ***REMOVED***)
        it('works with map', function(done)***REMOVED***
          var o = ***REMOVED*** hello: ***REMOVED*** world: [***REMOVED*** how: 'are' ***REMOVED***, ***REMOVED*** you: '?' ***REMOVED***] ***REMOVED******REMOVED***;
          var special = function (obj, key, val) ***REMOVED***
            if (val) ***REMOVED***
              obj[key] = val;
            ***REMOVED*** else ***REMOVED***
              return 'thing' == key
                ? obj.world
                : obj[key]
            ***REMOVED***
          ***REMOVED***
          var map = function (val) ***REMOVED***
            return 'convert' == val
              ? 'ºº'
              : val
          ***REMOVED***
          mpath.set('hello.thing.how', 'convert', o, special, map);
          assert.deepEqual(o, ***REMOVED*** hello: ***REMOVED*** world: [***REMOVED*** how: 'ºº' ***REMOVED***, ***REMOVED*** you: '?', how: 'ºº' ***REMOVED***] ***REMOVED******REMOVED***);
          done();
        ***REMOVED***)
      ***REMOVED***)

    ***REMOVED***)

    describe('get/set integration', function()***REMOVED***
      var o = doc();

      it('works', function(done)***REMOVED***
        var vals = mpath.get('array.o.array.x.b', o);

        vals[0][0][2] = 10;
        vals[1][0][1] = 0;
        vals[1][1] = 'Rambaldi';
        vals[1][2] = [12,14];
        vals[2] = [***REMOVED***changed:true***REMOVED***, [null, ['changed','to','array']]];

        mpath.set('array.o.array.x.b', vals, o);

        var t = [
            ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: [4,6,10]***REMOVED******REMOVED***, ***REMOVED*** y: 10***REMOVED*** ] ***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: [1,0,3]***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***b:'Rambaldi',z: 10 ***REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED***b: [12,14]***REMOVED******REMOVED***] ***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: ***REMOVED***b: ***REMOVED***changed:true***REMOVED******REMOVED******REMOVED***, ***REMOVED*** x: ***REMOVED*** b: [null, ['changed','to','array']]***REMOVED******REMOVED***]***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***x: null ***REMOVED***] ***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** array: [***REMOVED***y: 3 ***REMOVED***] ***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** array: [3, 0, null] ***REMOVED******REMOVED***
          , ***REMOVED*** o: ***REMOVED*** name: 'ha' ***REMOVED******REMOVED***
        ];
        assert.deepEqual(t, o.array);
        done();
      ***REMOVED***)

      it('array.prop', function(done)***REMOVED***
        mpath.set('comments.name', ['this', 'was', 'changed'], o);

        assert.deepEqual([
            ***REMOVED*** name: 'this' ***REMOVED***
          , ***REMOVED*** name: 'was', _doc: ***REMOVED*** name: '2' ***REMOVED******REMOVED***
          , ***REMOVED*** name: 'changed'
              , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
              , _doc: ***REMOVED*** name: '3', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]  ***REMOVED******REMOVED***
        ], o.comments);

        mpath.set('comments.name', ['also', 'changed', 'this'], o, special);

        assert.deepEqual([
            ***REMOVED*** name: 'also' ***REMOVED***
          , ***REMOVED*** name: 'was', _doc: ***REMOVED*** name: 'changed' ***REMOVED******REMOVED***
          , ***REMOVED*** name: 'changed'
              , comments: [***REMOVED******REMOVED***,***REMOVED*** comments: [***REMOVED***val: 'twoo'***REMOVED***]***REMOVED***]
              , _doc: ***REMOVED*** name: 'this', comments: [***REMOVED******REMOVED***,***REMOVED*** _doc: ***REMOVED*** comments: [***REMOVED*** val: 2 ***REMOVED***] ***REMOVED******REMOVED***]  ***REMOVED******REMOVED***
        ], o.comments);

        done();
      ***REMOVED***)

    ***REMOVED***)

    describe('multiple $ use', function()***REMOVED***
      var o = doc();
      it('is ok', function(done)***REMOVED***
        assert.doesNotThrow(function () ***REMOVED***
          mpath.set('arr.$.arr.$.a', 35, o);
        ***REMOVED***);
        done();
      ***REMOVED***)
    ***REMOVED***)

    it('has', function(done) ***REMOVED***
      assert.ok(mpath.has('a', ***REMOVED*** a: 1 ***REMOVED***));
      assert.ok(mpath.has('a', ***REMOVED*** a: undefined ***REMOVED***));
      assert.ok(!mpath.has('a', ***REMOVED******REMOVED***));
      assert.ok(!mpath.has('a', null));

      assert.ok(mpath.has('a.b', ***REMOVED*** a: ***REMOVED*** b: 1 ***REMOVED*** ***REMOVED***));
      assert.ok(mpath.has('a.b', ***REMOVED*** a: ***REMOVED*** b: undefined ***REMOVED*** ***REMOVED***));
      assert.ok(!mpath.has('a.b', ***REMOVED*** a: 1 ***REMOVED***));
      assert.ok(!mpath.has('a.b', ***REMOVED*** a: null ***REMOVED***));

      done();
    ***REMOVED***);

    it('underneath a map', function(done) ***REMOVED***
      assert.equal(mpath.get('a.b', ***REMOVED*** a: new Map([['b', 1]]) ***REMOVED***), 1);

      var m = new Map([['b', 1]]);
      var obj = ***REMOVED*** a: m ***REMOVED***;
      mpath.set('a.c', 2, obj);
      assert.equal(m.get('c'), 2);

      done();
    ***REMOVED***);

    it('unset', function(done) ***REMOVED***
      var o = ***REMOVED*** a: 1 ***REMOVED***;
      mpath.unset('a', o);
      assert.deepEqual(o, ***REMOVED******REMOVED***);

      o = ***REMOVED*** a: ***REMOVED*** b: 1 ***REMOVED*** ***REMOVED***;
      mpath.unset('a.b', o);
      assert.deepEqual(o, ***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***);

      o = ***REMOVED*** a: null ***REMOVED***;
      mpath.unset('a.b', o);
      assert.deepEqual(o, ***REMOVED*** a: null ***REMOVED***);

      done();
    ***REMOVED***);

    it('ignores setting a nested path that doesnt exist', function(done)***REMOVED***
      var o = doc();
      assert.doesNotThrow(function()***REMOVED***
        mpath.set('thing.that.is.new', 10, o);
      ***REMOVED***)
      done();
    ***REMOVED***)
  ***REMOVED***)

***REMOVED***)
