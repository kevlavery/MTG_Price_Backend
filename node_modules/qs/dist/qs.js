(function(f)***REMOVED***if(typeof exports==="object"&&typeof module!=="undefined")***REMOVED***module.exports=f()***REMOVED***else if(typeof define==="function"&&define.amd)***REMOVED***define([],f)***REMOVED***else***REMOVED***var g;if(typeof window!=="undefined")***REMOVED***g=window***REMOVED***else if(typeof global!=="undefined")***REMOVED***g=global***REMOVED***else if(typeof self!=="undefined")***REMOVED***g=self***REMOVED***else***REMOVED***g=this***REMOVED***g.Qs = f()***REMOVED******REMOVED***)(function()***REMOVED***var define,module,exports;return (function e(t,n,r)***REMOVED***function s(o,u)***REMOVED***if(!n[o])***REMOVED***if(!t[o])***REMOVED***var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f***REMOVED***var l=n[o]=***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;t[o][0].call(l.exports,function(e)***REMOVED***var n=t[o][1][e];return s(n?n:e)***REMOVED***,l,l.exports,e,t,n,r)***REMOVED***return n[o].exports***REMOVED***var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s***REMOVED***)(***REMOVED***1:[function(require,module,exports)***REMOVED***
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = ***REMOVED***
    'default': 'RFC3986',
    formatters: ***REMOVED***
        RFC1738: function (value) ***REMOVED***
            return replace.call(value, percentTwenties, '+');
        ***REMOVED***,
        RFC3986: function (value) ***REMOVED***
            return value;
        ***REMOVED***
    ***REMOVED***,
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
***REMOVED***;

***REMOVED***,***REMOVED******REMOVED***],2:[function(require,module,exports)***REMOVED***
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = ***REMOVED***
    formats: formats,
    parse: parse,
    stringify: stringify
***REMOVED***;

***REMOVED***,***REMOVED***"./formats":1,"./parse":3,"./stringify":4***REMOVED***],3:[function(require,module,exports)***REMOVED***
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;

var defaults = ***REMOVED***
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
***REMOVED***;

var parseValues = function parseQueryStringValues(str, options) ***REMOVED***
    var obj = ***REMOVED******REMOVED***;
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);

    for (var i = 0; i < parts.length; ++i) ***REMOVED***
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) ***REMOVED***
            key = options.decoder(part, defaults.decoder);
            val = options.strictNullHandling ? null : '';
        ***REMOVED*** else ***REMOVED***
            key = options.decoder(part.slice(0, pos), defaults.decoder);
            val = options.decoder(part.slice(pos + 1), defaults.decoder);
        ***REMOVED***
        if (has.call(obj, key)) ***REMOVED***
            obj[key] = [].concat(obj[key]).concat(val);
        ***REMOVED*** else ***REMOVED***
            obj[key] = val;
        ***REMOVED***
    ***REMOVED***

    return obj;
***REMOVED***;

var parseObject = function (chain, val, options) ***REMOVED***
    var leaf = val;

    for (var i = chain.length - 1; i >= 0; --i) ***REMOVED***
        var obj;
        var root = chain[i];

        if (root === '[]') ***REMOVED***
            obj = [];
            obj = obj.concat(leaf);
        ***REMOVED*** else ***REMOVED***
            obj = options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) ***REMOVED***
                obj = [];
                obj[index] = leaf;
            ***REMOVED*** else ***REMOVED***
                obj[cleanRoot] = leaf;
            ***REMOVED***
        ***REMOVED***

        leaf = obj;
    ***REMOVED***

    return leaf;
***REMOVED***;

var parseKeys = function parseQueryStringKeys(givenKey, val, options) ***REMOVED***
    if (!givenKey) ***REMOVED***
        return;
    ***REMOVED***

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) ***REMOVED***
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) ***REMOVED***
            if (!options.allowPrototypes) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***

        keys.push(parent);
    ***REMOVED***

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) ***REMOVED***
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) ***REMOVED***
            if (!options.allowPrototypes) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***
        keys.push(segment[1]);
    ***REMOVED***

    // If there's a remainder, just add whatever is left

    if (segment) ***REMOVED***
        keys.push('[' + key.slice(segment.index) + ']');
    ***REMOVED***

    return parseObject(keys, val, options);
***REMOVED***;

module.exports = function (str, opts) ***REMOVED***
    var options = opts ? utils.assign(***REMOVED******REMOVED***, opts) : ***REMOVED******REMOVED***;

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') ***REMOVED***
        throw new TypeError('Decoder has to be a function.');
    ***REMOVED***

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') ***REMOVED***
        return options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;
    ***REMOVED***

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) ***REMOVED***
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    ***REMOVED***

    return utils.compact(obj);
***REMOVED***;

***REMOVED***,***REMOVED***"./utils":5***REMOVED***],4:[function(require,module,exports)***REMOVED***
'use strict';

var utils = require('./utils');
var formats = require('./formats');

var arrayPrefixGenerators = ***REMOVED***
    brackets: function brackets(prefix) ***REMOVED*** // eslint-disable-line func-name-matching
        return prefix + '[]';
    ***REMOVED***,
    indices: function indices(prefix, key) ***REMOVED*** // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    ***REMOVED***,
    repeat: function repeat(prefix) ***REMOVED*** // eslint-disable-line func-name-matching
        return prefix;
    ***REMOVED***
***REMOVED***;

var toISO = Date.prototype.toISOString;

var defaults = ***REMOVED***
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    serializeDate: function serializeDate(date) ***REMOVED*** // eslint-disable-line func-name-matching
        return toISO.call(date);
    ***REMOVED***,
    skipNulls: false,
    strictNullHandling: false
***REMOVED***;

var stringify = function stringify( // eslint-disable-line func-name-matching
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    formatter,
    encodeValuesOnly
) ***REMOVED***
    var obj = object;
    if (typeof filter === 'function') ***REMOVED***
        obj = filter(prefix, obj);
    ***REMOVED*** else if (obj instanceof Date) ***REMOVED***
        obj = serializeDate(obj);
    ***REMOVED*** else if (obj === null) ***REMOVED***
        if (strictNullHandling) ***REMOVED***
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        ***REMOVED***

        obj = '';
    ***REMOVED***

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) ***REMOVED***
        if (encoder) ***REMOVED***
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
        ***REMOVED***
        return [formatter(prefix) + '=' + formatter(String(obj))];
    ***REMOVED***

    var values = [];

    if (typeof obj === 'undefined') ***REMOVED***
        return values;
    ***REMOVED***

    var objKeys;
    if (Array.isArray(filter)) ***REMOVED***
        objKeys = filter;
    ***REMOVED*** else ***REMOVED***
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    ***REMOVED***

    for (var i = 0; i < objKeys.length; ++i) ***REMOVED***
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) ***REMOVED***
            continue;
        ***REMOVED***

        if (Array.isArray(obj)) ***REMOVED***
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        ***REMOVED*** else ***REMOVED***
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        ***REMOVED***
    ***REMOVED***

    return values;
***REMOVED***;

module.exports = function (object, opts) ***REMOVED***
    var obj = object;
    var options = opts ? utils.assign(***REMOVED******REMOVED***, opts) : ***REMOVED******REMOVED***;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') ***REMOVED***
        throw new TypeError('Encoder has to be a function.');
    ***REMOVED***

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    if (typeof options.format === 'undefined') ***REMOVED***
        options.format = formats['default'];
    ***REMOVED*** else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) ***REMOVED***
        throw new TypeError('Unknown format option provided.');
    ***REMOVED***
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') ***REMOVED***
        filter = options.filter;
        obj = filter('', obj);
    ***REMOVED*** else if (Array.isArray(options.filter)) ***REMOVED***
        filter = options.filter;
        objKeys = filter;
    ***REMOVED***

    var keys = [];

    if (typeof obj !== 'object' || obj === null) ***REMOVED***
        return '';
    ***REMOVED***

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) ***REMOVED***
        arrayFormat = options.arrayFormat;
    ***REMOVED*** else if ('indices' in options) ***REMOVED***
        arrayFormat = options.indices ? 'indices' : 'repeat';
    ***REMOVED*** else ***REMOVED***
        arrayFormat = 'indices';
    ***REMOVED***

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) ***REMOVED***
        objKeys = Object.keys(obj);
    ***REMOVED***

    if (sort) ***REMOVED***
        objKeys.sort(sort);
    ***REMOVED***

    for (var i = 0; i < objKeys.length; ++i) ***REMOVED***
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) ***REMOVED***
            continue;
        ***REMOVED***

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encode ? encoder : null,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter,
            encodeValuesOnly
        ));
    ***REMOVED***

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    return joined.length > 0 ? prefix + joined : '';
***REMOVED***;

***REMOVED***,***REMOVED***"./formats":1,"./utils":5***REMOVED***],5:[function(require,module,exports)***REMOVED***
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () ***REMOVED***
    var array = [];
    for (var i = 0; i < 256; ++i) ***REMOVED***
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    ***REMOVED***

    return array;
***REMOVED***());

var compactQueue = function compactQueue(queue) ***REMOVED***
    var obj;

    while (queue.length) ***REMOVED***
        var item = queue.pop();
        obj = item.obj[item.prop];

        if (Array.isArray(obj)) ***REMOVED***
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) ***REMOVED***
                if (typeof obj[j] !== 'undefined') ***REMOVED***
                    compacted.push(obj[j]);
                ***REMOVED***
            ***REMOVED***

            item.obj[item.prop] = compacted;
        ***REMOVED***
    ***REMOVED***

    return obj;
***REMOVED***;

exports.arrayToObject = function arrayToObject(source, options) ***REMOVED***
    var obj = options && options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;
    for (var i = 0; i < source.length; ++i) ***REMOVED***
        if (typeof source[i] !== 'undefined') ***REMOVED***
            obj[i] = source[i];
        ***REMOVED***
    ***REMOVED***

    return obj;
***REMOVED***;

exports.merge = function merge(target, source, options) ***REMOVED***
    if (!source) ***REMOVED***
        return target;
    ***REMOVED***

    if (typeof source !== 'object') ***REMOVED***
        if (Array.isArray(target)) ***REMOVED***
            target.push(source);
        ***REMOVED*** else if (typeof target === 'object') ***REMOVED***
            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) ***REMOVED***
                target[source] = true;
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            return [target, source];
        ***REMOVED***

        return target;
    ***REMOVED***

    if (typeof target !== 'object') ***REMOVED***
        return [target].concat(source);
    ***REMOVED***

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) ***REMOVED***
        mergeTarget = exports.arrayToObject(target, options);
    ***REMOVED***

    if (Array.isArray(target) && Array.isArray(source)) ***REMOVED***
        source.forEach(function (item, i) ***REMOVED***
            if (has.call(target, i)) ***REMOVED***
                if (target[i] && typeof target[i] === 'object') ***REMOVED***
                    target[i] = exports.merge(target[i], item, options);
                ***REMOVED*** else ***REMOVED***
                    target.push(item);
                ***REMOVED***
            ***REMOVED*** else ***REMOVED***
                target[i] = item;
            ***REMOVED***
        ***REMOVED***);
        return target;
    ***REMOVED***

    return Object.keys(source).reduce(function (acc, key) ***REMOVED***
        var value = source[key];

        if (has.call(acc, key)) ***REMOVED***
            acc[key] = exports.merge(acc[key], value, options);
        ***REMOVED*** else ***REMOVED***
            acc[key] = value;
        ***REMOVED***
        return acc;
    ***REMOVED***, mergeTarget);
***REMOVED***;

exports.assign = function assignSingleSource(target, source) ***REMOVED***
    return Object.keys(source).reduce(function (acc, key) ***REMOVED***
        acc[key] = source[key];
        return acc;
    ***REMOVED***, target);
***REMOVED***;

exports.decode = function (str) ***REMOVED***
    try ***REMOVED***
        return decodeURIComponent(str.replace(/\+/g, ' '));
    ***REMOVED*** catch (e) ***REMOVED***
        return str;
    ***REMOVED***
***REMOVED***;

exports.encode = function encode(str) ***REMOVED***
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) ***REMOVED***
        return str;
    ***REMOVED***

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) ***REMOVED***
        var c = string.charCodeAt(i);

        if (
            c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) ***REMOVED***
            out += string.charAt(i);
            continue;
        ***REMOVED***

        if (c < 0x80) ***REMOVED***
            out = out + hexTable[c];
            continue;
        ***REMOVED***

        if (c < 0x800) ***REMOVED***
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        ***REMOVED***

        if (c < 0xD800 || c >= 0xE000) ***REMOVED***
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        ***REMOVED***

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    ***REMOVED***

    return out;
***REMOVED***;

exports.compact = function compact(value) ***REMOVED***
    var queue = [***REMOVED*** obj: ***REMOVED*** o: value ***REMOVED***, prop: 'o' ***REMOVED***];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) ***REMOVED***
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) ***REMOVED***
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) ***REMOVED***
                queue.push(***REMOVED*** obj: obj, prop: key ***REMOVED***);
                refs.push(val);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return compactQueue(queue);
***REMOVED***;

exports.isRegExp = function isRegExp(obj) ***REMOVED***
    return Object.prototype.toString.call(obj) === '[object RegExp]';
***REMOVED***;

exports.isBuffer = function isBuffer(obj) ***REMOVED***
    if (obj === null || typeof obj === 'undefined') ***REMOVED***
        return false;
    ***REMOVED***

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
***REMOVED***;

***REMOVED***,***REMOVED******REMOVED***]***REMOVED***,***REMOVED******REMOVED***,[2])(2)
***REMOVED***);