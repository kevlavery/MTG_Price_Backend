var Stream = require('stream').Stream;
var util = require('util');

module.exports = DelayedStream;
function DelayedStream() ***REMOVED***
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
***REMOVED***
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) ***REMOVED***
  var delayedStream = new this();

  options = options || ***REMOVED******REMOVED***;
  for (var option in options) ***REMOVED***
    delayedStream[option] = options[option];
  ***REMOVED***

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() ***REMOVED***
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  ***REMOVED***;

  source.on('error', function() ***REMOVED******REMOVED***);
  if (delayedStream.pauseStream) ***REMOVED***
    source.pause();
  ***REMOVED***

  return delayedStream;
***REMOVED***;

Object.defineProperty(DelayedStream.prototype, 'readable', ***REMOVED***
  configurable: true,
  enumerable: true,
  get: function() ***REMOVED***
    return this.source.readable;
  ***REMOVED***
***REMOVED***);

DelayedStream.prototype.setEncoding = function() ***REMOVED***
  return this.source.setEncoding.apply(this.source, arguments);
***REMOVED***;

DelayedStream.prototype.resume = function() ***REMOVED***
  if (!this._released) ***REMOVED***
    this.release();
  ***REMOVED***

  this.source.resume();
***REMOVED***;

DelayedStream.prototype.pause = function() ***REMOVED***
  this.source.pause();
***REMOVED***;

DelayedStream.prototype.release = function() ***REMOVED***
  this._released = true;

  this._bufferedEvents.forEach(function(args) ***REMOVED***
    this.emit.apply(this, args);
  ***REMOVED***.bind(this));
  this._bufferedEvents = [];
***REMOVED***;

DelayedStream.prototype.pipe = function() ***REMOVED***
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
***REMOVED***;

DelayedStream.prototype._handleEmit = function(args) ***REMOVED***
  if (this._released) ***REMOVED***
    this.emit.apply(this, args);
    return;
  ***REMOVED***

  if (args[0] === 'data') ***REMOVED***
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  ***REMOVED***

  this._bufferedEvents.push(args);
***REMOVED***;

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() ***REMOVED***
  if (this._maxDataSizeExceeded) ***REMOVED***
    return;
  ***REMOVED***

  if (this.dataSize <= this.maxDataSize) ***REMOVED***
    return;
  ***REMOVED***

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
***REMOVED***;
