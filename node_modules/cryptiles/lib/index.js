'use strict';

// Load modules

const Crypto = require('crypto');
const Boom = require('boom');


// Declare internals

const internals = ***REMOVED******REMOVED***;


// Generate a cryptographically strong pseudo-random data

exports.randomString = function (size) ***REMOVED***

    const buffer = exports.randomBits((size + 1) * 6);
    if (buffer instanceof Error) ***REMOVED***
        return buffer;
    ***REMOVED***

    const string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
    return string.slice(0, size);
***REMOVED***;


// Return a random string of digits

exports.randomDigits = function (size) ***REMOVED***

    const buffer = exports.randomBits(size * 8);
    if (buffer instanceof Error) ***REMOVED***
        return buffer;
    ***REMOVED***

    const digits = [];
    for (let i = 0; i < buffer.length; ++i) ***REMOVED***
        digits.push(Math.floor(buffer[i] / 25.6));
    ***REMOVED***

    return digits.join('');
***REMOVED***;


// Generate a buffer of random bits

exports.randomBits = function (bits) ***REMOVED***

    if (!bits ||
        bits < 0) ***REMOVED***

        return Boom.internal('Invalid random bits count');
    ***REMOVED***

    const bytes = Math.ceil(bits / 8);
    try ***REMOVED***
        return Crypto.randomBytes(bytes);
    ***REMOVED***
    catch (err) ***REMOVED***
        return Boom.internal('Failed generating random bits: ' + err.message);
    ***REMOVED***
***REMOVED***;


// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)

exports.fixedTimeComparison = function (a, b) ***REMOVED***

    if (typeof a !== 'string' ||
        typeof b !== 'string') ***REMOVED***

        return false;
    ***REMOVED***

    let mismatch = (a.length === b.length ? 0 : 1);
    if (mismatch) ***REMOVED***
        b = a;
    ***REMOVED***

    for (let i = 0; i < a.length; ++i) ***REMOVED***
        const ac = a.charCodeAt(i);
        const bc = b.charCodeAt(i);
        mismatch |= (ac ^ bc);
    ***REMOVED***

    return (mismatch === 0);
***REMOVED***;
