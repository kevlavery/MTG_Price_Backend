/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var createError = require('http-errors')
var getBody = require('raw-body')
var iconv = require('iconv-lite')
var onFinished = require('on-finished')
var zlib = require('zlib')

/**
 * Module exports.
 */

module.exports = read

/**
 * Read a request into a buffer and parse.
 *
 * @param ***REMOVED***object***REMOVED*** req
 * @param ***REMOVED***object***REMOVED*** res
 * @param ***REMOVED***function***REMOVED*** next
 * @param ***REMOVED***function***REMOVED*** parse
 * @param ***REMOVED***function***REMOVED*** debug
 * @param ***REMOVED***object***REMOVED*** options
 * @private
 */

function read (req, res, next, parse, debug, options) ***REMOVED***
  var length
  var opts = options
  var stream

  // flag as parsed
  req._body = true

  // read options
  var encoding = opts.encoding !== null
    ? opts.encoding
    : null
  var verify = opts.verify

  try ***REMOVED***
    // get the content stream
    stream = contentstream(req, debug, opts.inflate)
    length = stream.length
    stream.length = undefined
  ***REMOVED*** catch (err) ***REMOVED***
    return next(err)
  ***REMOVED***

  // set raw-body options
  opts.length = length
  opts.encoding = verify
    ? null
    : encoding

  // assert charset is supported
  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) ***REMOVED***
    return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', ***REMOVED***
      charset: encoding.toLowerCase(),
      type: 'charset.unsupported'
    ***REMOVED***))
  ***REMOVED***

  // read body
  debug('read body')
  getBody(stream, opts, function (error, body) ***REMOVED***
    if (error) ***REMOVED***
      var _error

      if (error.type === 'encoding.unsupported') ***REMOVED***
        // echo back charset
        _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', ***REMOVED***
          charset: encoding.toLowerCase(),
          type: 'charset.unsupported'
        ***REMOVED***)
      ***REMOVED*** else ***REMOVED***
        // set status code on error
        _error = createError(400, error)
      ***REMOVED***

      // read off entire request
      stream.resume()
      onFinished(req, function onfinished () ***REMOVED***
        next(createError(400, _error))
      ***REMOVED***)
      return
    ***REMOVED***

    // verify
    if (verify) ***REMOVED***
      try ***REMOVED***
        debug('verify body')
        verify(req, res, body, encoding)
      ***REMOVED*** catch (err) ***REMOVED***
        next(createError(403, err, ***REMOVED***
          body: body,
          type: err.type || 'entity.verify.failed'
        ***REMOVED***))
        return
      ***REMOVED***
    ***REMOVED***

    // parse
    var str = body
    try ***REMOVED***
      debug('parse body')
      str = typeof body !== 'string' && encoding !== null
        ? iconv.decode(body, encoding)
        : body
      req.body = parse(str)
    ***REMOVED*** catch (err) ***REMOVED***
      next(createError(400, err, ***REMOVED***
        body: str,
        type: err.type || 'entity.parse.failed'
      ***REMOVED***))
      return
    ***REMOVED***

    next()
  ***REMOVED***)
***REMOVED***

/**
 * Get the content stream of the request.
 *
 * @param ***REMOVED***object***REMOVED*** req
 * @param ***REMOVED***function***REMOVED*** debug
 * @param ***REMOVED***boolean***REMOVED*** [inflate=true]
 * @return ***REMOVED***object***REMOVED***
 * @api private
 */

function contentstream (req, debug, inflate) ***REMOVED***
  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()
  var length = req.headers['content-length']
  var stream

  debug('content-encoding "%s"', encoding)

  if (inflate === false && encoding !== 'identity') ***REMOVED***
    throw createError(415, 'content encoding unsupported', ***REMOVED***
      encoding: encoding,
      type: 'encoding.unsupported'
    ***REMOVED***)
  ***REMOVED***

  switch (encoding) ***REMOVED***
    case 'deflate':
      stream = zlib.createInflate()
      debug('inflate body')
      req.pipe(stream)
      break
    case 'gzip':
      stream = zlib.createGunzip()
      debug('gunzip body')
      req.pipe(stream)
      break
    case 'identity':
      stream = req
      stream.length = length
      break
    default:
      throw createError(415, 'unsupported content encoding "' + encoding + '"', ***REMOVED***
        encoding: encoding,
        type: 'encoding.unsupported'
      ***REMOVED***)
  ***REMOVED***

  return stream
***REMOVED***
