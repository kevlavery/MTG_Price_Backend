/// provides the async helper functionality

function Waiter() ***REMOVED***
    if (!(this instanceof Waiter)) ***REMOVED***
        return new Waiter();
    ***REMOVED***

    var self = this;

    // found values
    self.values = ***REMOVED******REMOVED***;

    // callback when done
    self.callback = null;

    self.resolved = false;

    self.count = 0;
***REMOVED***;

Waiter.prototype.wait = function() ***REMOVED***
    var self = this;
    ++self.count;
***REMOVED***;

// resolve the promise
Waiter.prototype.resolve = function(name, val) ***REMOVED***
    var self = this;

    self.values[name] = val;

    // done with all items
    if (--self.count === 0) ***REMOVED***
        self.resolved = true;

        // we may not have a done callback yet
        if (self.callback) ***REMOVED***
            self.callback(self.values);
        ***REMOVED***
    ***REMOVED***
***REMOVED***;

// sets the done callback for the waiter
// notifies when the promise is complete
Waiter.prototype.done = function(fn) ***REMOVED***
    var self = this;

    self.callback = fn;
    if (self.resolved) ***REMOVED***
        fn(self.values);
    ***REMOVED***
***REMOVED***;

var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_';

var gen_id = function() ***REMOVED***
    var res = '';
    for (var i=0 ; i<8 ; ++i) ***REMOVED***
        res += alphabet[Math.floor(Math.random() * alphabet.length)];
    ***REMOVED***

    return res;
***REMOVED***;

module.exports = function() ***REMOVED***
    // baton which contains the current
    // set of deferreds
    var waiter;

    var obj = Object.create(null);
    obj.done = function done(fn) ***REMOVED***
        // no async things called
        if (!waiter) ***REMOVED***
            return fn(***REMOVED******REMOVED***);
        ***REMOVED***

        waiter.done(fn);

        // clear the waiter for the next template
        waiter = undefined;
    ***REMOVED***;

    obj.resolve = function resolve(fn, args) ***REMOVED***
        // we want to do async things, need a waiter for that
        if (!waiter) ***REMOVED***
            waiter = new Waiter();
        ***REMOVED***

        var id = '__' + gen_id() + '__';

        var cur_waiter = waiter;
        waiter.wait();

        args = [].slice.call(args);
        args.push(function(res) ***REMOVED***
            cur_waiter.resolve(id, res);
        ***REMOVED***)
        
        fn.apply(null, args);

        // return the id placeholder
        // this will be replaced later
        return id;
    ***REMOVED***;

    return obj;
***REMOVED***;

