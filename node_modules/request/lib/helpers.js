'use strict'

var jsonSafeStringify = require('json-stringify-safe')
var crypto = require('crypto')
var Buffer = require('safe-buffer').Buffer

var defer = typeof setImmediate === 'undefined'
  ? process.nextTick
  : setImmediate

function paramsHaveRequestBody (params) ***REMOVED***
  return (
    params.body ||
    params.requestBodyStream ||
    (params.json && typeof params.json !== 'boolean') ||
    params.multipart
  )
***REMOVED***

function safeStringify (obj, replacer) ***REMOVED***
  var ret
  try ***REMOVED***
    ret = JSON.stringify(obj, replacer)
  ***REMOVED*** catch (e) ***REMOVED***
    ret = jsonSafeStringify(obj, replacer)
  ***REMOVED***
  return ret
***REMOVED***

function md5 (str) ***REMOVED***
  return crypto.createHash('md5').update(str).digest('hex')
***REMOVED***

function isReadStream (rs) ***REMOVED***
  return rs.readable && rs.path && rs.mode
***REMOVED***

function toBase64 (str) ***REMOVED***
  return Buffer.from(str || '', 'utf8').toString('base64')
***REMOVED***

function copy (obj) ***REMOVED***
  var o = ***REMOVED******REMOVED***
  Object.keys(obj).forEach(function (i) ***REMOVED***
    o[i] = obj[i]
  ***REMOVED***)
  return o
***REMOVED***

function version () ***REMOVED***
  var numbers = process.version.replace('v', '').split('.')
  return ***REMOVED***
    major: parseInt(numbers[0], 10),
    minor: parseInt(numbers[1], 10),
    patch: parseInt(numbers[2], 10)
  ***REMOVED***
***REMOVED***

exports.paramsHaveRequestBody = paramsHaveRequestBody
exports.safeStringify = safeStringify
exports.md5 = md5
exports.isReadStream = isReadStream
exports.toBase64 = toBase64
exports.copy = copy
exports.version = version
exports.defer = defer
