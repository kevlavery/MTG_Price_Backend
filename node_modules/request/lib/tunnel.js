'use strict'

var url = require('url')
var tunnel = require('tunnel-agent')

var defaultProxyHeaderWhiteList = [
  'accept',
  'accept-charset',
  'accept-encoding',
  'accept-language',
  'accept-ranges',
  'cache-control',
  'content-encoding',
  'content-language',
  'content-location',
  'content-md5',
  'content-range',
  'content-type',
  'connection',
  'date',
  'expect',
  'max-forwards',
  'pragma',
  'referer',
  'te',
  'user-agent',
  'via'
]

var defaultProxyHeaderExclusiveList = [
  'proxy-authorization'
]

function constructProxyHost (uriObject) ***REMOVED***
  var port = uriObject.port
  var protocol = uriObject.protocol
  var proxyHost = uriObject.hostname + ':'

  if (port) ***REMOVED***
    proxyHost += port
  ***REMOVED*** else if (protocol === 'https:') ***REMOVED***
    proxyHost += '443'
  ***REMOVED*** else ***REMOVED***
    proxyHost += '80'
  ***REMOVED***

  return proxyHost
***REMOVED***

function constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) ***REMOVED***
  var whiteList = proxyHeaderWhiteList
    .reduce(function (set, header) ***REMOVED***
      set[header.toLowerCase()] = true
      return set
    ***REMOVED***, ***REMOVED******REMOVED***)

  return Object.keys(headers)
    .filter(function (header) ***REMOVED***
      return whiteList[header.toLowerCase()]
    ***REMOVED***)
    .reduce(function (set, header) ***REMOVED***
      set[header] = headers[header]
      return set
    ***REMOVED***, ***REMOVED******REMOVED***)
***REMOVED***

function constructTunnelOptions (request, proxyHeaders) ***REMOVED***
  var proxy = request.proxy

  var tunnelOptions = ***REMOVED***
    proxy: ***REMOVED***
      host: proxy.hostname,
      port: +proxy.port,
      proxyAuth: proxy.auth,
      headers: proxyHeaders
    ***REMOVED***,
    headers: request.headers,
    ca: request.ca,
    cert: request.cert,
    key: request.key,
    passphrase: request.passphrase,
    pfx: request.pfx,
    ciphers: request.ciphers,
    rejectUnauthorized: request.rejectUnauthorized,
    secureOptions: request.secureOptions,
    secureProtocol: request.secureProtocol
  ***REMOVED***

  return tunnelOptions
***REMOVED***

function constructTunnelFnName (uri, proxy) ***REMOVED***
  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')
  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')
  return [uriProtocol, proxyProtocol].join('Over')
***REMOVED***

function getTunnelFn (request) ***REMOVED***
  var uri = request.uri
  var proxy = request.proxy
  var tunnelFnName = constructTunnelFnName(uri, proxy)
  return tunnel[tunnelFnName]
***REMOVED***

function Tunnel (request) ***REMOVED***
  this.request = request
  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList
  this.proxyHeaderExclusiveList = []
  if (typeof request.tunnel !== 'undefined') ***REMOVED***
    this.tunnelOverride = request.tunnel
  ***REMOVED***
***REMOVED***

Tunnel.prototype.isEnabled = function () ***REMOVED***
  var self = this
  var request = self.request
    // Tunnel HTTPS by default. Allow the user to override this setting.

  // If self.tunnelOverride is set (the user specified a value), use it.
  if (typeof self.tunnelOverride !== 'undefined') ***REMOVED***
    return self.tunnelOverride
  ***REMOVED***

  // If the destination is HTTPS, tunnel.
  if (request.uri.protocol === 'https:') ***REMOVED***
    return true
  ***REMOVED***

  // Otherwise, do not use tunnel.
  return false
***REMOVED***

Tunnel.prototype.setup = function (options) ***REMOVED***
  var self = this
  var request = self.request

  options = options || ***REMOVED******REMOVED***

  if (typeof request.proxy === 'string') ***REMOVED***
    request.proxy = url.parse(request.proxy)
  ***REMOVED***

  if (!request.proxy || !request.tunnel) ***REMOVED***
    return false
  ***REMOVED***

  // Setup Proxy Header Exclusive List and White List
  if (options.proxyHeaderWhiteList) ***REMOVED***
    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList
  ***REMOVED***
  if (options.proxyHeaderExclusiveList) ***REMOVED***
    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList
  ***REMOVED***

  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)
  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)

  // Setup Proxy Headers and Proxy Headers Host
  // Only send the Proxy White Listed Header names
  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)
  proxyHeaders.host = constructProxyHost(request.uri)

  proxyHeaderExclusiveList.forEach(request.removeHeader, request)

  // Set Agent from Tunnel Data
  var tunnelFn = getTunnelFn(request)
  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)
  request.agent = tunnelFn(tunnelOptions)

  return true
***REMOVED***

Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList
Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList
exports.Tunnel = Tunnel
