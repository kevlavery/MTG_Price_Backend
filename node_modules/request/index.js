// Copyright 2010-2012 Mikeal Rogers
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

'use strict'

var extend = require('extend')
var cookies = require('./lib/cookies')
var helpers = require('./lib/helpers')

var paramsHaveRequestBody = helpers.paramsHaveRequestBody

// organize params for patch, post, put, head, del
function initParams (uri, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options
  ***REMOVED***

  var params = ***REMOVED******REMOVED***
  if (typeof options === 'object') ***REMOVED***
    extend(params, options, ***REMOVED***uri: uri***REMOVED***)
  ***REMOVED*** else if (typeof uri === 'string') ***REMOVED***
    extend(params, ***REMOVED***uri: uri***REMOVED***)
  ***REMOVED*** else ***REMOVED***
    extend(params, uri)
  ***REMOVED***

  params.callback = callback || params.callback
  return params
***REMOVED***

function request (uri, options, callback) ***REMOVED***
  if (typeof uri === 'undefined') ***REMOVED***
    throw new Error('undefined is not a valid uri or options object.')
  ***REMOVED***

  var params = initParams(uri, options, callback)

  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) ***REMOVED***
    throw new Error('HTTP HEAD requests MUST NOT include a request body.')
  ***REMOVED***

  return new request.Request(params)
***REMOVED***

function verbFunc (verb) ***REMOVED***
  var method = verb.toUpperCase()
  return function (uri, options, callback) ***REMOVED***
    var params = initParams(uri, options, callback)
    params.method = method
    return request(params, params.callback)
  ***REMOVED***
***REMOVED***

// define like this to please codeintel/intellisense IDEs
request.get = verbFunc('get')
request.head = verbFunc('head')
request.options = verbFunc('options')
request.post = verbFunc('post')
request.put = verbFunc('put')
request.patch = verbFunc('patch')
request.del = verbFunc('delete')
request['delete'] = verbFunc('delete')

request.jar = function (store) ***REMOVED***
  return cookies.jar(store)
***REMOVED***

request.cookie = function (str) ***REMOVED***
  return cookies.parse(str)
***REMOVED***

function wrapRequestMethod (method, options, requester, verb) ***REMOVED***
  return function (uri, opts, callback) ***REMOVED***
    var params = initParams(uri, opts, callback)

    var target = ***REMOVED******REMOVED***
    extend(true, target, options, params)

    target.pool = params.pool || options.pool

    if (verb) ***REMOVED***
      target.method = verb.toUpperCase()
    ***REMOVED***

    if (typeof requester === 'function') ***REMOVED***
      method = requester
    ***REMOVED***

    return method(target, target.callback)
  ***REMOVED***
***REMOVED***

request.defaults = function (options, requester) ***REMOVED***
  var self = this

  options = options || ***REMOVED******REMOVED***

  if (typeof options === 'function') ***REMOVED***
    requester = options
    options = ***REMOVED******REMOVED***
  ***REMOVED***

  var defaults = wrapRequestMethod(self, options, requester)

  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete']
  verbs.forEach(function (verb) ***REMOVED***
    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb)
  ***REMOVED***)

  defaults.cookie = wrapRequestMethod(self.cookie, options, requester)
  defaults.jar = self.jar
  defaults.defaults = self.defaults
  return defaults
***REMOVED***

request.forever = function (agentOptions, optionsArg) ***REMOVED***
  var options = ***REMOVED******REMOVED***
  if (optionsArg) ***REMOVED***
    extend(options, optionsArg)
  ***REMOVED***
  if (agentOptions) ***REMOVED***
    options.agentOptions = agentOptions
  ***REMOVED***

  options.forever = true
  return request.defaults(options)
***REMOVED***

// Exports

module.exports = request
request.Request = require('./request')
request.initParams = initParams

// Backwards compatibility for request.debug
Object.defineProperty(request, 'debug', ***REMOVED***
  enumerable: true,
  get: function () ***REMOVED***
    return request.Request.debug
  ***REMOVED***,
  set: function (debug) ***REMOVED***
    request.Request.debug = debug
  ***REMOVED***
***REMOVED***)
