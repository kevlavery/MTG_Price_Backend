/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 */

module.exports = callSiteToString

/**
 * Format a CallSite file location to a string.
 */

function callSiteFileLocation (callSite) ***REMOVED***
  var fileName
  var fileLocation = ''

  if (callSite.isNative()) ***REMOVED***
    fileLocation = 'native'
  ***REMOVED*** else if (callSite.isEval()) ***REMOVED***
    fileName = callSite.getScriptNameOrSourceURL()
    if (!fileName) ***REMOVED***
      fileLocation = callSite.getEvalOrigin()
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    fileName = callSite.getFileName()
  ***REMOVED***

  if (fileName) ***REMOVED***
    fileLocation += fileName

    var lineNumber = callSite.getLineNumber()
    if (lineNumber != null) ***REMOVED***
      fileLocation += ':' + lineNumber

      var columnNumber = callSite.getColumnNumber()
      if (columnNumber) ***REMOVED***
        fileLocation += ':' + columnNumber
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return fileLocation || 'unknown source'
***REMOVED***

/**
 * Format a CallSite to a string.
 */

function callSiteToString (callSite) ***REMOVED***
  var addSuffix = true
  var fileLocation = callSiteFileLocation(callSite)
  var functionName = callSite.getFunctionName()
  var isConstructor = callSite.isConstructor()
  var isMethodCall = !(callSite.isToplevel() || isConstructor)
  var line = ''

  if (isMethodCall) ***REMOVED***
    var methodName = callSite.getMethodName()
    var typeName = getConstructorName(callSite)

    if (functionName) ***REMOVED***
      if (typeName && functionName.indexOf(typeName) !== 0) ***REMOVED***
        line += typeName + '.'
      ***REMOVED***

      line += functionName

      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) ***REMOVED***
        line += ' [as ' + methodName + ']'
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      line += typeName + '.' + (methodName || '<anonymous>')
    ***REMOVED***
  ***REMOVED*** else if (isConstructor) ***REMOVED***
    line += 'new ' + (functionName || '<anonymous>')
  ***REMOVED*** else if (functionName) ***REMOVED***
    line += functionName
  ***REMOVED*** else ***REMOVED***
    addSuffix = false
    line += fileLocation
  ***REMOVED***

  if (addSuffix) ***REMOVED***
    line += ' (' + fileLocation + ')'
  ***REMOVED***

  return line
***REMOVED***

/**
 * Get constructor name of reviver.
 */

function getConstructorName (obj) ***REMOVED***
  var receiver = obj.receiver
  return (receiver.constructor && receiver.constructor.name) || null
***REMOVED***
