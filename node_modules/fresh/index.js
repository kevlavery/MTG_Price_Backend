/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * RegExp to check for no-cache token in Cache-Control.
 * @private
 */

var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/

/**
 * Module exports.
 * @public
 */

module.exports = fresh

/**
 * Check freshness of the response using request and response headers.
 *
 * @param ***REMOVED***Object***REMOVED*** reqHeaders
 * @param ***REMOVED***Object***REMOVED*** resHeaders
 * @return ***REMOVED***Boolean***REMOVED***
 * @public
 */

function fresh (reqHeaders, resHeaders) ***REMOVED***
  // fields
  var modifiedSince = reqHeaders['if-modified-since']
  var noneMatch = reqHeaders['if-none-match']

  // unconditional request
  if (!modifiedSince && !noneMatch) ***REMOVED***
    return false
  ***REMOVED***

  // Always return stale when Cache-Control: no-cache
  // to support end-to-end reload requests
  // https://tools.ietf.org/html/rfc2616#section-14.9.4
  var cacheControl = reqHeaders['cache-control']
  if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) ***REMOVED***
    return false
  ***REMOVED***

  // if-none-match
  if (noneMatch && noneMatch !== '*') ***REMOVED***
    var etag = resHeaders['etag']

    if (!etag) ***REMOVED***
      return false
    ***REMOVED***

    var etagStale = true
    var matches = parseTokenList(noneMatch)
    for (var i = 0; i < matches.length; i++) ***REMOVED***
      var match = matches[i]
      if (match === etag || match === 'W/' + etag || 'W/' + match === etag) ***REMOVED***
        etagStale = false
        break
      ***REMOVED***
    ***REMOVED***

    if (etagStale) ***REMOVED***
      return false
    ***REMOVED***
  ***REMOVED***

  // if-modified-since
  if (modifiedSince) ***REMOVED***
    var lastModified = resHeaders['last-modified']
    var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince))

    if (modifiedStale) ***REMOVED***
      return false
    ***REMOVED***
  ***REMOVED***

  return true
***REMOVED***

/**
 * Parse an HTTP Date into a number.
 *
 * @param ***REMOVED***string***REMOVED*** date
 * @private
 */

function parseHttpDate (date) ***REMOVED***
  var timestamp = date && Date.parse(date)

  // istanbul ignore next: guard against date.js Date.parse patching
  return typeof timestamp === 'number'
    ? timestamp
    : NaN
***REMOVED***

/**
 * Parse a HTTP token list.
 *
 * @param ***REMOVED***string***REMOVED*** str
 * @private
 */

function parseTokenList (str) ***REMOVED***
  var end = 0
  var list = []
  var start = 0

  // gather tokens
  for (var i = 0, len = str.length; i < len; i++) ***REMOVED***
    switch (str.charCodeAt(i)) ***REMOVED***
      case 0x20: /*   */
        if (start === end) ***REMOVED***
          start = end = i + 1
        ***REMOVED***
        break
      case 0x2c: /* , */
        list.push(str.substring(start, end))
        start = end = i + 1
        break
      default:
        end = i + 1
        break
    ***REMOVED***
  ***REMOVED***

  // final token
  list.push(str.substring(start, end))

  return list
***REMOVED***
