var Hash = require('hashish');
var optimist = require('../index');
var test = require('tap').test;

test('usageFail', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .demand(['x','y'])
            .argv;
    ***REMOVED***);
    t.same(
        r.result,
        ***REMOVED*** x : 10, z : 20, _ : [], $0 : './usage' ***REMOVED***
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage -x NUM -y NUM',
            'Options:',
            '  -x  [required]',
            '  -y  [required]',
            'Missing required arguments: y',
        ]
    );
    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
***REMOVED***);


test('usagePass', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .demand(['x','y'])
            .argv;
    ***REMOVED***);
    t.same(r, ***REMOVED***
        result : ***REMOVED*** x : 10, y : 20, _ : [], $0 : './usage' ***REMOVED***,
        errors : [],
        logs : [],
        exit : false,
    ***REMOVED***);
    t.end();
***REMOVED***);

test('checkPass', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(function (argv) ***REMOVED***
                if (!('x' in argv)) throw 'You forgot about -x';
                if (!('y' in argv)) throw 'You forgot about -y';
            ***REMOVED***)
            .argv;
    ***REMOVED***);
    t.same(r, ***REMOVED***
        result : ***REMOVED*** x : 10, y : 20, _ : [], $0 : './usage' ***REMOVED***,
        errors : [],
        logs : [],
        exit : false,
    ***REMOVED***);
    t.end();
***REMOVED***);

test('checkFail', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(function (argv) ***REMOVED***
                if (!('x' in argv)) throw 'You forgot about -x';
                if (!('y' in argv)) throw 'You forgot about -y';
            ***REMOVED***)
            .argv;
    ***REMOVED***);

    t.same(
        r.result,
        ***REMOVED*** x : 10, z : 20, _ : [], $0 : './usage' ***REMOVED***
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage -x NUM -y NUM',
            'You forgot about -y'
        ]
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
***REMOVED***);

test('checkCondPass', function (t) ***REMOVED***
    function checker (argv) ***REMOVED***
        return 'x' in argv && 'y' in argv;
    ***REMOVED***

    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -y 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(checker)
            .argv;
    ***REMOVED***);
    t.same(r, ***REMOVED***
        result : ***REMOVED*** x : 10, y : 20, _ : [], $0 : './usage' ***REMOVED***,
        errors : [],
        logs : [],
        exit : false,
    ***REMOVED***);
    t.end();
***REMOVED***);

test('checkCondFail', function (t) ***REMOVED***
    function checker (argv) ***REMOVED***
        return 'x' in argv && 'y' in argv;
    ***REMOVED***

    var r = checkUsage(function () ***REMOVED***
        return optimist('-x 10 -z 20'.split(' '))
            .usage('Usage: $0 -x NUM -y NUM')
            .check(checker)
            .argv;
    ***REMOVED***);

    t.same(
        r.result,
        ***REMOVED*** x : 10, z : 20, _ : [], $0 : './usage' ***REMOVED***
    );

    t.same(
        r.errors.join('\n').split(/\n+/).join('\n'),
        'Usage: ./usage -x NUM -y NUM\n'
        + 'Argument check failed: ' + checker.toString()
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
***REMOVED***);

test('countPass', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('1 2 3 --moo'.split(' '))
            .usage('Usage: $0 [x] [y] [z] ***REMOVED***OPTIONS***REMOVED***')
            .demand(3)
            .argv;
    ***REMOVED***);
    t.same(r, ***REMOVED***
        result : ***REMOVED*** _ : [ '1', '2', '3' ], moo : true, $0 : './usage' ***REMOVED***,
        errors : [],
        logs : [],
        exit : false,
    ***REMOVED***);
    t.end();
***REMOVED***);

test('countFail', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('1 2 --moo'.split(' '))
            .usage('Usage: $0 [x] [y] [z] ***REMOVED***OPTIONS***REMOVED***')
            .demand(3)
            .argv;
    ***REMOVED***);
    t.same(
        r.result,
        ***REMOVED*** _ : [ '1', '2' ], moo : true, $0 : './usage' ***REMOVED***
    );

    t.same(
        r.errors.join('\n').split(/\n+/),
        [
            'Usage: ./usage [x] [y] [z] ***REMOVED***OPTIONS***REMOVED***',
            'Not enough non-option arguments: got 2, need at least 3',
        ]
    );

    t.same(r.logs, []);
    t.ok(r.exit);
    t.end();
***REMOVED***);

test('defaultSingles', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('--foo 50 --baz 70 --powsy'.split(' '))
            .default('foo', 5)
            .default('bar', 6)
            .default('baz', 7)
            .argv
        ;
    ***REMOVED***);
    t.same(r.result, ***REMOVED***
        foo : '50',
        bar : 6,
        baz : '70',
        powsy : true,
        _ : [],
        $0 : './usage',
    ***REMOVED***);
    t.end();
***REMOVED***);

test('defaultAliases', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('')
            .alias('f', 'foo')
            .default('f', 5)
            .argv
        ;
    ***REMOVED***);
    t.same(r.result, ***REMOVED***
        f : '5',
        foo : '5',
        _ : [],
        $0 : './usage',
    ***REMOVED***);
    t.end();
***REMOVED***);

test('defaultHash', function (t) ***REMOVED***
    var r = checkUsage(function () ***REMOVED***
        return optimist('--foo 50 --baz 70'.split(' '))
            .default(***REMOVED*** foo : 10, bar : 20, quux : 30 ***REMOVED***)
            .argv
        ;
    ***REMOVED***);
    t.same(r.result, ***REMOVED***
        _ : [],
        $0 : './usage',
        foo : 50,
        baz : 70,
        bar : 20,
        quux : 30,
    ***REMOVED***);
    t.end();
***REMOVED***);

test('rebase', function (t) ***REMOVED***
    t.equal(
        optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
        './foo/bar/baz'
    );
    t.equal(
        optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
        '../../..'
    );
    t.equal(
        optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
        '../pow/zoom.txt'
    );
    t.end();
***REMOVED***);

function checkUsage (f) ***REMOVED***

    var exit = false;

    process._exit = process.exit;
    process._env = process.env;
    process._argv = process.argv;

    process.exit = function (t) ***REMOVED*** exit = true ***REMOVED***;
    process.env = Hash.merge(process.env, ***REMOVED*** _ : 'node' ***REMOVED***);
    process.argv = [ './usage' ];

    var errors = [];
    var logs = [];

    console._error = console.error;
    console.error = function (msg) ***REMOVED*** errors.push(msg) ***REMOVED***;
    console._log = console.log;
    console.log = function (msg) ***REMOVED*** logs.push(msg) ***REMOVED***;

    var result = f();

    process.exit = process._exit;
    process.env = process._env;
    process.argv = process._argv;

    console.error = console._error;
    console.log = console._log;

    return ***REMOVED***
        errors : errors,
        logs : logs,
        exit : exit,
        result : result,
    ***REMOVED***;
***REMOVED***;
