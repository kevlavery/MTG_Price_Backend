/**
 * Expose `pathtoRegexp`.
 */

module.exports = pathtoRegexp;

/**
 * Match matching groups in a regular expression.
 */
var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  ***REMOVED***String|RegExp|Array***REMOVED*** path
 * @param  ***REMOVED***Array***REMOVED*** keys
 * @param  ***REMOVED***Object***REMOVED*** options
 * @return ***REMOVED***RegExp***REMOVED***
 * @api private
 */

function pathtoRegexp(path, keys, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  keys = keys || [];
  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var extraOffset = 0;
  var keysOffset = keys.length;
  var i = 0;
  var name = 0;
  var m;

  if (path instanceof RegExp) ***REMOVED***
    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) ***REMOVED***
      keys.push(***REMOVED***
        name: name++,
        optional: false,
        offset: m.index
      ***REMOVED***);
    ***REMOVED***

    return path;
  ***REMOVED***

  if (Array.isArray(path)) ***REMOVED***
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) ***REMOVED***
      return pathtoRegexp(value, keys, options).source;
    ***REMOVED***);

    return new RegExp('(?:' + path.join('|') + ')', flags);
  ***REMOVED***

  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
    .replace(/\/\(/g, '/(?:')
    .replace(/([\/\.])/g, '\\$1')
    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) ***REMOVED***
      slash = slash || '';
      format = format || '';
      capture = capture || '([^\\/' + format + ']+?)';
      optional = optional || '';

      keys.push(***REMOVED***
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      ***REMOVED***);

      var result = ''
        + (optional ? '' : slash)
        + '(?:'
        + format + (optional ? slash : '') + capture
        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
        + ')'
        + optional;

      extraOffset += result.length - match.length;

      return result;
    ***REMOVED***)
    .replace(/\*/g, function (star, index) ***REMOVED***
      var len = keys.length

      while (len-- > keysOffset && keys[len].offset > index) ***REMOVED***
        keys[len].offset += 3; // Replacement length minus asterisk length.
      ***REMOVED***

      return '(.*)';
    ***REMOVED***);

  // This is a workaround for handling unnamed matching groups.
  while (m = MATCHING_GROUP_REGEXP.exec(path)) ***REMOVED***
    var escapeCount = 0;
    var index = m.index;

    while (path.charAt(--index) === '\\') ***REMOVED***
      escapeCount++;
    ***REMOVED***

    // It's possible to escape the bracket.
    if (escapeCount % 2 === 1) ***REMOVED***
      continue;
    ***REMOVED***

    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) ***REMOVED***
      keys.splice(keysOffset + i, 0, ***REMOVED***
        name: name++, // Unnamed matching groups must be consistently linear.
        optional: false,
        offset: m.index
      ***REMOVED***);
    ***REMOVED***

    i++;
  ***REMOVED***

  // If the path is non-ending, match until the end or a slash.
  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

  return new RegExp(path, flags);
***REMOVED***;
