***REMOVED******REMOVED***# def.definitions ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.errors ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.setupKeyword ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.$data ***REMOVED******REMOVED***

***REMOVED******REMOVED***
  var $rule = this
    , $definition = 'definition' + $lvl
    , $rDef = $rule.definition
    , $closingBraces = '';
  var $validate = $rDef.validate;
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
***REMOVED******REMOVED***

***REMOVED******REMOVED***? $isData && $rDef.$data ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
  ***REMOVED******REMOVED***
  var ***REMOVED******REMOVED***=$definition***REMOVED******REMOVED*** = RULES.custom['***REMOVED******REMOVED***=$keyword***REMOVED******REMOVED***'].definition;
  var ***REMOVED******REMOVED***=$validateCode***REMOVED******REMOVED*** = ***REMOVED******REMOVED***=$definition***REMOVED******REMOVED***.validate;
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***
  var $ruleErrs = $validateCode + '.errors'
    , $i = 'i' + $lvl
    , $ruleErr = 'ruleErr' + $lvl
    , $asyncKeyword = $rDef.async;

  if ($asyncKeyword && !it.async)
    throw new Error('async keyword in sync schema');
***REMOVED******REMOVED***


***REMOVED******REMOVED***? !($inline || $macro) ***REMOVED******REMOVED******REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED*** = null;***REMOVED******REMOVED***?***REMOVED******REMOVED***
var ***REMOVED******REMOVED***=$errs***REMOVED******REMOVED*** = errors;
var ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED***;

***REMOVED******REMOVED***## def.callRuleValidate:
  ***REMOVED******REMOVED***=$validateCode***REMOVED******REMOVED***.call(
    ***REMOVED******REMOVED***? it.opts.passContext ***REMOVED******REMOVED***this***REMOVED******REMOVED***??***REMOVED******REMOVED***self***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $compile || $rDef.schema === false ***REMOVED******REMOVED***
      , ***REMOVED******REMOVED***=$data***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      , ***REMOVED******REMOVED***=$schemaValue***REMOVED******REMOVED***
      , ***REMOVED******REMOVED***=$data***REMOVED******REMOVED***
      , validate.schema***REMOVED******REMOVED***=it.schemaPath***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    , ***REMOVED******REMOVED***# def.dataPath ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.passParentData ***REMOVED******REMOVED***
    , rootData
  )
#***REMOVED******REMOVED***

***REMOVED******REMOVED***## def.extendErrors:_inline:
  for (var ***REMOVED******REMOVED***=$i***REMOVED******REMOVED***=***REMOVED******REMOVED***=$errs***REMOVED******REMOVED***; ***REMOVED******REMOVED***=$i***REMOVED******REMOVED***<errors; ***REMOVED******REMOVED***=$i***REMOVED******REMOVED***++) ***REMOVED***
    var ***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED*** = vErrors[***REMOVED******REMOVED***=$i***REMOVED******REMOVED***];
    if (***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED***.dataPath === undefined)
      ***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED***.dataPath = (dataPath || '') + ***REMOVED******REMOVED***= it.errorPath ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***# _inline ? 'if (\***REMOVED***\***REMOVED***=$ruleErr\***REMOVED***\***REMOVED***.schemaPath === undefined) ***REMOVED***' : '' ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED***.schemaPath = "***REMOVED******REMOVED***=$errSchemaPath***REMOVED******REMOVED***";
    ***REMOVED******REMOVED***# _inline ? '***REMOVED***' : '' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? it.opts.verbose ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED***.schema = ***REMOVED******REMOVED***=$schemaValue***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***=$ruleErr***REMOVED******REMOVED***.data = ***REMOVED******REMOVED***=$data***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED***
#***REMOVED******REMOVED***


***REMOVED******REMOVED***? $isData && $rDef.$data ***REMOVED******REMOVED***
  ***REMOVED******REMOVED*** $closingBraces += '***REMOVED***'; ***REMOVED******REMOVED***
  if (***REMOVED******REMOVED***=$schemaValue***REMOVED******REMOVED*** === undefined) ***REMOVED***
    ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = true;
  ***REMOVED*** else ***REMOVED***
  ***REMOVED******REMOVED***? $validateSchema ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** $closingBraces += '***REMOVED***'; ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = ***REMOVED******REMOVED***=$definition***REMOVED******REMOVED***.validateSchema(***REMOVED******REMOVED***=$schemaValue***REMOVED******REMOVED***);
    if (***REMOVED******REMOVED***=$valid***REMOVED******REMOVED***) ***REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $inline ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $rDef.statements ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***= $ruleValidate.validate ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***??***REMOVED******REMOVED***
    ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = ***REMOVED******REMOVED***= $ruleValidate.validate ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?? $macro ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.setupNextLevel ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
  ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.setCompositeRule ***REMOVED******REMOVED***
  ***REMOVED******REMOVED*** var $code = it.validate($it).replace(/validate\.schema/g, $validateCode); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.resetCompositeRule ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***= $code ***REMOVED******REMOVED***
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.beginDefOut***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.callRuleValidate ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.storeDefOut:def_callRuleValidate ***REMOVED******REMOVED***

  ***REMOVED******REMOVED***? $rDef.errors === false ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = ***REMOVED******REMOVED***? $asyncKeyword ***REMOVED******REMOVED******REMOVED******REMOVED***=it.yieldAwait***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED******REMOVED******REMOVED***= def_callRuleValidate ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***??***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $asyncKeyword ***REMOVED******REMOVED***
      ***REMOVED******REMOVED*** $ruleErrs = 'customErrors' + $lvl; ***REMOVED******REMOVED***
      var ***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED*** = null;
      try ***REMOVED***
        ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = ***REMOVED******REMOVED***=it.yieldAwait***REMOVED******REMOVED******REMOVED******REMOVED***= def_callRuleValidate ***REMOVED******REMOVED***;
      ***REMOVED*** catch (e) ***REMOVED***
        ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = false;
        if (e instanceof ValidationError) ***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED*** = e.errors;
        else throw e;
      ***REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      ***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED*** = null;
      ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = ***REMOVED******REMOVED***= def_callRuleValidate ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $rDef.modifying ***REMOVED******REMOVED***
  if (***REMOVED******REMOVED***=$parentData***REMOVED******REMOVED***) ***REMOVED******REMOVED***=$data***REMOVED******REMOVED*** = ***REMOVED******REMOVED***=$parentData***REMOVED******REMOVED***[***REMOVED******REMOVED***=$parentDataProperty***REMOVED******REMOVED***];
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***= $closingBraces ***REMOVED******REMOVED***

***REMOVED******REMOVED***## def.notValidationResult:
  ***REMOVED******REMOVED***? $rDef.valid === undefined ***REMOVED******REMOVED***
    !***REMOVED******REMOVED***? $macro ***REMOVED******REMOVED******REMOVED******REMOVED***=$nextValid***REMOVED******REMOVED******REMOVED******REMOVED***??***REMOVED******REMOVED******REMOVED******REMOVED***=$valid***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***??***REMOVED******REMOVED***
    ***REMOVED******REMOVED***= !$rDef.valid ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
#***REMOVED******REMOVED***

***REMOVED******REMOVED***? $rDef.valid ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED*** if (true) ***REMOVED*** ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  if (***REMOVED******REMOVED***# def.notValidationResult ***REMOVED******REMOVED***) ***REMOVED***
    ***REMOVED******REMOVED*** $errorKeyword = $rule.keyword; ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.beginDefOut***REMOVED******REMOVED***
      ***REMOVED******REMOVED***# def.error:'custom' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.storeDefOut:def_customError ***REMOVED******REMOVED***

    ***REMOVED******REMOVED***? $inline ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rDef.errors ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? $rDef.errors != 'full' ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***# def.extendErrors:true ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***??***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? $rDef.errors === false***REMOVED******REMOVED***
          ***REMOVED******REMOVED***= def_customError ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***??***REMOVED******REMOVED***
          if (***REMOVED******REMOVED***=$errs***REMOVED******REMOVED*** == errors) ***REMOVED***
            ***REMOVED******REMOVED***= def_customError ***REMOVED******REMOVED***
          ***REMOVED*** else ***REMOVED***
            ***REMOVED******REMOVED***# def.extendErrors:true ***REMOVED******REMOVED***
          ***REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?? $macro ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***# def.extraError:'custom' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rDef.errors === false***REMOVED******REMOVED***
        ***REMOVED******REMOVED***= def_customError ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***??***REMOVED******REMOVED***
        if (Array.isArray(***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED***)) ***REMOVED***
          if (vErrors === null) vErrors = ***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED***;
          else vErrors = vErrors.concat(***REMOVED******REMOVED***=$ruleErrs***REMOVED******REMOVED***);
          errors = vErrors.length;
          ***REMOVED******REMOVED***# def.extendErrors:false ***REMOVED******REMOVED***
        ***REMOVED*** else ***REMOVED***
          ***REMOVED******REMOVED***= def_customError ***REMOVED******REMOVED***
        ***REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***

  ***REMOVED*** ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED*** else ***REMOVED*** ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***
