***REMOVED******REMOVED***# def.definitions ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.errors ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.defaults ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.coerce ***REMOVED******REMOVED***

***REMOVED******REMOVED*** /**
    * schema compilation (render) time:
    * it = ***REMOVED*** schema, RULES, _validate, opts ***REMOVED***
    * it.validate - this template function,
    *   it is used recursively to generate code for subschemas
    *
    * runtime:
    * "validate" is a variable name to which this function will be assigned
    * validateRef etc. are defined in the parent scope in index.js
    */ ***REMOVED******REMOVED***

***REMOVED******REMOVED***
  var $async = it.schema.$async === true
    , $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref')
    , $id = it.self._getId(it.schema);
***REMOVED******REMOVED***

***REMOVED******REMOVED***? it.isTop ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
      it.async = true;
      var $es7 = it.opts.async == 'es7';
      it.yieldAwait = $es7 ? 'await' : 'yield';
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***

  var validate =
    ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $es7 ***REMOVED******REMOVED***
        (async function
      ***REMOVED******REMOVED***??***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? it.opts.async != '*'***REMOVED******REMOVED***co.wrap***REMOVED******REMOVED***?***REMOVED******REMOVED***(function*
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      (function
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        (data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
          'use strict';
          ***REMOVED******REMOVED***? $id && (it.opts.sourceCode || it.opts.processCode) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***= '/\*# sourceURL=' + $id + ' */' ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref) ***REMOVED******REMOVED***
  ***REMOVED******REMOVED*** var $keyword = 'false schema'; ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.setupKeyword ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? it.schema === false***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? it.isTop***REMOVED******REMOVED***
      ***REMOVED******REMOVED*** $breakOnError = true; ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      var ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = false;
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.error:'false schema' ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***??***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? it.isTop***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
        return data;
      ***REMOVED******REMOVED***??***REMOVED******REMOVED***
        validate.errors = null;
        return true;
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      var ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = true;
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***

  ***REMOVED******REMOVED***? it.isTop***REMOVED******REMOVED***
    ***REMOVED***);
    return validate;
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***

  ***REMOVED******REMOVED*** return out; ***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***


***REMOVED******REMOVED***? it.isTop ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    var $top = it.isTop
      , $lvl = it.level = 0
      , $dataLvl = it.dataLevel = 0
      , $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;

    it.dataPathArr = [undefined];
  ***REMOVED******REMOVED***

  var vErrors = null; ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
  var errors = 0;     ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
  if (rootData === undefined) rootData = data; ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    var $lvl = it.level
      , $dataLvl = it.dataLevel
      , $data = 'data' + ($dataLvl || '');

    if ($id) it.baseId = it.resolve.url(it.baseId, $id);

    if ($async && !it.async) throw new Error('async schema in sync schema');
  ***REMOVED******REMOVED***

  var errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED*** = errors;
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***
  var $valid = 'valid' + $lvl
    , $breakOnError = !it.opts.allErrors
    , $closingBraces1 = ''
    , $closingBraces2 = '';

  var $errorKeyword;
  var $typeSchema = it.schema.type
    , $typeIsArray = Array.isArray($typeSchema);

  if ($typeIsArray && $typeSchema.length == 1) ***REMOVED***
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  ***REMOVED***
***REMOVED******REMOVED***

***REMOVED******REMOVED***## def.checkType:
  ***REMOVED******REMOVED***
    var $schemaPath = it.schemaPath + '.type'
      , $errSchemaPath = it.errSchemaPath + '/type'
      , $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
  ***REMOVED******REMOVED***

  if (***REMOVED******REMOVED***= it.util[$method]($typeSchema, $data, true) ***REMOVED******REMOVED***) ***REMOVED***
#***REMOVED******REMOVED***

***REMOVED******REMOVED***? it.schema.$ref && $refKeywords ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? it.opts.extendRefs == 'fail' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)'); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?? it.opts.extendRefs !== true ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $typeSchema ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? it.opts.coerceTypes ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***

  ***REMOVED******REMOVED*** var $rulesGroup = it.RULES.types[$typeSchema]; ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $coerceToTypes || $typeIsArray || $rulesGroup === true ||
    ($rulesGroup && !$shouldUseGroup($rulesGroup)) ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
      var $schemaPath = it.schemaPath + '.type'
        , $errSchemaPath = it.errSchemaPath + '/type';
    ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.checkType ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $coerceToTypes ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***# def.coerceType ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***??***REMOVED******REMOVED***
        ***REMOVED******REMOVED***# def.error:'type' ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***


***REMOVED******REMOVED***? it.schema.$ref && !$refKeywords ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***= it.RULES.all.$ref.code(it, '$ref') ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
    ***REMOVED***
    if (errors === ***REMOVED******REMOVED***?$top***REMOVED******REMOVED***0***REMOVED******REMOVED***??***REMOVED******REMOVED***errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED***) ***REMOVED***
    ***REMOVED******REMOVED*** $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? it.opts.v5 && it.schema.patternGroups ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** it.logger.warn('keyword "patternGroups" is deprecated and disabled. Use option patternGroups: true to enable.'); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***~ it.RULES:$rulesGroup ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $shouldUseGroup($rulesGroup) ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rulesGroup.type ***REMOVED******REMOVED***
        if (***REMOVED******REMOVED***= it.util.checkDataType($rulesGroup.type, $data) ***REMOVED******REMOVED***) ***REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? it.opts.useDefaults && !it.compositeRule ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***? $rulesGroup.type == 'object' && it.schema.properties ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.defaultProperties ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?? $rulesGroup.type == 'array' && Array.isArray(it.schema.items) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.defaultItems ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***~ $rulesGroup.rules:$rule ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***? $shouldUseRule($rule) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED*** var $code = $rule.code(it, $rule.keyword, $rulesGroup.type); ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***? $code ***REMOVED******REMOVED***
              ***REMOVED******REMOVED***= $code ***REMOVED******REMOVED***
              ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
                ***REMOVED******REMOVED*** $closingBraces1 += '***REMOVED***'; ***REMOVED******REMOVED***
              ***REMOVED******REMOVED***?***REMOVED******REMOVED***
            ***REMOVED******REMOVED***?***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***~***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***= $closingBraces1 ***REMOVED******REMOVED***
          ***REMOVED******REMOVED*** $closingBraces1 = ''; ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rulesGroup.type ***REMOVED******REMOVED***
        ***REMOVED***
        ***REMOVED******REMOVED***? $typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes ***REMOVED******REMOVED***
          else ***REMOVED***
            ***REMOVED******REMOVED***
              var $schemaPath = it.schemaPath + '.type'
                , $errSchemaPath = it.errSchemaPath + '/type';
            ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.error:'type' ***REMOVED******REMOVED***
          ***REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***

      ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
        if (errors === ***REMOVED******REMOVED***?$top***REMOVED******REMOVED***0***REMOVED******REMOVED***??***REMOVED******REMOVED***errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED***) ***REMOVED***
        ***REMOVED******REMOVED*** $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***~***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED*** ***REMOVED******REMOVED***= $closingBraces2 ***REMOVED******REMOVED*** ***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $top ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
      if (errors === 0) return data;           ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
      else throw new ValidationError(vErrors); ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      validate.errors = vErrors; ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
      return errors === 0;       ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED***);

  return validate;
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  var ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = errors === errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED***;
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***# def.cleanUp ***REMOVED******REMOVED***

***REMOVED******REMOVED***? $top ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.finalCleanUp ***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***
  function $shouldUseGroup($rulesGroup) ***REMOVED***
    var rules = $rulesGroup.rules;
    for (var i=0; i < rules.length; i++)
      if ($shouldUseRule(rules[i]))
        return true;
  ***REMOVED***

  function $shouldUseRule($rule) ***REMOVED***
    return it.schema[$rule.keyword] !== undefined ||
           ($rule.implements && $ruleImplementsSomeKeyword($rule));
  ***REMOVED***

  function $ruleImplementsSomeKeyword($rule) ***REMOVED***
    var impl = $rule.implements;
    for (var i=0; i < impl.length; i++)
      if (it.schema[impl[i]] !== undefined)
        return true;
  ***REMOVED***
***REMOVED******REMOVED***
