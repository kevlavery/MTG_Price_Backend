'use strict';
module.exports = function generate_propertyNames(it, $keyword, $ruleType) ***REMOVED***
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (it.util.schemaHasRules($schema, it.RULES.all)) ***REMOVED***
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $i = 'i' + $lvl,
      $invalidName = '\' + ' + $key + ' + \'',
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    out += ' var ' + ($errs) + ' = errors; ';
    if ($ownProperties) ***REMOVED***
      out += ' var ' + ($dataProperties) + ' = undefined; ';
    ***REMOVED***
    if ($ownProperties) ***REMOVED***
      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) ***REMOVED*** var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
    ***REMOVED*** else ***REMOVED***
      out += ' for (var ' + ($key) + ' in ' + ($data) + ') ***REMOVED*** ';
    ***REMOVED***
    out += ' var startErrs' + ($lvl) + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) ***REMOVED***
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    ***REMOVED*** else ***REMOVED***
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    ***REMOVED***
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + ($nextValid) + ') ***REMOVED*** for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) ***REMOVED*** vErrors[' + ($i) + '].propertyName = ' + ($key) + '; ***REMOVED***   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) ***REMOVED***
      out += ' ***REMOVED*** keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: ***REMOVED*** propertyName: \'' + ($invalidName) + '\' ***REMOVED*** ';
      if (it.opts.messages !== false) ***REMOVED***
        out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
      ***REMOVED***
      if (it.opts.verbose) ***REMOVED***
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      ***REMOVED***
      out += ' ***REMOVED*** ';
    ***REMOVED*** else ***REMOVED***
      out += ' ***REMOVED******REMOVED*** ';
    ***REMOVED***
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) ***REMOVED*** /* istanbul ignore if */
      if (it.async) ***REMOVED***
        out += ' throw new ValidationError(vErrors); ';
      ***REMOVED*** else ***REMOVED***
        out += ' validate.errors = vErrors; return false; ';
      ***REMOVED***
    ***REMOVED***
    if ($breakOnError) ***REMOVED***
      out += ' break; ';
    ***REMOVED***
    out += ' ***REMOVED*** ***REMOVED***';
  ***REMOVED***
  if ($breakOnError) ***REMOVED***
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) ***REMOVED***';
  ***REMOVED***
  out = it.util.cleanUpCode(out);
  return out;
***REMOVED***
