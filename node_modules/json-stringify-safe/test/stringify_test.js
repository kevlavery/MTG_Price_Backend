var Sinon = require("sinon")
var stringify = require("..")
function jsonify(obj) ***REMOVED*** return JSON.stringify(obj, null, 2) ***REMOVED***

describe("Stringify", function() ***REMOVED***
  it("must stringify circular objects", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice"***REMOVED***
    obj.self = obj
    var json = stringify(obj, null, 2)
    json.must.eql(jsonify(***REMOVED***name: "Alice", self: "[Circular ~]"***REMOVED***))
  ***REMOVED***)

  it("must stringify circular objects with intermediaries", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice"***REMOVED***
    obj.identity = ***REMOVED***self: obj***REMOVED***
    var json = stringify(obj, null, 2)
    json.must.eql(jsonify(***REMOVED***name: "Alice", identity: ***REMOVED***self: "[Circular ~]"***REMOVED******REMOVED***))
  ***REMOVED***)

  it("must stringify circular objects deeper", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice", child: ***REMOVED***name: "Bob"***REMOVED******REMOVED***
    obj.child.self = obj.child

    stringify(obj, null, 2).must.eql(jsonify(***REMOVED***
      name: "Alice",
      child: ***REMOVED***name: "Bob", self: "[Circular ~.child]"***REMOVED***
    ***REMOVED***))
  ***REMOVED***)

  it("must stringify circular objects deeper with intermediaries", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice", child: ***REMOVED***name: "Bob"***REMOVED******REMOVED***
    obj.child.identity = ***REMOVED***self: obj.child***REMOVED***

    stringify(obj, null, 2).must.eql(jsonify(***REMOVED***
      name: "Alice",
      child: ***REMOVED***name: "Bob", identity: ***REMOVED***self: "[Circular ~.child]"***REMOVED******REMOVED***
    ***REMOVED***))
  ***REMOVED***)

  it("must stringify circular objects in an array", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice"***REMOVED***
    obj.self = [obj, obj]

    stringify(obj, null, 2).must.eql(jsonify(***REMOVED***
      name: "Alice", self: ["[Circular ~]", "[Circular ~]"]
    ***REMOVED***))
  ***REMOVED***)

  it("must stringify circular objects deeper in an array", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice", children: [***REMOVED***name: "Bob"***REMOVED***, ***REMOVED***name: "Eve"***REMOVED***]***REMOVED***
    obj.children[0].self = obj.children[0]
    obj.children[1].self = obj.children[1]

    stringify(obj, null, 2).must.eql(jsonify(***REMOVED***
      name: "Alice",
      children: [
        ***REMOVED***name: "Bob", self: "[Circular ~.children.0]"***REMOVED***,
        ***REMOVED***name: "Eve", self: "[Circular ~.children.1]"***REMOVED***
      ]
    ***REMOVED***))
  ***REMOVED***)

  it("must stringify circular arrays", function() ***REMOVED***
    var obj = []
    obj.push(obj)
    obj.push(obj)
    var json = stringify(obj, null, 2)
    json.must.eql(jsonify(["[Circular ~]", "[Circular ~]"]))
  ***REMOVED***)

  it("must stringify circular arrays with intermediaries", function() ***REMOVED***
    var obj = []
    obj.push(***REMOVED***name: "Alice", self: obj***REMOVED***)
    obj.push(***REMOVED***name: "Bob", self: obj***REMOVED***)

    stringify(obj, null, 2).must.eql(jsonify([
      ***REMOVED***name: "Alice", self: "[Circular ~]"***REMOVED***,
      ***REMOVED***name: "Bob", self: "[Circular ~]"***REMOVED***
    ]))
  ***REMOVED***)

  it("must stringify repeated objects in objects", function() ***REMOVED***
    var obj = ***REMOVED******REMOVED***
    var alice = ***REMOVED***name: "Alice"***REMOVED***
    obj.alice1 = alice
    obj.alice2 = alice

    stringify(obj, null, 2).must.eql(jsonify(***REMOVED***
      alice1: ***REMOVED***name: "Alice"***REMOVED***,
      alice2: ***REMOVED***name: "Alice"***REMOVED***
    ***REMOVED***))
  ***REMOVED***)

  it("must stringify repeated objects in arrays", function() ***REMOVED***
    var alice = ***REMOVED***name: "Alice"***REMOVED***
    var obj = [alice, alice]
    var json = stringify(obj, null, 2)
    json.must.eql(jsonify([***REMOVED***name: "Alice"***REMOVED***, ***REMOVED***name: "Alice"***REMOVED***]))
  ***REMOVED***)

  it("must call given decycler and use its output", function() ***REMOVED***
    var obj = ***REMOVED******REMOVED***
    obj.a = obj
    obj.b = obj

    var decycle = Sinon.spy(function() ***REMOVED*** return decycle.callCount ***REMOVED***)
    var json = stringify(obj, null, 2, decycle)
    json.must.eql(jsonify(***REMOVED***a: 1, b: 2***REMOVED***, null, 2))

    decycle.callCount.must.equal(2)
    decycle.thisValues[0].must.equal(obj)
    decycle.args[0][0].must.equal("a")
    decycle.args[0][1].must.equal(obj)
    decycle.thisValues[1].must.equal(obj)
    decycle.args[1][0].must.equal("b")
    decycle.args[1][1].must.equal(obj)
  ***REMOVED***)

  it("must call replacer and use its output", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice", child: ***REMOVED***name: "Bob"***REMOVED******REMOVED***

    var replacer = Sinon.spy(bangString)
    var json = stringify(obj, replacer, 2)
    json.must.eql(jsonify(***REMOVED***name: "Alice!", child: ***REMOVED***name: "Bob!"***REMOVED******REMOVED***))

    replacer.callCount.must.equal(4)
    replacer.args[0][0].must.equal("")
    replacer.args[0][1].must.equal(obj)
    replacer.thisValues[1].must.equal(obj)
    replacer.args[1][0].must.equal("name")
    replacer.args[1][1].must.equal("Alice")
    replacer.thisValues[2].must.equal(obj)
    replacer.args[2][0].must.equal("child")
    replacer.args[2][1].must.equal(obj.child)
    replacer.thisValues[3].must.equal(obj.child)
    replacer.args[3][0].must.equal("name")
    replacer.args[3][1].must.equal("Bob")
  ***REMOVED***)

  it("must call replacer after describing circular references", function() ***REMOVED***
    var obj = ***REMOVED***name: "Alice"***REMOVED***
    obj.self = obj

    var replacer = Sinon.spy(bangString)
    var json = stringify(obj, replacer, 2)
    json.must.eql(jsonify(***REMOVED***name: "Alice!", self: "[Circular ~]!"***REMOVED***))

    replacer.callCount.must.equal(3)
    replacer.args[0][0].must.equal("")
    replacer.args[0][1].must.equal(obj)
    replacer.thisValues[1].must.equal(obj)
    replacer.args[1][0].must.equal("name")
    replacer.args[1][1].must.equal("Alice")
    replacer.thisValues[2].must.equal(obj)
    replacer.args[2][0].must.equal("self")
    replacer.args[2][1].must.equal("[Circular ~]")
  ***REMOVED***)

  it("must call given decycler and use its output for nested objects",
    function() ***REMOVED***
    var obj = ***REMOVED******REMOVED***
    obj.a = obj
    obj.b = ***REMOVED***self: obj***REMOVED***

    var decycle = Sinon.spy(function() ***REMOVED*** return decycle.callCount ***REMOVED***)
    var json = stringify(obj, null, 2, decycle)
    json.must.eql(jsonify(***REMOVED***a: 1, b: ***REMOVED***self: 2***REMOVED******REMOVED***))

    decycle.callCount.must.equal(2)
    decycle.args[0][0].must.equal("a")
    decycle.args[0][1].must.equal(obj)
    decycle.args[1][0].must.equal("self")
    decycle.args[1][1].must.equal(obj)
  ***REMOVED***)

  it("must use decycler's output when it returned null", function() ***REMOVED***
    var obj = ***REMOVED***a: "b"***REMOVED***
    obj.self = obj
    obj.selves = [obj, obj]

    function decycle() ***REMOVED*** return null ***REMOVED***
    stringify(obj, null, 2, decycle).must.eql(jsonify(***REMOVED***
      a: "b",
      self: null,
      selves: [null, null]
    ***REMOVED***))
  ***REMOVED***)

  it("must use decycler's output when it returned undefined", function() ***REMOVED***
    var obj = ***REMOVED***a: "b"***REMOVED***
    obj.self = obj
    obj.selves = [obj, obj]

    function decycle() ***REMOVED******REMOVED***
    stringify(obj, null, 2, decycle).must.eql(jsonify(***REMOVED***
      a: "b",
      selves: [null, null]
    ***REMOVED***))
  ***REMOVED***)

  it("must throw given a decycler that returns a cycle", function() ***REMOVED***
    var obj = ***REMOVED******REMOVED***
    obj.self = obj
    var err
    function identity(key, value) ***REMOVED*** return value ***REMOVED***
    try ***REMOVED*** stringify(obj, null, 2, identity) ***REMOVED*** catch (ex) ***REMOVED*** err = ex ***REMOVED***
    err.must.be.an.instanceof(TypeError)
  ***REMOVED***)

  describe(".getSerialize", function() ***REMOVED***
    it("must stringify circular objects", function() ***REMOVED***
      var obj = ***REMOVED***a: "b"***REMOVED***
      obj.circularRef = obj
      obj.list = [obj, obj]

      var json = JSON.stringify(obj, stringify.getSerialize(), 2)
      json.must.eql(jsonify(***REMOVED***
        "a": "b",
        "circularRef": "[Circular ~]",
        "list": ["[Circular ~]", "[Circular ~]"]
      ***REMOVED***))
    ***REMOVED***)

    // This is the behavior as of Mar 3, 2015.
    // The serializer function keeps state inside the returned function and
    // so far I'm not sure how to not do that. JSON.stringify's replacer is not
    // called _after_ serialization.
    xit("must return a function that could be called twice", function() ***REMOVED***
      var obj = ***REMOVED***name: "Alice"***REMOVED***
      obj.self = obj

      var json
      var serializer = stringify.getSerialize()

      json = JSON.stringify(obj, serializer, 2)
      json.must.eql(jsonify(***REMOVED***name: "Alice", self: "[Circular ~]"***REMOVED***))

      json = JSON.stringify(obj, serializer, 2)
      json.must.eql(jsonify(***REMOVED***name: "Alice", self: "[Circular ~]"***REMOVED***))
    ***REMOVED***)
  ***REMOVED***)
***REMOVED***)

function bangString(key, value) ***REMOVED***
  return typeof value == "string" ? value + "!" : value
***REMOVED***
