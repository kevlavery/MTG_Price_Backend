// Copyright (c) 2012, Mark Cavage. All rights reserved.
// Copyright 2015 Joyent, Inc.

var assert = require('assert');
var Stream = require('stream').Stream;
var util = require('util');


///--- Globals

/* JSSTYLED */
var UUID_REGEXP = /^[a-fA-F0-9]***REMOVED***8***REMOVED***-[a-fA-F0-9]***REMOVED***4***REMOVED***-[a-fA-F0-9]***REMOVED***4***REMOVED***-[a-fA-F0-9]***REMOVED***4***REMOVED***-[a-fA-F0-9]***REMOVED***12***REMOVED***$/;


///--- Internal

function _capitalize(str) ***REMOVED***
    return (str.charAt(0).toUpperCase() + str.slice(1));
***REMOVED***

function _toss(name, expected, oper, arg, actual) ***REMOVED***
    throw new assert.AssertionError(***REMOVED***
        message: util.format('%s (%s) is required', name, expected),
        actual: (actual === undefined) ? typeof (arg) : actual(arg),
        expected: expected,
        operator: oper || '===',
        stackStartFunction: _toss.caller
    ***REMOVED***);
***REMOVED***

function _getClass(arg) ***REMOVED***
    return (Object.prototype.toString.call(arg).slice(8, -1));
***REMOVED***

function noop() ***REMOVED***
    // Why even bother with asserts?
***REMOVED***


///--- Exports

var types = ***REMOVED***
    bool: ***REMOVED***
        check: function (arg) ***REMOVED*** return typeof (arg) === 'boolean'; ***REMOVED***
    ***REMOVED***,
    func: ***REMOVED***
        check: function (arg) ***REMOVED*** return typeof (arg) === 'function'; ***REMOVED***
    ***REMOVED***,
    string: ***REMOVED***
        check: function (arg) ***REMOVED*** return typeof (arg) === 'string'; ***REMOVED***
    ***REMOVED***,
    object: ***REMOVED***
        check: function (arg) ***REMOVED***
            return typeof (arg) === 'object' && arg !== null;
        ***REMOVED***
    ***REMOVED***,
    number: ***REMOVED***
        check: function (arg) ***REMOVED***
            return typeof (arg) === 'number' && !isNaN(arg);
        ***REMOVED***
    ***REMOVED***,
    finite: ***REMOVED***
        check: function (arg) ***REMOVED***
            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);
        ***REMOVED***
    ***REMOVED***,
    buffer: ***REMOVED***
        check: function (arg) ***REMOVED*** return Buffer.isBuffer(arg); ***REMOVED***,
        operator: 'Buffer.isBuffer'
    ***REMOVED***,
    array: ***REMOVED***
        check: function (arg) ***REMOVED*** return Array.isArray(arg); ***REMOVED***,
        operator: 'Array.isArray'
    ***REMOVED***,
    stream: ***REMOVED***
        check: function (arg) ***REMOVED*** return arg instanceof Stream; ***REMOVED***,
        operator: 'instanceof',
        actual: _getClass
    ***REMOVED***,
    date: ***REMOVED***
        check: function (arg) ***REMOVED*** return arg instanceof Date; ***REMOVED***,
        operator: 'instanceof',
        actual: _getClass
    ***REMOVED***,
    regexp: ***REMOVED***
        check: function (arg) ***REMOVED*** return arg instanceof RegExp; ***REMOVED***,
        operator: 'instanceof',
        actual: _getClass
    ***REMOVED***,
    uuid: ***REMOVED***
        check: function (arg) ***REMOVED***
            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);
        ***REMOVED***,
        operator: 'isUUID'
    ***REMOVED***
***REMOVED***;

function _setExports(ndebug) ***REMOVED***
    var keys = Object.keys(types);
    var out;

    /* re-export standard assert */
    if (process.env.NODE_NDEBUG) ***REMOVED***
        out = noop;
    ***REMOVED*** else ***REMOVED***
        out = function (arg, msg) ***REMOVED***
            if (!arg) ***REMOVED***
                _toss(msg, 'true', arg);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    /* standard checks */
    keys.forEach(function (k) ***REMOVED***
        if (ndebug) ***REMOVED***
            out[k] = noop;
            return;
        ***REMOVED***
        var type = types[k];
        out[k] = function (arg, msg) ***REMOVED***
            if (!type.check(arg)) ***REMOVED***
                _toss(msg, k, type.operator, arg, type.actual);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***);

    /* optional checks */
    keys.forEach(function (k) ***REMOVED***
        var name = 'optional' + _capitalize(k);
        if (ndebug) ***REMOVED***
            out[name] = noop;
            return;
        ***REMOVED***
        var type = types[k];
        out[name] = function (arg, msg) ***REMOVED***
            if (arg === undefined || arg === null) ***REMOVED***
                return;
            ***REMOVED***
            if (!type.check(arg)) ***REMOVED***
                _toss(msg, k, type.operator, arg, type.actual);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***);

    /* arrayOf checks */
    keys.forEach(function (k) ***REMOVED***
        var name = 'arrayOf' + _capitalize(k);
        if (ndebug) ***REMOVED***
            out[name] = noop;
            return;
        ***REMOVED***
        var type = types[k];
        var expected = '[' + k + ']';
        out[name] = function (arg, msg) ***REMOVED***
            if (!Array.isArray(arg)) ***REMOVED***
                _toss(msg, expected, type.operator, arg, type.actual);
            ***REMOVED***
            var i;
            for (i = 0; i < arg.length; i++) ***REMOVED***
                if (!type.check(arg[i])) ***REMOVED***
                    _toss(msg, expected, type.operator, arg, type.actual);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***);

    /* optionalArrayOf checks */
    keys.forEach(function (k) ***REMOVED***
        var name = 'optionalArrayOf' + _capitalize(k);
        if (ndebug) ***REMOVED***
            out[name] = noop;
            return;
        ***REMOVED***
        var type = types[k];
        var expected = '[' + k + ']';
        out[name] = function (arg, msg) ***REMOVED***
            if (arg === undefined || arg === null) ***REMOVED***
                return;
            ***REMOVED***
            if (!Array.isArray(arg)) ***REMOVED***
                _toss(msg, expected, type.operator, arg, type.actual);
            ***REMOVED***
            var i;
            for (i = 0; i < arg.length; i++) ***REMOVED***
                if (!type.check(arg[i])) ***REMOVED***
                    _toss(msg, expected, type.operator, arg, type.actual);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***);

    /* re-export built-in assertions */
    Object.keys(assert).forEach(function (k) ***REMOVED***
        if (k === 'AssertionError') ***REMOVED***
            out[k] = assert[k];
            return;
        ***REMOVED***
        if (ndebug) ***REMOVED***
            out[k] = noop;
            return;
        ***REMOVED***
        out[k] = assert[k];
    ***REMOVED***);

    /* export ourselves (for unit tests _only_) */
    out._setExports = _setExports;

    return out;
***REMOVED***

module.exports = _setExports(process.env.NODE_NDEBUG);
