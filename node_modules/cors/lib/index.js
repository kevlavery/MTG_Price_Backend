(function () ***REMOVED***

  'use strict';

  var assign = require('object-assign');
  var vary = require('vary');

  var defaults = ***REMOVED***
      origin: '*',
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
      preflightContinue: false,
      optionsSuccessStatus: 204
    ***REMOVED***;

  function isString(s) ***REMOVED***
    return typeof s === 'string' || s instanceof String;
  ***REMOVED***

  function isOriginAllowed(origin, allowedOrigin) ***REMOVED***
    if (Array.isArray(allowedOrigin)) ***REMOVED***
      for (var i = 0; i < allowedOrigin.length; ++i) ***REMOVED***
        if (isOriginAllowed(origin, allowedOrigin[i])) ***REMOVED***
          return true;
        ***REMOVED***
      ***REMOVED***
      return false;
    ***REMOVED*** else if (isString(allowedOrigin)) ***REMOVED***
      return origin === allowedOrigin;
    ***REMOVED*** else if (allowedOrigin instanceof RegExp) ***REMOVED***
      return allowedOrigin.test(origin);
    ***REMOVED*** else ***REMOVED***
      return !!allowedOrigin;
    ***REMOVED***
  ***REMOVED***

  function configureOrigin(options, req) ***REMOVED***
    var requestOrigin = req.headers.origin,
      headers = [],
      isAllowed;

    if (!options.origin || options.origin === '*') ***REMOVED***
      // allow any origin
      headers.push([***REMOVED***
        key: 'Access-Control-Allow-Origin',
        value: '*'
      ***REMOVED***]);
    ***REMOVED*** else if (isString(options.origin)) ***REMOVED***
      // fixed origin
      headers.push([***REMOVED***
        key: 'Access-Control-Allow-Origin',
        value: options.origin
      ***REMOVED***]);
      headers.push([***REMOVED***
        key: 'Vary',
        value: 'Origin'
      ***REMOVED***]);
    ***REMOVED*** else ***REMOVED***
      isAllowed = isOriginAllowed(requestOrigin, options.origin);
      // reflect origin
      headers.push([***REMOVED***
        key: 'Access-Control-Allow-Origin',
        value: isAllowed ? requestOrigin : false
      ***REMOVED***]);
      headers.push([***REMOVED***
        key: 'Vary',
        value: 'Origin'
      ***REMOVED***]);
    ***REMOVED***

    return headers;
  ***REMOVED***

  function configureMethods(options) ***REMOVED***
    var methods = options.methods;
    if (methods.join) ***REMOVED***
      methods = options.methods.join(','); // .methods is an array, so turn it into a string
    ***REMOVED***
    return ***REMOVED***
      key: 'Access-Control-Allow-Methods',
      value: methods
    ***REMOVED***;
  ***REMOVED***

  function configureCredentials(options) ***REMOVED***
    if (options.credentials === true) ***REMOVED***
      return ***REMOVED***
        key: 'Access-Control-Allow-Credentials',
        value: 'true'
      ***REMOVED***;
    ***REMOVED***
    return null;
  ***REMOVED***

  function configureAllowedHeaders(options, req) ***REMOVED***
    var allowedHeaders = options.allowedHeaders || options.headers;
    var headers = [];

    if (!allowedHeaders) ***REMOVED***
      allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
      headers.push([***REMOVED***
        key: 'Vary',
        value: 'Access-Control-Request-Headers'
      ***REMOVED***]);
    ***REMOVED*** else if (allowedHeaders.join) ***REMOVED***
      allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
    ***REMOVED***
    if (allowedHeaders && allowedHeaders.length) ***REMOVED***
      headers.push([***REMOVED***
        key: 'Access-Control-Allow-Headers',
        value: allowedHeaders
      ***REMOVED***]);
    ***REMOVED***

    return headers;
  ***REMOVED***

  function configureExposedHeaders(options) ***REMOVED***
    var headers = options.exposedHeaders;
    if (!headers) ***REMOVED***
      return null;
    ***REMOVED*** else if (headers.join) ***REMOVED***
      headers = headers.join(','); // .headers is an array, so turn it into a string
    ***REMOVED***
    if (headers && headers.length) ***REMOVED***
      return ***REMOVED***
        key: 'Access-Control-Expose-Headers',
        value: headers
      ***REMOVED***;
    ***REMOVED***
    return null;
  ***REMOVED***

  function configureMaxAge(options) ***REMOVED***
    var maxAge = options.maxAge && options.maxAge.toString();
    if (maxAge && maxAge.length) ***REMOVED***
      return ***REMOVED***
        key: 'Access-Control-Max-Age',
        value: maxAge
      ***REMOVED***;
    ***REMOVED***
    return null;
  ***REMOVED***

  function applyHeaders(headers, res) ***REMOVED***
    for (var i = 0, n = headers.length; i < n; i++) ***REMOVED***
      var header = headers[i];
      if (header) ***REMOVED***
        if (Array.isArray(header)) ***REMOVED***
          applyHeaders(header, res);
        ***REMOVED*** else if (header.key === 'Vary' && header.value) ***REMOVED***
          vary(res, header.value);
        ***REMOVED*** else if (header.value) ***REMOVED***
          res.setHeader(header.key, header.value);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  function cors(options, req, res, next) ***REMOVED***
    var headers = [],
      method = req.method && req.method.toUpperCase && req.method.toUpperCase();

    if (method === 'OPTIONS') ***REMOVED***
      // preflight
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options, req));
      headers.push(configureMethods(options, req));
      headers.push(configureAllowedHeaders(options, req));
      headers.push(configureMaxAge(options, req));
      headers.push(configureExposedHeaders(options, req));
      applyHeaders(headers, res);

      if (options.preflightContinue ) ***REMOVED***
        next();
      ***REMOVED*** else ***REMOVED***
        // Safari (and potentially other browsers) need content-length 0,
        //   for 204 or they just hang waiting for a body
        res.statusCode = options.optionsSuccessStatus || defaults.optionsSuccessStatus;
        res.setHeader('Content-Length', '0');
        res.end();
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      // actual response
      headers.push(configureOrigin(options, req));
      headers.push(configureCredentials(options, req));
      headers.push(configureExposedHeaders(options, req));
      applyHeaders(headers, res);
      next();
    ***REMOVED***
  ***REMOVED***

  function middlewareWrapper(o) ***REMOVED***
    // if options are static (either via defaults or custom options passed in), wrap in a function
    var optionsCallback = null;
    if (typeof o === 'function') ***REMOVED***
      optionsCallback = o;
    ***REMOVED*** else ***REMOVED***
      optionsCallback = function (req, cb) ***REMOVED***
        cb(null, o);
      ***REMOVED***;
    ***REMOVED***

    return function corsMiddleware(req, res, next) ***REMOVED***
      optionsCallback(req, function (err, options) ***REMOVED***
        if (err) ***REMOVED***
          next(err);
        ***REMOVED*** else ***REMOVED***
          var corsOptions = assign(***REMOVED******REMOVED***, defaults, options);
          var originCallback = null;
          if (corsOptions.origin && typeof corsOptions.origin === 'function') ***REMOVED***
            originCallback = corsOptions.origin;
          ***REMOVED*** else if (corsOptions.origin) ***REMOVED***
            originCallback = function (origin, cb) ***REMOVED***
              cb(null, corsOptions.origin);
            ***REMOVED***;
          ***REMOVED***

          if (originCallback) ***REMOVED***
            originCallback(req.headers.origin, function (err2, origin) ***REMOVED***
              if (err2 || !origin) ***REMOVED***
                next(err2);
              ***REMOVED*** else ***REMOVED***
                corsOptions.origin = origin;
                cors(corsOptions, req, res, next);
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED*** else ***REMOVED***
            next();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***;
  ***REMOVED***

  // can pass either an options hash, an options delegate, or nothing
  module.exports = middlewareWrapper;

***REMOVED***());
