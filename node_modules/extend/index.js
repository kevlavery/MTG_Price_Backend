'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;

var isArray = function isArray(arr) ***REMOVED***
	if (typeof Array.isArray === 'function') ***REMOVED***
		return Array.isArray(arr);
	***REMOVED***

	return toStr.call(arr) === '[object Array]';
***REMOVED***;

var isPlainObject = function isPlainObject(obj) ***REMOVED***
	if (!obj || toStr.call(obj) !== '[object Object]') ***REMOVED***
		return false;
	***REMOVED***

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) ***REMOVED***
		return false;
	***REMOVED***

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) ***REMOVED*** /**/ ***REMOVED***

	return typeof key === 'undefined' || hasOwn.call(obj, key);
***REMOVED***;

module.exports = function extend() ***REMOVED***
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') ***REMOVED***
		deep = target;
		target = arguments[1] || ***REMOVED******REMOVED***;
		// skip the boolean and the target
		i = 2;
	***REMOVED***
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) ***REMOVED***
		target = ***REMOVED******REMOVED***;
	***REMOVED***

	for (; i < length; ++i) ***REMOVED***
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) ***REMOVED***
			// Extend the base object
			for (name in options) ***REMOVED***
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target !== copy) ***REMOVED***
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) ***REMOVED***
						if (copyIsArray) ***REMOVED***
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						***REMOVED*** else ***REMOVED***
							clone = src && isPlainObject(src) ? src : ***REMOVED******REMOVED***;
						***REMOVED***

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

					// Don't bring in undefined values
					***REMOVED*** else if (typeof copy !== 'undefined') ***REMOVED***
						target[name] = copy;
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***

	// Return the modified object
	return target;
***REMOVED***;
