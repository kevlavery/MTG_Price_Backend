module.exports = ForeverAgent
ForeverAgent.SSL = ForeverAgentSSL

var util = require('util')
  , Agent = require('http').Agent
  , net = require('net')
  , tls = require('tls')
  , AgentSSL = require('https').Agent
  
function getConnectionName(host, port) ***REMOVED***  
  var name = ''
  if (typeof host === 'string') ***REMOVED***
    name = host + ':' + port
  ***REMOVED*** else ***REMOVED***
    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')
  ***REMOVED***
  return name
***REMOVED***    

function ForeverAgent(options) ***REMOVED***
  var self = this
  self.options = options || ***REMOVED******REMOVED***
  self.requests = ***REMOVED******REMOVED***
  self.sockets = ***REMOVED******REMOVED***
  self.freeSockets = ***REMOVED******REMOVED***
  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets
  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets
  self.on('free', function(socket, host, port) ***REMOVED***
    var name = getConnectionName(host, port)

    if (self.requests[name] && self.requests[name].length) ***REMOVED***
      self.requests[name].shift().onSocket(socket)
    ***REMOVED*** else if (self.sockets[name].length < self.minSockets) ***REMOVED***
      if (!self.freeSockets[name]) self.freeSockets[name] = []
      self.freeSockets[name].push(socket)
      
      // if an error happens while we don't use the socket anyway, meh, throw the socket away
      var onIdleError = function() ***REMOVED***
        socket.destroy()
      ***REMOVED***
      socket._onIdleError = onIdleError
      socket.on('error', onIdleError)
    ***REMOVED*** else ***REMOVED***
      // If there are no pending requests just destroy the
      // socket and it will get removed from the pool. This
      // gets us out of timeout issues and allows us to
      // default to Connection:keep-alive.
      socket.destroy()
    ***REMOVED***
  ***REMOVED***)

***REMOVED***
util.inherits(ForeverAgent, Agent)

ForeverAgent.defaultMinSockets = 5


ForeverAgent.prototype.createConnection = net.createConnection
ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest
ForeverAgent.prototype.addRequest = function(req, host, port) ***REMOVED***
  var name = getConnectionName(host, port)
  
  if (typeof host !== 'string') ***REMOVED***
    var options = host
    port = options.port
    host = options.host
  ***REMOVED***

  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) ***REMOVED***
    var idleSocket = this.freeSockets[name].pop()
    idleSocket.removeListener('error', idleSocket._onIdleError)
    delete idleSocket._onIdleError
    req._reusedSocket = true
    req.onSocket(idleSocket)
  ***REMOVED*** else ***REMOVED***
    this.addRequestNoreuse(req, host, port)
  ***REMOVED***
***REMOVED***

ForeverAgent.prototype.removeSocket = function(s, name, host, port) ***REMOVED***
  if (this.sockets[name]) ***REMOVED***
    var index = this.sockets[name].indexOf(s)
    if (index !== -1) ***REMOVED***
      this.sockets[name].splice(index, 1)
    ***REMOVED***
  ***REMOVED*** else if (this.sockets[name] && this.sockets[name].length === 0) ***REMOVED***
    // don't leak
    delete this.sockets[name]
    delete this.requests[name]
  ***REMOVED***
  
  if (this.freeSockets[name]) ***REMOVED***
    var index = this.freeSockets[name].indexOf(s)
    if (index !== -1) ***REMOVED***
      this.freeSockets[name].splice(index, 1)
      if (this.freeSockets[name].length === 0) ***REMOVED***
        delete this.freeSockets[name]
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  if (this.requests[name] && this.requests[name].length) ***REMOVED***
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(name, host, port).emit('free')
  ***REMOVED***
***REMOVED***

function ForeverAgentSSL (options) ***REMOVED***
  ForeverAgent.call(this, options)
***REMOVED***
util.inherits(ForeverAgentSSL, ForeverAgent)

ForeverAgentSSL.prototype.createConnection = createConnectionSSL
ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest

function createConnectionSSL (port, host, options) ***REMOVED***
  if (typeof port === 'object') ***REMOVED***
    options = port;
  ***REMOVED*** else if (typeof host === 'object') ***REMOVED***
    options = host;
  ***REMOVED*** else if (typeof options === 'object') ***REMOVED***
    options = options;
  ***REMOVED*** else ***REMOVED***
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  if (typeof port === 'number') ***REMOVED***
    options.port = port;
  ***REMOVED***

  if (typeof host === 'string') ***REMOVED***
    options.host = host;
  ***REMOVED***

  return tls.connect(options);
***REMOVED***
