var async = require('./async.js')
  , abort = require('./abort.js')
  ;

// API
module.exports = iterate;

/**
 * Iterates over each job object
 *
 * @param ***REMOVED***array|object***REMOVED*** list - array or object (named list) to iterate over
 * @param ***REMOVED***function***REMOVED*** iterator - iterator to run
 * @param ***REMOVED***object***REMOVED*** state - current job status
 * @param ***REMOVED***function***REMOVED*** callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback)
***REMOVED***
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  ***REMOVED***
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    ***REMOVED***
      return;
    ***REMOVED***

    // clean up jobs
    delete state.jobs[key];

    if (error)
    ***REMOVED***
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    ***REMOVED***
    else
    ***REMOVED***
      state.results[key] = output;
    ***REMOVED***

    // return salvaged results
    callback(error, state.results);
  ***REMOVED***);
***REMOVED***

/**
 * Runs iterator over provided job element
 *
 * @param   ***REMOVED***function***REMOVED*** iterator - iterator to invoke
 * @param   ***REMOVED***string|number***REMOVED*** key - key/index of the element in the list of jobs
 * @param   ***REMOVED***mixed***REMOVED*** item - job description
 * @param   ***REMOVED***function***REMOVED*** callback - invoked after iterator is done with the job
 * @returns ***REMOVED***function|mixed***REMOVED*** - job abort function or something else
 */
function runJob(iterator, key, item, callback)
***REMOVED***
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  ***REMOVED***
    aborter = iterator(item, async(callback));
  ***REMOVED***
  // otherwise go with full three arguments
  else
  ***REMOVED***
    aborter = iterator(item, key, async(callback));
  ***REMOVED***

  return aborter;
***REMOVED***
