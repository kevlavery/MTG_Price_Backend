'use strict';

var inherits = require('util').inherits,
  f = require('util').format,
  EventEmitter = require('events').EventEmitter,
  ReadPreference = require('./read_preference'),
  BasicCursor = require('../cursor'),
  retrieveBSON = require('../connection/utils').retrieveBSON,
  Logger = require('../connection/logger'),
  MongoError = require('../error').MongoError,
  errors = require('../error'),
  Server = require('./server'),
  ReplSetState = require('./replset_state'),
  clone = require('./shared').clone,
  Timeout = require('./shared').Timeout,
  Interval = require('./shared').Interval,
  createClientInfo = require('./shared').createClientInfo,
  SessionMixins = require('./shared').SessionMixins,
  isRetryableWritesSupported = require('./shared').isRetryableWritesSupported,
  getNextTransactionNumber = require('./shared').getNextTransactionNumber,
  relayEvents = require('./shared').relayEvents;

var MongoCR = require('../auth/mongocr'),
  X509 = require('../auth/x509'),
  Plain = require('../auth/plain'),
  GSSAPI = require('../auth/gssapi'),
  SSPI = require('../auth/sspi'),
  ScramSHA1 = require('../auth/scram');

var BSON = retrieveBSON();

//
// States
var DISCONNECTED = 'disconnected';
var CONNECTING = 'connecting';
var CONNECTED = 'connected';
var UNREFERENCED = 'unreferenced';
var DESTROYED = 'destroyed';

function stateTransition(self, newState) ***REMOVED***
  var legalTransitions = ***REMOVED***
    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],
    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],
    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],
    unreferenced: [UNREFERENCED, DESTROYED],
    destroyed: [DESTROYED]
  ***REMOVED***;

  // Get current state
  var legalStates = legalTransitions[self.state];
  if (legalStates && legalStates.indexOf(newState) !== -1) ***REMOVED***
    self.state = newState;
  ***REMOVED*** else ***REMOVED***
    self.s.logger.error(
      f(
        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',
        self.id,
        self.state,
        newState,
        legalStates
      )
    );
  ***REMOVED***
***REMOVED***

//
// ReplSet instance id
var id = 1;
var handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];

/**
 * Creates a new Replset instance
 * @class
 * @param ***REMOVED***array***REMOVED*** seedlist A list of seeds for the replicaset
 * @param ***REMOVED***boolean***REMOVED*** options.setName The Replicaset set name
 * @param ***REMOVED***boolean***REMOVED*** [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset
 * @param ***REMOVED***number***REMOVED*** [options.haInterval=10000] The High availability period for replicaset inquiry
 * @param ***REMOVED***boolean***REMOVED*** [options.emitError=false] Server will emit errors events
 * @param ***REMOVED***Cursor***REMOVED*** [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
 * @param ***REMOVED***number***REMOVED*** [options.size=5] Server connection pool size
 * @param ***REMOVED***boolean***REMOVED*** [options.keepAlive=true] TCP Connection keep alive enabled
 * @param ***REMOVED***number***REMOVED*** [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
 * @param ***REMOVED***boolean***REMOVED*** [options.noDelay=true] TCP Connection no delay
 * @param ***REMOVED***number***REMOVED*** [options.connectionTimeout=10000] TCP Connection timeout setting
 * @param ***REMOVED***number***REMOVED*** [options.socketTimeout=0] TCP Socket timeout setting
 * @param ***REMOVED***boolean***REMOVED*** [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
 * @param ***REMOVED***boolean***REMOVED*** [options.ssl=false] Use SSL for connection
 * @param ***REMOVED***boolean|function***REMOVED*** [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
 * @param ***REMOVED***Buffer***REMOVED*** [options.ca] SSL Certificate store binary buffer
 * @param ***REMOVED***Buffer***REMOVED*** [options.crl] SSL Certificate revocation store binary buffer
 * @param ***REMOVED***Buffer***REMOVED*** [options.cert] SSL Certificate binary buffer
 * @param ***REMOVED***Buffer***REMOVED*** [options.key] SSL Key file binary buffer
 * @param ***REMOVED***string***REMOVED*** [options.passphrase] SSL Certificate pass phrase
 * @param ***REMOVED***string***REMOVED*** [options.servername=null] String containing the server name requested via TLS SNI.
 * @param ***REMOVED***boolean***REMOVED*** [options.rejectUnauthorized=true] Reject unauthorized server certificates
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
 * @param ***REMOVED***number***REMOVED*** [options.pingInterval=5000] Ping interval to check the response time to the different servers
 * @param ***REMOVED***number***REMOVED*** [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection
 * @param ***REMOVED***boolean***REMOVED*** [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
 * @param ***REMOVED***boolean***REMOVED*** [options.monitorCommands=false] Enable command monitoring for this topology
 * @return ***REMOVED***ReplSet***REMOVED*** A cursor instance
 * @fires ReplSet#connect
 * @fires ReplSet#ha
 * @fires ReplSet#joined
 * @fires ReplSet#left
 * @fires ReplSet#failed
 * @fires ReplSet#fullsetup
 * @fires ReplSet#all
 * @fires ReplSet#error
 * @fires ReplSet#serverHeartbeatStarted
 * @fires ReplSet#serverHeartbeatSucceeded
 * @fires ReplSet#serverHeartbeatFailed
 * @fires ReplSet#topologyOpening
 * @fires ReplSet#topologyClosed
 * @fires ReplSet#topologyDescriptionChanged
 * @property ***REMOVED***string***REMOVED*** type the topology type.
 * @property ***REMOVED***string***REMOVED*** parserType the parser type used (c++ or js).
 */
var ReplSet = function(seedlist, options) ***REMOVED***
  var self = this;
  options = options || ***REMOVED******REMOVED***;

  // Validate seedlist
  if (!Array.isArray(seedlist)) throw new MongoError('seedlist must be an array');
  // Validate list
  if (seedlist.length === 0) throw new MongoError('seedlist must contain at least one entry');
  // Validate entries
  seedlist.forEach(function(e) ***REMOVED***
    if (typeof e.host !== 'string' || typeof e.port !== 'number')
      throw new MongoError('seedlist entry must contain a host and port');
  ***REMOVED***);

  // Add event listener
  EventEmitter.call(this);

  // Get replSet Id
  this.id = id++;

  // Get the localThresholdMS
  var localThresholdMS = options.localThresholdMS || 15;
  // Backward compatibility
  if (options.acceptableLatency) localThresholdMS = options.acceptableLatency;

  // Create a logger
  var logger = Logger('ReplSet', options);

  // Internal state
  this.s = ***REMOVED***
    options: Object.assign(***REMOVED******REMOVED***, options),
    // BSON instance
    bson:
      options.bson ||
      new BSON([
        BSON.Binary,
        BSON.Code,
        BSON.DBRef,
        BSON.Decimal128,
        BSON.Double,
        BSON.Int32,
        BSON.Long,
        BSON.Map,
        BSON.MaxKey,
        BSON.MinKey,
        BSON.ObjectId,
        BSON.BSONRegExp,
        BSON.Symbol,
        BSON.Timestamp
      ]),
    // Factory overrides
    Cursor: options.cursorFactory || BasicCursor,
    // Logger instance
    logger: logger,
    // Seedlist
    seedlist: seedlist,
    // Replicaset state
    replicaSetState: new ReplSetState(***REMOVED***
      id: this.id,
      setName: options.setName,
      acceptableLatency: localThresholdMS,
      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,
      logger: logger
    ***REMOVED***),
    // Current servers we are connecting to
    connectingServers: [],
    // Ha interval
    haInterval: options.haInterval ? options.haInterval : 10000,
    // Minimum heartbeat frequency used if we detect a server close
    minHeartbeatFrequencyMS: 500,
    // Disconnect handler
    disconnectHandler: options.disconnectHandler,
    // Server selection index
    index: 0,
    // Connect function options passed in
    connectOptions: ***REMOVED******REMOVED***,
    // Are we running in debug mode
    debug: typeof options.debug === 'boolean' ? options.debug : false,
    // Client info
    clientInfo: createClientInfo(options),
    // Authentication context
    authenticationContexts: []
  ***REMOVED***;

  // Add handler for topology change
  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) ***REMOVED***
    self.emit('topologyDescriptionChanged', r);
  ***REMOVED***);

  // Log info warning if the socketTimeout < haInterval as it will cause
  // a lot of recycled connections to happen.
  if (
    this.s.logger.isWarn() &&
    this.s.options.socketTimeout !== 0 &&
    this.s.options.socketTimeout < this.s.haInterval
  ) ***REMOVED***
    this.s.logger.warn(
      f(
        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',
        this.s.options.socketTimeout,
        this.s.haInterval
      )
    );
  ***REMOVED***

  // All the authProviders
  this.authProviders = options.authProviders || ***REMOVED***
    mongocr: new MongoCR(this.s.bson),
    x509: new X509(this.s.bson),
    plain: new Plain(this.s.bson),
    gssapi: new GSSAPI(this.s.bson),
    sspi: new SSPI(this.s.bson),
    'scram-sha-1': new ScramSHA1(this.s.bson)
  ***REMOVED***;

  // Add forwarding of events from state handler
  var types = ['joined', 'left'];
  types.forEach(function(x) ***REMOVED***
    self.s.replicaSetState.on(x, function(t, s) ***REMOVED***
      self.emit(x, t, s);
    ***REMOVED***);
  ***REMOVED***);

  // Connect stat
  this.initialConnectState = ***REMOVED***
    connect: false,
    fullsetup: false,
    all: false
  ***REMOVED***;

  // Disconnected state
  this.state = DISCONNECTED;
  this.haTimeoutId = null;
  // Are we authenticating
  this.authenticating = false;
  // Last ismaster
  this.ismaster = null;
  // Contains the intervalId
  this.intervalIds = [];

  // Highest clusterTime seen in responses from the current deployment
  this.clusterTime = null;
***REMOVED***;

inherits(ReplSet, EventEmitter);
Object.assign(ReplSet.prototype, SessionMixins);

Object.defineProperty(ReplSet.prototype, 'type', ***REMOVED***
  enumerable: true,
  get: function() ***REMOVED***
    return 'replset';
  ***REMOVED***
***REMOVED***);

Object.defineProperty(ReplSet.prototype, 'parserType', ***REMOVED***
  enumerable: true,
  get: function() ***REMOVED***
    return BSON.native ? 'c++' : 'js';
  ***REMOVED***
***REMOVED***);

Object.defineProperty(ReplSet.prototype, 'logicalSessionTimeoutMinutes', ***REMOVED***
  enumerable: true,
  get: function() ***REMOVED***
    return this.s.replicaSetState.logicalSessionTimeoutMinutes || null;
  ***REMOVED***
***REMOVED***);

function rexecuteOperations(self) ***REMOVED***
  // If we have a primary and a disconnect handler, execute
  // buffered operations
  if (self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) ***REMOVED***
    self.s.disconnectHandler.execute();
  ***REMOVED*** else if (self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) ***REMOVED***
    self.s.disconnectHandler.execute(***REMOVED*** executePrimary: true ***REMOVED***);
  ***REMOVED*** else if (self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) ***REMOVED***
    self.s.disconnectHandler.execute(***REMOVED*** executeSecondary: true ***REMOVED***);
  ***REMOVED***
***REMOVED***

function connectNewServers(self, servers, callback) ***REMOVED***
  // Count lefts
  var count = servers.length;
  var error = null;

  // Handle events
  var _handleEvent = function(self, event) ***REMOVED***
    return function(err) ***REMOVED***
      var _self = this;
      count = count - 1;

      // Destroyed
      if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
        return this.destroy(***REMOVED*** force: true ***REMOVED***);
      ***REMOVED***

      if (event === 'connect' && !self.authenticating) ***REMOVED***
        // Destroyed
        if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
          return _self.destroy(***REMOVED*** force: true ***REMOVED***);
        ***REMOVED***

        // Do we have authentication contexts that need to be applied
        applyAuthenticationContexts(self, _self, function() ***REMOVED***
          // Destroy the instance
          if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
            return _self.destroy(***REMOVED*** force: true ***REMOVED***);
          ***REMOVED***

          // Update the state
          var result = self.s.replicaSetState.update(_self);
          // Update the state with the new server
          if (result) ***REMOVED***
            // Primary lastIsMaster store it
            if (_self.lastIsMaster() && _self.lastIsMaster().ismaster) ***REMOVED***
              self.ismaster = _self.lastIsMaster();
            ***REMOVED***

            // Remove the handlers
            for (var i = 0; i < handlers.length; i++) ***REMOVED***
              _self.removeAllListeners(handlers[i]);
            ***REMOVED***

            // Add stable state handlers
            _self.on('error', handleEvent(self, 'error'));
            _self.on('close', handleEvent(self, 'close'));
            _self.on('timeout', handleEvent(self, 'timeout'));
            _self.on('parseError', handleEvent(self, 'parseError'));

            // Enalbe the monitoring of the new server
            monitorServer(_self.lastIsMaster().me, self, ***REMOVED******REMOVED***);

            // Rexecute any stalled operation
            rexecuteOperations(self);
          ***REMOVED*** else ***REMOVED***
            _self.destroy(***REMOVED*** force: true ***REMOVED***);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED*** else if (event === 'connect' && self.authenticating) ***REMOVED***
        this.destroy(***REMOVED*** force: true ***REMOVED***);
      ***REMOVED*** else if (event === 'error') ***REMOVED***
        error = err;
      ***REMOVED***

      // Rexecute any stalled operation
      rexecuteOperations(self);

      // Are we done finish up callback
      if (count === 0) ***REMOVED***
        callback(error);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***;

  // No new servers
  if (count === 0) return callback();

  // Execute method
  function execute(_server, i) ***REMOVED***
    setTimeout(function() ***REMOVED***
      // Destroyed
      if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
        return;
      ***REMOVED***

      // Create a new server instance
      var server = new Server(
        Object.assign(***REMOVED******REMOVED***, self.s.options, ***REMOVED***
          host: _server.split(':')[0],
          port: parseInt(_server.split(':')[1], 10),
          authProviders: self.authProviders,
          reconnect: false,
          monitoring: false,
          parent: self,
          clientInfo: clone(self.s.clientInfo)
        ***REMOVED***)
      );

      // Add temp handlers
      server.once('connect', _handleEvent(self, 'connect'));
      server.once('close', _handleEvent(self, 'close'));
      server.once('timeout', _handleEvent(self, 'timeout'));
      server.once('error', _handleEvent(self, 'error'));
      server.once('parseError', _handleEvent(self, 'parseError'));

      // SDAM Monitoring events
      server.on('serverOpening', e => self.emit('serverOpening', e));
      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));
      server.on('serverClosed', e => self.emit('serverClosed', e));

      // Command Monitoring events
      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

      server.connect(self.s.connectOptions);
    ***REMOVED***, i);
  ***REMOVED***

  // Create new instances
  for (var i = 0; i < servers.length; i++) ***REMOVED***
    execute(servers[i], i);
  ***REMOVED***
***REMOVED***

// Ping the server
var pingServer = function(self, server, cb) ***REMOVED***
  // Measure running time
  var start = new Date().getTime();

  // Emit the server heartbeat start
  emitSDAMEvent(self, 'serverHeartbeatStarted', ***REMOVED*** connectionId: server.name ***REMOVED***);

  // Execute ismaster
  // Set the socketTimeout for a monitoring message to a low number
  // Ensuring ismaster calls are timed out quickly
  server.command(
    'admin.$cmd',
    ***REMOVED***
      ismaster: true
    ***REMOVED***,
    ***REMOVED***
      monitoring: true,
      socketTimeout: self.s.options.connectionTimeout || 2000
    ***REMOVED***,
    function(err, r) ***REMOVED***
      if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
        server.destroy(***REMOVED*** force: true ***REMOVED***);
        return cb(err, r);
      ***REMOVED***

      // Calculate latency
      var latencyMS = new Date().getTime() - start;
      // Set the last updatedTime
      var hrTime = process.hrtime();
      // Calculate the last update time
      server.lastUpdateTime = hrTime[0] * 1000 + Math.round(hrTime[1] / 1000);

      // We had an error, remove it from the state
      if (err) ***REMOVED***
        // Emit the server heartbeat failure
        emitSDAMEvent(self, 'serverHeartbeatFailed', ***REMOVED***
          durationMS: latencyMS,
          failure: err,
          connectionId: server.name
        ***REMOVED***);

        // Remove server from the state
        self.s.replicaSetState.remove(server);
      ***REMOVED*** else ***REMOVED***
        // Update the server ismaster
        server.ismaster = r.result;

        // Check if we have a lastWriteDate convert it to MS
        // and store on the server instance for later use
        if (server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) ***REMOVED***
          server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();
        ***REMOVED***

        // Do we have a brand new server
        if (server.lastIsMasterMS === -1) ***REMOVED***
          server.lastIsMasterMS = latencyMS;
        ***REMOVED*** else if (server.lastIsMasterMS) ***REMOVED***
          // After the first measurement, average RTT MUST be computed using an
          // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.
          // If the prior average is denoted old_rtt, then the new average (new_rtt) is
          // computed from a new RTT measurement (x) using the following formula:
          // alpha = 0.2
          // new_rtt = alpha * x + (1 - alpha) * old_rtt
          server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;
        ***REMOVED***

        if (self.s.replicaSetState.update(server)) ***REMOVED***
          // Primary lastIsMaster store it
          if (server.lastIsMaster() && server.lastIsMaster().ismaster) ***REMOVED***
            self.ismaster = server.lastIsMaster();
          ***REMOVED***
        ***REMOVED***

        // Server heart beat event
        emitSDAMEvent(self, 'serverHeartbeatSucceeded', ***REMOVED***
          durationMS: latencyMS,
          reply: r.result,
          connectionId: server.name
        ***REMOVED***);
      ***REMOVED***

      // Calculate the staleness for this server
      self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);

      // Callback
      cb(err, r);
    ***REMOVED***
  );
***REMOVED***;

// Each server is monitored in parallel in their own timeout loop
var monitorServer = function(host, self, options) ***REMOVED***
  // If this is not the initial scan
  // Is this server already being monitoried, then skip monitoring
  if (!options.haInterval) ***REMOVED***
    for (var i = 0; i < self.intervalIds.length; i++) ***REMOVED***
      if (self.intervalIds[i].__host === host) ***REMOVED***
        return;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  // Get the haInterval
  var _process = options.haInterval ? Timeout : Interval;
  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;

  // Create the interval
  var intervalId = new _process(function() ***REMOVED***
    if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
      // clearInterval(intervalId);
      intervalId.stop();
      return;
    ***REMOVED***

    // Do we already have server connection available for this host
    var _server = self.s.replicaSetState.get(host);

    // Check if we have a known server connection and reuse
    if (_server) ***REMOVED***
      // Ping the server
      return pingServer(self, _server, function(err) ***REMOVED***
        if (err) ***REMOVED***
          // NOTE: should something happen here?
          return;
        ***REMOVED***

        if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
          intervalId.stop();
          return;
        ***REMOVED***

        // Filter out all called intervaliIds
        self.intervalIds = self.intervalIds.filter(function(intervalId) ***REMOVED***
          return intervalId.isRunning();
        ***REMOVED***);

        // Initial sweep
        if (_process === Timeout) ***REMOVED***
          if (
            self.state === CONNECTING &&
            ((self.s.replicaSetState.hasSecondary() &&
              self.s.options.secondaryOnlyConnectionAllowed) ||
              self.s.replicaSetState.hasPrimary())
          ) ***REMOVED***
            self.state = CONNECTED;

            // Emit connected sign
            process.nextTick(function() ***REMOVED***
              self.emit('connect', self);
            ***REMOVED***);

            // Start topology interval check
            topologyMonitor(self, ***REMOVED******REMOVED***);
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          if (
            self.state === DISCONNECTED &&
            ((self.s.replicaSetState.hasSecondary() &&
              self.s.options.secondaryOnlyConnectionAllowed) ||
              self.s.replicaSetState.hasPrimary())
          ) ***REMOVED***
            self.state = CONNECTED;

            // Rexecute any stalled operation
            rexecuteOperations(self);

            // Emit connected sign
            process.nextTick(function() ***REMOVED***
              self.emit('reconnect', self);
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***

        if (
          self.initialConnectState.connect &&
          !self.initialConnectState.fullsetup &&
          self.s.replicaSetState.hasPrimaryAndSecondary()
        ) ***REMOVED***
          // Set initial connect state
          self.initialConnectState.fullsetup = true;
          self.initialConnectState.all = true;

          process.nextTick(function() ***REMOVED***
            self.emit('fullsetup', self);
            self.emit('all', self);
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***, _haInterval);

  // Start the interval
  intervalId.start();
  // Add the intervalId host name
  intervalId.__host = host;
  // Add the intervalId to our list of intervalIds
  self.intervalIds.push(intervalId);
***REMOVED***;

function topologyMonitor(self, options) ***REMOVED***
  if (self.state === DESTROYED || self.state === UNREFERENCED) return;
  options = options || ***REMOVED******REMOVED***;

  // Get the servers
  var servers = Object.keys(self.s.replicaSetState.set);

  // Get the haInterval
  var _process = options.haInterval ? Timeout : Interval;
  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;

  if (_process === Timeout) ***REMOVED***
    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) ***REMOVED***
      // Don't emit errors if the connection was already
      if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
        return;
      ***REMOVED***

      if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) ***REMOVED***
        if (err) ***REMOVED***
          return self.emit('error', err);
        ***REMOVED***

        self.emit(
          'error',
          new MongoError('no primary found in replicaset or invalid replica set name')
        );
        return self.destroy(***REMOVED*** force: true ***REMOVED***);
      ***REMOVED*** else if (
        !self.s.replicaSetState.hasSecondary() &&
        self.s.options.secondaryOnlyConnectionAllowed
      ) ***REMOVED***
        if (err) ***REMOVED***
          return self.emit('error', err);
        ***REMOVED***

        self.emit(
          'error',
          new MongoError('no secondary found in replicaset or invalid replica set name')
        );
        return self.destroy(***REMOVED*** force: true ***REMOVED***);
      ***REMOVED***

      for (var i = 0; i < servers.length; i++) ***REMOVED***
        monitorServer(servers[i], self, options);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    for (var i = 0; i < servers.length; i++) ***REMOVED***
      monitorServer(servers[i], self, options);
    ***REMOVED***
  ***REMOVED***

  // Run the reconnect process
  function executeReconnect(self) ***REMOVED***
    return function() ***REMOVED***
      if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
        return;
      ***REMOVED***

      connectNewServers(self, self.s.replicaSetState.unknownServers, function() ***REMOVED***
        var monitoringFrequencey = self.s.replicaSetState.hasPrimary()
          ? _haInterval
          : self.s.minHeartbeatFrequencyMS;

        // Create a timeout
        self.intervalIds.push(new Timeout(executeReconnect(self), monitoringFrequencey).start());
      ***REMOVED***);
    ***REMOVED***;
  ***REMOVED***

  // Decide what kind of interval to use
  var intervalTime = !self.s.replicaSetState.hasPrimary()
    ? self.s.minHeartbeatFrequencyMS
    : _haInterval;

  self.intervalIds.push(new Timeout(executeReconnect(self), intervalTime).start());
***REMOVED***

function addServerToList(list, server) ***REMOVED***
  for (var i = 0; i < list.length; i++) ***REMOVED***
    if (list[i].name.toLowerCase() === server.name.toLowerCase()) return true;
  ***REMOVED***

  list.push(server);
***REMOVED***

function handleEvent(self, event) ***REMOVED***
  return function() ***REMOVED***
    if (self.state === DESTROYED || self.state === UNREFERENCED) return;
    // Debug log
    if (self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(
        f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id)
      );
    ***REMOVED***

    // Remove from the replicaset state
    self.s.replicaSetState.remove(this);

    // Are we in a destroyed state return
    if (self.state === DESTROYED || self.state === UNREFERENCED) return;

    // If no primary and secondary available
    if (
      !self.s.replicaSetState.hasPrimary() &&
      !self.s.replicaSetState.hasSecondary() &&
      self.s.options.secondaryOnlyConnectionAllowed
    ) ***REMOVED***
      stateTransition(self, DISCONNECTED);
    ***REMOVED*** else if (!self.s.replicaSetState.hasPrimary()) ***REMOVED***
      stateTransition(self, DISCONNECTED);
    ***REMOVED***

    addServerToList(self.s.connectingServers, this);
  ***REMOVED***;
***REMOVED***

function applyAuthenticationContexts(self, server, callback) ***REMOVED***
  if (self.s.authenticationContexts.length === 0) ***REMOVED***
    return callback();
  ***REMOVED***

  // Do not apply any auth contexts if it's an arbiter
  if (server.lastIsMaster() && server.lastIsMaster().arbiterOnly) ***REMOVED***
    return callback();
  ***REMOVED***

  // Copy contexts to ensure no modificiation in the middle of
  // auth process.
  var authContexts = self.s.authenticationContexts.slice(0);

  // Apply one of the contexts
  function applyAuth(authContexts, server, callback) ***REMOVED***
    if (authContexts.length === 0) return callback();
    // Get the first auth context
    var authContext = authContexts.shift();
    // Copy the params
    var customAuthContext = authContext.slice(0);
    // Push our callback handler
    customAuthContext.push(function(/* err */) ***REMOVED***
      applyAuth(authContexts, server, callback);
    ***REMOVED***);

    // Attempt authentication
    server.auth.apply(server, customAuthContext);
  ***REMOVED***

  // Apply all auth contexts
  applyAuth(authContexts, server, callback);
***REMOVED***

function shouldTriggerConnect(self) ***REMOVED***
  const isConnecting = self.state === CONNECTING;
  const hasPrimary = self.s.replicaSetState.hasPrimary();
  const hasSecondary = self.s.replicaSetState.hasSecondary();
  const secondaryOnlyConnectionAllowed = self.s.options.secondaryOnlyConnectionAllowed;
  const readPreferenceSecondary =
    self.s.connectOptions.readPreference &&
    self.s.connectOptions.readPreference.equals(ReadPreference.secondary);

  return (
    (isConnecting &&
      ((readPreferenceSecondary && hasSecondary) || (!readPreferenceSecondary && hasPrimary))) ||
    (hasSecondary && secondaryOnlyConnectionAllowed)
  );
***REMOVED***

function handleInitialConnectEvent(self, event) ***REMOVED***
  return function() ***REMOVED***
    var _this = this;
    // Debug log
    if (self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(
        f(
          'handleInitialConnectEvent %s from server %s in replset with id %s',
          event,
          this.name,
          self.id
        )
      );
    ***REMOVED***

    // Destroy the instance
    if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
      return this.destroy(***REMOVED*** force: true ***REMOVED***);
    ***REMOVED***

    // Check the type of server
    if (event === 'connect') ***REMOVED***
      // Do we have authentication contexts that need to be applied
      applyAuthenticationContexts(self, _this, function() ***REMOVED***
        // Destroy the instance
        if (self.state === DESTROYED || self.state === UNREFERENCED) ***REMOVED***
          return _this.destroy(***REMOVED*** force: true ***REMOVED***);
        ***REMOVED***

        // Update the state
        var result = self.s.replicaSetState.update(_this);
        if (result === true) ***REMOVED***
          // Primary lastIsMaster store it
          if (_this.lastIsMaster() && _this.lastIsMaster().ismaster) ***REMOVED***
            self.ismaster = _this.lastIsMaster();
          ***REMOVED***

          // Debug log
          if (self.s.logger.isDebug()) ***REMOVED***
            self.s.logger.debug(
              f(
                'handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]',
                event,
                _this.name,
                self.id,
                JSON.stringify(self.s.replicaSetState.set)
              )
            );
          ***REMOVED***

          // Remove the handlers
          for (var i = 0; i < handlers.length; i++) ***REMOVED***
            _this.removeAllListeners(handlers[i]);
          ***REMOVED***

          // Add stable state handlers
          _this.on('error', handleEvent(self, 'error'));
          _this.on('close', handleEvent(self, 'close'));
          _this.on('timeout', handleEvent(self, 'timeout'));
          _this.on('parseError', handleEvent(self, 'parseError'));

          // Do we have a primary or primaryAndSecondary
          if (shouldTriggerConnect(self)) ***REMOVED***
            // We are connected
            self.state = CONNECTED;

            // Set initial connect state
            self.initialConnectState.connect = true;
            // Emit connect event
            process.nextTick(function() ***REMOVED***
              self.emit('connect', self);
            ***REMOVED***);

            topologyMonitor(self, ***REMOVED******REMOVED***);
          ***REMOVED***
        ***REMOVED*** else if (result instanceof MongoError) ***REMOVED***
          _this.destroy(***REMOVED*** force: true ***REMOVED***);
          self.destroy(***REMOVED*** force: true ***REMOVED***);
          return self.emit('error', result);
        ***REMOVED*** else ***REMOVED***
          _this.destroy(***REMOVED*** force: true ***REMOVED***);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED*** else ***REMOVED***
      // Emit failure to connect
      self.emit('failed', this);

      addServerToList(self.s.connectingServers, this);
      // Remove from the state
      self.s.replicaSetState.remove(this);
    ***REMOVED***

    if (
      self.initialConnectState.connect &&
      !self.initialConnectState.fullsetup &&
      self.s.replicaSetState.hasPrimaryAndSecondary()
    ) ***REMOVED***
      // Set initial connect state
      self.initialConnectState.fullsetup = true;
      self.initialConnectState.all = true;

      process.nextTick(function() ***REMOVED***
        self.emit('fullsetup', self);
        self.emit('all', self);
      ***REMOVED***);
    ***REMOVED***

    // Remove from the list from connectingServers
    for (var i = 0; i < self.s.connectingServers.length; i++) ***REMOVED***
      if (self.s.connectingServers[i].equals(this)) ***REMOVED***
        self.s.connectingServers.splice(i, 1);
      ***REMOVED***
    ***REMOVED***

    // Trigger topologyMonitor
    if (self.s.connectingServers.length === 0 && self.state === CONNECTING) ***REMOVED***
      topologyMonitor(self, ***REMOVED*** haInterval: 1 ***REMOVED***);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

function connectServers(self, servers) ***REMOVED***
  // Update connectingServers
  self.s.connectingServers = self.s.connectingServers.concat(servers);

  // Index used to interleaf the server connects, avoiding
  // runtime issues on io constrained vm's
  var timeoutInterval = 0;

  function connect(server, timeoutInterval) ***REMOVED***
    setTimeout(function() ***REMOVED***
      // Add the server to the state
      if (self.s.replicaSetState.update(server)) ***REMOVED***
        // Primary lastIsMaster store it
        if (server.lastIsMaster() && server.lastIsMaster().ismaster) ***REMOVED***
          self.ismaster = server.lastIsMaster();
        ***REMOVED***
      ***REMOVED***

      // Add event handlers
      server.once('close', handleInitialConnectEvent(self, 'close'));
      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));
      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));
      server.once('error', handleInitialConnectEvent(self, 'error'));
      server.once('connect', handleInitialConnectEvent(self, 'connect'));

      // SDAM Monitoring events
      server.on('serverOpening', e => self.emit('serverOpening', e));
      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));
      server.on('serverClosed', e => self.emit('serverClosed', e));

      // Command Monitoring events
      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

      // Start connection
      server.connect(self.s.connectOptions);
    ***REMOVED***, timeoutInterval);
  ***REMOVED***

  // Start all the servers
  while (servers.length > 0) ***REMOVED***
    connect(servers.shift(), timeoutInterval++);
  ***REMOVED***
***REMOVED***

/**
 * Emit event if it exists
 * @method
 */
function emitSDAMEvent(self, event, description) ***REMOVED***
  if (self.listeners(event).length > 0) ***REMOVED***
    self.emit(event, description);
  ***REMOVED***
***REMOVED***

/**
 * Initiate server connect
 * @method
 * @param ***REMOVED***array***REMOVED*** [options.auth=null] Array of auth options to apply on connect
 */
ReplSet.prototype.connect = function(options) ***REMOVED***
  var self = this;
  // Add any connect level options to the internal state
  this.s.connectOptions = options || ***REMOVED******REMOVED***;
  // Set connecting state
  stateTransition(this, CONNECTING);
  // Create server instances
  var servers = this.s.seedlist.map(function(x) ***REMOVED***
    return new Server(
      Object.assign(***REMOVED******REMOVED***, self.s.options, x, ***REMOVED***
        authProviders: self.authProviders,
        reconnect: false,
        monitoring: false,
        parent: self,
        clientInfo: clone(self.s.clientInfo)
      ***REMOVED***)
    );
  ***REMOVED***);

  // Error out as high availbility interval must be < than socketTimeout
  if (
    this.s.options.socketTimeout > 0 &&
    this.s.options.socketTimeout <= this.s.options.haInterval
  ) ***REMOVED***
    return self.emit(
      'error',
      new MongoError(
        f(
          'haInterval [%s] MS must be set to less than socketTimeout [%s] MS',
          this.s.options.haInterval,
          this.s.options.socketTimeout
        )
      )
    );
  ***REMOVED***

  // Emit the topology opening event
  emitSDAMEvent(this, 'topologyOpening', ***REMOVED*** topologyId: this.id ***REMOVED***);
  // Start all server connections
  connectServers(self, servers);
***REMOVED***;

/**
 * Destroy the server connection
 * @param ***REMOVED***boolean***REMOVED*** [options.force=false] Force destroy the pool
 * @method
 */
ReplSet.prototype.destroy = function(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  // Transition state
  stateTransition(this, DESTROYED);
  // Clear out any monitoring process
  if (this.haTimeoutId) clearTimeout(this.haTimeoutId);
  // Destroy the replicaset
  this.s.replicaSetState.destroy(options);
  // Clear out authentication contexts
  this.s.authenticationContexts = [];

  // Destroy all connecting servers
  this.s.connectingServers.forEach(function(x) ***REMOVED***
    x.destroy(options);
  ***REMOVED***);

  // Clear out all monitoring
  for (var i = 0; i < this.intervalIds.length; i++) ***REMOVED***
    this.intervalIds[i].stop();
    this.intervalIds[i].stop();
  ***REMOVED***

  // Reset list of intervalIds
  this.intervalIds = [];

  // Emit toplogy closing event
  emitSDAMEvent(this, 'topologyClosed', ***REMOVED*** topologyId: this.id ***REMOVED***);
***REMOVED***;

/**
 * Unref all connections belong to this server
 * @method
 */
ReplSet.prototype.unref = function() ***REMOVED***
  // Transition state
  stateTransition(this, UNREFERENCED);

  this.s.replicaSetState.allServers().forEach(function(x) ***REMOVED***
    x.unref();
  ***REMOVED***);

  clearTimeout(this.haTimeoutId);
***REMOVED***;

/**
 * Returns the last known ismaster document for this server
 * @method
 * @return ***REMOVED***object***REMOVED***
 */
ReplSet.prototype.lastIsMaster = function() ***REMOVED***
  // If secondaryOnlyConnectionAllowed and no primary but secondary
  // return the secondaries ismaster result.
  if (
    this.s.options.secondaryOnlyConnectionAllowed &&
    !this.s.replicaSetState.hasPrimary() &&
    this.s.replicaSetState.hasSecondary()
  ) ***REMOVED***
    return this.s.replicaSetState.secondaries[0].lastIsMaster();
  ***REMOVED***

  return this.s.replicaSetState.primary
    ? this.s.replicaSetState.primary.lastIsMaster()
    : this.ismaster;
***REMOVED***;

/**
 * All raw connections
 * @method
 * @return ***REMOVED***Connection[]***REMOVED***
 */
ReplSet.prototype.connections = function() ***REMOVED***
  var servers = this.s.replicaSetState.allServers();
  var connections = [];
  for (var i = 0; i < servers.length; i++) ***REMOVED***
    connections = connections.concat(servers[i].connections());
  ***REMOVED***

  return connections;
***REMOVED***;

/**
 * Figure out if the server is connected
 * @method
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @return ***REMOVED***boolean***REMOVED***
 */
ReplSet.prototype.isConnected = function(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  // If we are authenticating signal not connected
  // To avoid interleaving of operations
  if (this.authenticating) return false;

  // If we specified a read preference check if we are connected to something
  // than can satisfy this
  if (options.readPreference && options.readPreference.equals(ReadPreference.secondary)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary();
  ***REMOVED***

  if (options.readPreference && options.readPreference.equals(ReadPreference.primary)) ***REMOVED***
    return this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if (options.readPreference && options.readPreference.equals(ReadPreference.primaryPreferred)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if (options.readPreference && options.readPreference.equals(ReadPreference.secondaryPreferred)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if (this.s.options.secondaryOnlyConnectionAllowed && this.s.replicaSetState.hasSecondary()) ***REMOVED***
    return true;
  ***REMOVED***

  return this.s.replicaSetState.hasPrimary();
***REMOVED***;

/**
 * Figure out if the replicaset instance was destroyed by calling destroy
 * @method
 * @return ***REMOVED***boolean***REMOVED***
 */
ReplSet.prototype.isDestroyed = function() ***REMOVED***
  return this.state === DESTROYED;
***REMOVED***;

/**
 * Get server
 * @method
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @return ***REMOVED***Server***REMOVED***
 */
ReplSet.prototype.getServer = function(options) ***REMOVED***
  // Ensure we have no options
  options = options || ***REMOVED******REMOVED***;
  // Pick the right server based on readPreference
  var server = this.s.replicaSetState.pickServer(options.readPreference);
  if (this.s.debug) this.emit('pickedServer', options.readPreference, server);
  return server;
***REMOVED***;

/**
 * Get a direct connection
 * @method
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @return ***REMOVED***Connection***REMOVED***
 */
ReplSet.prototype.getConnection = function(options) ***REMOVED***
  var server = this.getServer(options);
  if (server) return server.getConnection();
***REMOVED***;

/**
 * Get all connected servers
 * @method
 * @return ***REMOVED***Server[]***REMOVED***
 */
ReplSet.prototype.getServers = function() ***REMOVED***
  return this.s.replicaSetState.allServers();
***REMOVED***;

//
// Execute write operation
function executeWriteOperation(args, options, callback) ***REMOVED***
  if (typeof options === 'function') (callback = options), (options = ***REMOVED******REMOVED***);
  options = options || ***REMOVED******REMOVED***;

  // TODO: once we drop Node 4, use destructuring either here or in arguments.
  const self = args.self;
  const op = args.op;
  const ns = args.ns;
  const ops = args.ops;

  if (self.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));

  const willRetryWrite =
    !args.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self);

  if (!self.s.replicaSetState.hasPrimary()) ***REMOVED***
    if (self.s.disconnectHandler) ***REMOVED***
      // Not connected but we have a disconnecthandler
      return self.s.disconnectHandler.add(op, ns, ops, options, callback);
    ***REMOVED*** else if (!willRetryWrite) ***REMOVED***
      // No server returned we had an error
      return callback(new MongoError('no primary server found'));
    ***REMOVED***
  ***REMOVED***

  const handler = (err, result) => ***REMOVED***
    if (!err) return callback(null, result);
    if (!(err instanceof errors.MongoNetworkError) && !err.message.match(/not master/)) ***REMOVED***
      return callback(err);
    ***REMOVED***

    if (willRetryWrite) ***REMOVED***
      const newArgs = Object.assign(***REMOVED******REMOVED***, args, ***REMOVED*** retrying: true ***REMOVED***);
      return executeWriteOperation(newArgs, options, callback);
    ***REMOVED***

    // Per SDAM, remove primary from replicaset
    if (self.s.replicaSetState.primary) ***REMOVED***
      self.s.replicaSetState.remove(self.s.replicaSetState.primary, ***REMOVED*** force: true ***REMOVED***);
    ***REMOVED***

    return callback(err);
  ***REMOVED***;

  if (callback.operationId) ***REMOVED***
    handler.operationId = callback.operationId;
  ***REMOVED***

  // increment and assign txnNumber
  if (willRetryWrite) ***REMOVED***
    options.txnNumber = getNextTransactionNumber(options.session);
  ***REMOVED***

  return self.s.replicaSetState.primary[op](ns, ops, options, handler);
***REMOVED***

/**
 * Insert one or more documents
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of documents to insert
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***ClientSession***REMOVED*** [options.session=null] Session to use for the operation
 * @param ***REMOVED***boolean***REMOVED*** [options.retryWrites] Enable retryable writes for this operation
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.insert = function(ns, ops, options, callback) ***REMOVED***
  // Execute write operation
  executeWriteOperation(***REMOVED*** self: this, op: 'insert', ns, ops ***REMOVED***, options, callback);
***REMOVED***;

/**
 * Perform one or more update operations
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of updates
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***ClientSession***REMOVED*** [options.session=null] Session to use for the operation
 * @param ***REMOVED***boolean***REMOVED*** [options.retryWrites] Enable retryable writes for this operation
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.update = function(ns, ops, options, callback) ***REMOVED***
  // Execute write operation
  executeWriteOperation(***REMOVED*** self: this, op: 'update', ns, ops ***REMOVED***, options, callback);
***REMOVED***;

/**
 * Perform one or more remove operations
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of removes
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***ClientSession***REMOVED*** [options.session=null] Session to use for the operation
 * @param ***REMOVED***boolean***REMOVED*** [options.retryWrites] Enable retryable writes for this operation
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.remove = function(ns, ops, options, callback) ***REMOVED***
  // Execute write operation
  executeWriteOperation(***REMOVED*** self: this, op: 'remove', ns, ops ***REMOVED***, options, callback);
***REMOVED***;

/**
 * Execute a command
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***object***REMOVED*** cmd The command hash
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @param ***REMOVED***Connection***REMOVED*** [options.connection] Specify connection object to execute command against
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***ClientSession***REMOVED*** [options.session=null] Session to use for the operation
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.command = function(ns, cmd, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    (callback = options), (options = ***REMOVED******REMOVED***), (options = options || ***REMOVED******REMOVED***);
  ***REMOVED***

  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));
  var self = this;

  // Establish readPreference
  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;

  // If the readPreference is primary and we have no primary, store it
  if (
    readPreference.preference === 'primary' &&
    !this.s.replicaSetState.hasPrimary() &&
    this.s.disconnectHandler != null
  ) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED*** else if (
    readPreference.preference === 'secondary' &&
    !this.s.replicaSetState.hasSecondary() &&
    this.s.disconnectHandler != null
  ) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED*** else if (
    readPreference.preference !== 'primary' &&
    !this.s.replicaSetState.hasSecondary() &&
    !this.s.replicaSetState.hasPrimary() &&
    this.s.disconnectHandler != null
  ) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED***

  // Pick a server
  var server = this.s.replicaSetState.pickServer(readPreference);
  // We received an error, return it
  if (!(server instanceof Server)) return callback(server);
  // Emit debug event
  if (self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);

  // No server returned we had an error
  if (server == null) ***REMOVED***
    return callback(
      new MongoError(
        f('no server found that matches the provided readPreference %s', readPreference)
      )
    );
  ***REMOVED***

  // Execute the command
  server.command(ns, cmd, options, callback);
***REMOVED***;

/**
 * Authenticate using a specified mechanism
 * @method
 * @param ***REMOVED***string***REMOVED*** mechanism The Auth mechanism we are invoking
 * @param ***REMOVED***string***REMOVED*** db The db we are invoking the mechanism against
 * @param ***REMOVED***...object***REMOVED*** param Parameters for the specific mechanism
 * @param ***REMOVED***authResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.auth = function(mechanism, db) ***REMOVED***
  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);
  var self = this;
  var args = Array.prototype.slice.call(arguments, 2);
  var callback = args.pop();
  var currentContextIndex = 0;

  // If we don't have the mechanism fail
  if (this.authProviders[mechanism] == null && mechanism !== 'default') ***REMOVED***
    return callback(new MongoError(f('auth provider %s does not exist', mechanism)));
  ***REMOVED***

  // Are we already authenticating, throw
  if (this.authenticating) ***REMOVED***
    return callback(new MongoError('authentication or logout allready in process'));
  ***REMOVED***

  // Topology is not connected, save the call in the provided store to be
  // Executed at some point when the handler deems it's reconnected
  if (!this.isConnected() && self.s.disconnectHandler != null) ***REMOVED***
    if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) ***REMOVED***
      return self.s.disconnectHandler.add('auth', db, allArgs, ***REMOVED******REMOVED***, callback);
    ***REMOVED*** else if (
      !self.s.replicaSetState.hasSecondary() &&
      self.s.options.secondaryOnlyConnectionAllowed
    ) ***REMOVED***
      return self.s.disconnectHandler.add('auth', db, allArgs, ***REMOVED******REMOVED***, callback);
    ***REMOVED***
  ***REMOVED***

  // Set to authenticating
  this.authenticating = true;
  // All errors
  var errors = [];

  // Get all the servers
  var servers = this.s.replicaSetState.allServers();
  // No servers return
  if (servers.length === 0) ***REMOVED***
    this.authenticating = false;
    callback(null, true);
  ***REMOVED***

  // Authenticate
  function auth(server) ***REMOVED***
    // Arguments without a callback
    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));
    // Create arguments
    var finalArguments = argsWithoutCallback.concat([
      function(err) ***REMOVED***
        count = count - 1;
        // Save all the errors
        if (err) errors.push(***REMOVED*** name: server.name, err: err ***REMOVED***);
        // We are done
        if (count === 0) ***REMOVED***
          // Auth is done
          self.authenticating = false;

          // Return the auth error
          if (errors.length) ***REMOVED***
            // Remove the entry from the stored authentication contexts
            self.s.authenticationContexts.splice(currentContextIndex, 0);
            // Return error
            return callback(
              new MongoError(***REMOVED***
                message: 'authentication fail',
                errors: errors
              ***REMOVED***),
              false
            );
          ***REMOVED***

          // Successfully authenticated session
          callback(null, self);
        ***REMOVED***
      ***REMOVED***
    ]);

    if (!server.lastIsMaster().arbiterOnly) ***REMOVED***
      // Execute the auth only against non arbiter servers
      server.auth.apply(server, finalArguments);
    ***REMOVED*** else ***REMOVED***
      // If we are authenticating against an arbiter just ignore it
      finalArguments.pop()(null);
    ***REMOVED***
  ***REMOVED***

  // Get total count
  var count = servers.length;

  // Save current context index
  currentContextIndex = this.s.authenticationContexts.length;

  // Store the auth context and return the last index
  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));

  // Authenticate against all servers
  while (servers.length > 0) ***REMOVED***
    auth(servers.shift());
  ***REMOVED***
***REMOVED***;

/**
 * Logout from a database
 * @method
 * @param ***REMOVED***string***REMOVED*** db The db we are logging out from
 * @param ***REMOVED***authResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.logout = function(dbName, callback) ***REMOVED***
  var self = this;
  // Are we authenticating or logging out, throw
  if (this.authenticating) ***REMOVED***
    throw new MongoError('authentication or logout allready in process');
  ***REMOVED***

  // Ensure no new members are processed while logging out
  this.authenticating = true;

  // Remove from all auth providers (avoid any reaplication of the auth details)
  var providers = Object.keys(this.authProviders);
  for (var i = 0; i < providers.length; i++) ***REMOVED***
    this.authProviders[providers[i]].logout(dbName);
  ***REMOVED***

  // Clear out any contexts associated with the db
  self.s.authenticationContexts = self.s.authenticationContexts.filter(function(context) ***REMOVED***
    return context[1] !== dbName;
  ***REMOVED***);

  // Now logout all the servers
  var servers = this.s.replicaSetState.allServers();
  var count = servers.length;
  if (count === 0) return callback();
  var errors = [];

  function logoutServer(_server, cb) ***REMOVED***
    _server.logout(dbName, function(err) ***REMOVED***
      if (err) errors.push(***REMOVED*** name: _server.name, err: err ***REMOVED***);
      cb();
    ***REMOVED***);
  ***REMOVED***

  // Execute logout on all server instances
  for (i = 0; i < servers.length; i++) ***REMOVED***
    logoutServer(servers[i], function() ***REMOVED***
      count = count - 1;

      if (count === 0) ***REMOVED***
        // Do not block new operations
        self.authenticating = false;
        // If we have one or more errors
        if (errors.length)
          return callback(
            new MongoError(***REMOVED***
              message: f('logout failed against db %s', dbName),
              errors: errors
            ***REMOVED***),
            false
          );

        // No errors
        callback();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
***REMOVED***;

/**
 * Get a new cursor
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***object|Long***REMOVED*** cmd Can be either a command returning a cursor or a cursorId
 * @param ***REMOVED***object***REMOVED*** [options] Options for the cursor
 * @param ***REMOVED***object***REMOVED*** [options.batchSize=0] Batchsize for the operation
 * @param ***REMOVED***array***REMOVED*** [options.documents=[]] Initial documents list for cursor
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***ClientSession***REMOVED*** [options.session=null] Session to use for the operation
 * @param ***REMOVED***object***REMOVED*** [options.topology] The internal topology of the created cursor
 * @returns ***REMOVED***Cursor***REMOVED***
 */
ReplSet.prototype.cursor = function(ns, cmd, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  const topology = options.topology || this;

  // Set up final cursor type
  var FinalCursor = options.cursorFactory || this.s.Cursor;

  // Return the cursor
  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);
***REMOVED***;

/**
 * A replset connect event, used to verify that the connection is up and running
 *
 * @event ReplSet#connect
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset reconnect event, used to verify that the topology reconnected
 *
 * @event ReplSet#reconnect
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset fullsetup event, used to signal that all topology members have been contacted.
 *
 * @event ReplSet#fullsetup
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset all event, used to signal that all topology members have been contacted.
 *
 * @event ReplSet#all
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset failed event, used to signal that initial replset connection failed.
 *
 * @event ReplSet#failed
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A server member left the replicaset
 *
 * @event ReplSet#left
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***string***REMOVED*** type The type of member that left (primary|secondary|arbiter)
 * @param ***REMOVED***Server***REMOVED*** server The server object that left
 */

/**
 * A server member joined the replicaset
 *
 * @event ReplSet#joined
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***string***REMOVED*** type The type of member that joined (primary|secondary|arbiter)
 * @param ***REMOVED***Server***REMOVED*** server The server object that joined
 */

/**
 * A server opening SDAM monitoring event
 *
 * @event ReplSet#serverOpening
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A server closed SDAM monitoring event
 *
 * @event ReplSet#serverClosed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A server description SDAM change monitoring event
 *
 * @event ReplSet#serverDescriptionChanged
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology open SDAM event
 *
 * @event ReplSet#topologyOpening
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology closed SDAM event
 *
 * @event ReplSet#topologyClosed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology structure SDAM change event
 *
 * @event ReplSet#topologyDescriptionChanged
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatStarted SDAM event
 *
 * @event ReplSet#serverHeartbeatStarted
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatFailed SDAM event
 *
 * @event ReplSet#serverHeartbeatFailed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatSucceeded SDAM change event
 *
 * @event ReplSet#serverHeartbeatSucceeded
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * An event emitted indicating a command was started, if command monitoring is enabled
 *
 * @event ReplSet#commandStarted
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * An event emitted indicating a command succeeded, if command monitoring is enabled
 *
 * @event ReplSet#commandSucceeded
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * An event emitted indicating a command failed, if command monitoring is enabled
 *
 * @event ReplSet#commandFailed
 * @type ***REMOVED***object***REMOVED***
 */

module.exports = ReplSet;
