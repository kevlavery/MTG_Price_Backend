'use strict';

var fs = require('fs');

/* Note: because this plugin uses process.on('uncaughtException'), only one
 * of these can exist at any given time. This plugin and anything else that
 * uses process.on('uncaughtException') will conflict. */
exports.attachToRunner = function(runner, outputFile) ***REMOVED***
  var smokeOutput = ***REMOVED*** results: [] ***REMOVED***;
  var runningTests = ***REMOVED******REMOVED***;

  var integraPlugin = ***REMOVED***
    beforeTest: function(test, callback) ***REMOVED***
      test.startTime = Date.now();
      runningTests[test.name] = test;
      callback();
    ***REMOVED***,
    afterTest: function(test, callback) ***REMOVED***
      smokeOutput.results.push(***REMOVED***
        status: test.status,
        start: test.startTime,
        end: Date.now(),
        test_file: test.name,
        exit_code: 0,
        url: ''
      ***REMOVED***);
      delete runningTests[test.name];
      callback();
    ***REMOVED***,
    beforeExit: function(obj, callback) ***REMOVED***
      fs.writeFile(outputFile, JSON.stringify(smokeOutput), function() ***REMOVED***
        callback();
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***;

  // In case of exception, make sure we write file
  process.on('uncaughtException', function(err) ***REMOVED***
    // Mark all currently running tests as failed
    for (var testName in runningTests) ***REMOVED***
      smokeOutput.results.push(***REMOVED***
        status: 'fail',
        start: runningTests[testName].startTime,
        end: Date.now(),
        test_file: testName,
        exit_code: 0,
        url: ''
      ***REMOVED***);
    ***REMOVED***

    // write file
    fs.writeFileSync(outputFile, JSON.stringify(smokeOutput));

    // Standard NodeJS uncaught exception handler
    console.error(err.stack);
    process.exit(1);
  ***REMOVED***);

  runner.plugin(integraPlugin);
  return integraPlugin;
***REMOVED***;
