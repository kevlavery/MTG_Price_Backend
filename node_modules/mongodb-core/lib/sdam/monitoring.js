'use strict';

/**
 * Published when server description changes, but does NOT include changes to the RTT.
 *
 * @property ***REMOVED***Object***REMOVED*** topologyId A unique identifier for the topology
 * @property ***REMOVED***ServerAddress***REMOVED*** address The address (host/port pair) of the server
 * @property ***REMOVED***ServerDescription***REMOVED*** previousDescription The previous server description
 * @property ***REMOVED***ServerDescription***REMOVED*** newDescription The new server description
 */
class ServerDescriptionChangedEvent ***REMOVED***
  constructor(topologyId, address, previousDescription, newDescription) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId, address, previousDescription, newDescription ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Published when server is initialized.
 *
 * @property ***REMOVED***Object***REMOVED*** topologyId A unique identifier for the topology
 * @property ***REMOVED***ServerAddress***REMOVED*** address The address (host/port pair) of the server
 */
class ServerOpeningEvent ***REMOVED***
  constructor(topologyId, address) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId, address ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Published when server is closed.
 *
 * @property ***REMOVED***ServerAddress***REMOVED*** address The address (host/port pair) of the server
 * @property ***REMOVED***Object***REMOVED*** topologyId A unique identifier for the topology
 */
class ServerClosedEvent ***REMOVED***
  constructor(topologyId, address) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId, address ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Published when topology description changes.
 *
 * @property ***REMOVED***Object***REMOVED*** topologyId
 * @property ***REMOVED***TopologyDescription***REMOVED*** previousDescription The old topology description
 * @property ***REMOVED***TopologyDescription***REMOVED*** newDescription The new topology description
 */
class TopologyDescriptionChangedEvent ***REMOVED***
  constructor(topologyId, previousDescription, newDescription) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId, previousDescription, newDescription ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Published when topology is initialized.
 *
 * @param ***REMOVED***Object***REMOVED*** topologyId A unique identifier for the topology
 */
class TopologyOpeningEvent ***REMOVED***
  constructor(topologyId) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Published when topology is closed.
 *
 * @param ***REMOVED***Object***REMOVED*** topologyId A unique identifier for the topology
 */
class TopologyClosedEvent ***REMOVED***
  constructor(topologyId) ***REMOVED***
    Object.assign(this, ***REMOVED*** topologyId ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Fired when the server monitor’s ismaster command is started - immediately before
 * the ismaster command is serialized into raw BSON and written to the socket.
 *
 * @property ***REMOVED***Object***REMOVED*** connectionId The connection id for the command
 */
class ServerHeartbeatStartedEvent ***REMOVED***
  constructor(connectionId) ***REMOVED***
    Object.assign(this, ***REMOVED*** connectionId ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Fired when the server monitor’s ismaster succeeds.
 *
 * @param ***REMOVED***Number***REMOVED*** duration The execution time of the event
 * @param ***REMOVED***Object***REMOVED*** reply The command reply
 * @param ***REMOVED***Object***REMOVED*** connectionId The connection id for the command
 */
class ServerHeartbeatSucceededEvent ***REMOVED***
  constructor(duration, reply, connectionId) ***REMOVED***
    Object.assign(this, ***REMOVED*** duration, reply, connectionId ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.
 *
 * @param ***REMOVED***Number***REMOVED*** duration The execution time of the event
 * @param ***REMOVED***MongoError|Object***REMOVED*** failure The command failure
 * @param ***REMOVED***Object***REMOVED*** connectionId The connection id for the command
 */
class ServerHearbeatFailedEvent ***REMOVED***
  constructor(duration, failure, connectionId) ***REMOVED***
    Object.assign(this, ***REMOVED*** duration, failure, connectionId ***REMOVED***);
  ***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
  ServerDescriptionChangedEvent,
  ServerOpeningEvent,
  ServerClosedEvent,
  TopologyDescriptionChangedEvent,
  TopologyOpeningEvent,
  TopologyClosedEvent,
  ServerHeartbeatStartedEvent,
  ServerHeartbeatSucceededEvent,
  ServerHearbeatFailedEvent
***REMOVED***;
