'use strict';

var f = require('util').format,
  crypto = require('crypto'),
  Query = require('../connection/commands').Query,
  MongoError = require('../error').MongoError;

var AuthSession = function(db, username, password) ***REMOVED***
  this.db = db;
  this.username = username;
  this.password = password;
***REMOVED***;

AuthSession.prototype.equal = function(session) ***REMOVED***
  return (
    session.db === this.db &&
    session.username === this.username &&
    session.password === this.password
  );
***REMOVED***;

/**
 * Creates a new MongoCR authentication mechanism
 * @class
 * @return ***REMOVED***MongoCR***REMOVED*** A cursor instance
 */
var MongoCR = function(bson) ***REMOVED***
  this.bson = bson;
  this.authStore = [];
***REMOVED***;

// Add to store only if it does not exist
var addAuthSession = function(authStore, session) ***REMOVED***
  var found = false;

  for (var i = 0; i < authStore.length; i++) ***REMOVED***
    if (authStore[i].equal(session)) ***REMOVED***
      found = true;
      break;
    ***REMOVED***
  ***REMOVED***

  if (!found) authStore.push(session);
***REMOVED***;

/**
 * Authenticate
 * @method
 * @param ***REMOVED******REMOVED***Server***REMOVED***|***REMOVED***ReplSet***REMOVED***|***REMOVED***Mongos***REMOVED******REMOVED*** server Topology the authentication method is being called on
 * @param ***REMOVED***[]Connections***REMOVED*** connections Connections to authenticate using this authenticator
 * @param ***REMOVED***string***REMOVED*** db Name of the database
 * @param ***REMOVED***string***REMOVED*** username Username
 * @param ***REMOVED***string***REMOVED*** password Password
 * @param ***REMOVED***authResultCallback***REMOVED*** callback The callback to return the result from the authentication
 * @return ***REMOVED***object***REMOVED***
 */
MongoCR.prototype.auth = function(server, connections, db, username, password, callback) ***REMOVED***
  var self = this;
  // Total connections
  var count = connections.length;
  if (count === 0) return callback(null, null);

  // Valid connections
  var numberOfValidConnections = 0;
  var errorObject = null;

  // For each connection we need to authenticate
  while (connections.length > 0) ***REMOVED***
    // Execute MongoCR
    var executeMongoCR = function(connection) ***REMOVED***
      // Write the commmand on the connection
      server(
        connection,
        new Query(
          self.bson,
          f('%s.$cmd', db),
          ***REMOVED***
            getnonce: 1
          ***REMOVED***,
          ***REMOVED***
            numberToSkip: 0,
            numberToReturn: 1
          ***REMOVED***
        ),
        function(err, r) ***REMOVED***
          var nonce = null;
          var key = null;

          // Adjust the number of connections left
          // Get nonce
          if (err == null) ***REMOVED***
            nonce = r.result.nonce;
            // Use node md5 generator
            var md5 = crypto.createHash('md5');
            // Generate keys used for authentication
            md5.update(username + ':mongo:' + password, 'utf8');
            var hash_password = md5.digest('hex');
            // Final key
            md5 = crypto.createHash('md5');
            md5.update(nonce + username + hash_password, 'utf8');
            key = md5.digest('hex');
          ***REMOVED***

          // Execute command
          // Write the commmand on the connection
          server(
            connection,
            new Query(
              self.bson,
              f('%s.$cmd', db),
              ***REMOVED***
                authenticate: 1,
                user: username,
                nonce: nonce,
                key: key
              ***REMOVED***,
              ***REMOVED***
                numberToSkip: 0,
                numberToReturn: 1
              ***REMOVED***
            ),
            function(err, r) ***REMOVED***
              count = count - 1;

              // If we have an error
              if (err) ***REMOVED***
                errorObject = err;
              ***REMOVED*** else if (r.result['$err']) ***REMOVED***
                errorObject = r.result;
              ***REMOVED*** else if (r.result['errmsg']) ***REMOVED***
                errorObject = r.result;
              ***REMOVED*** else ***REMOVED***
                numberOfValidConnections = numberOfValidConnections + 1;
              ***REMOVED***

              // We have authenticated all connections
              if (count === 0 && numberOfValidConnections > 0) ***REMOVED***
                // Store the auth details
                addAuthSession(self.authStore, new AuthSession(db, username, password));
                // Return correct authentication
                callback(null, true);
              ***REMOVED*** else if (count === 0) ***REMOVED***
                if (errorObject == null)
                  errorObject = new MongoError(f('failed to authenticate using mongocr'));
                callback(errorObject, false);
              ***REMOVED***
            ***REMOVED***
          );
        ***REMOVED***
      );
    ***REMOVED***;

    var _execute = function(_connection) ***REMOVED***
      process.nextTick(function() ***REMOVED***
        executeMongoCR(_connection);
      ***REMOVED***);
    ***REMOVED***;

    _execute(connections.shift());
  ***REMOVED***
***REMOVED***;

/**
 * Remove authStore credentials
 * @method
 * @param ***REMOVED***string***REMOVED*** db Name of database we are removing authStore details about
 * @return ***REMOVED***object***REMOVED***
 */
MongoCR.prototype.logout = function(dbName) ***REMOVED***
  this.authStore = this.authStore.filter(function(x) ***REMOVED***
    return x.db !== dbName;
  ***REMOVED***);
***REMOVED***;

/**
 * Re authenticate pool
 * @method
 * @param ***REMOVED******REMOVED***Server***REMOVED***|***REMOVED***ReplSet***REMOVED***|***REMOVED***Mongos***REMOVED******REMOVED*** server Topology the authentication method is being called on
 * @param ***REMOVED***[]Connections***REMOVED*** connections Connections to authenticate using this authenticator
 * @param ***REMOVED***authResultCallback***REMOVED*** callback The callback to return the result from the authentication
 * @return ***REMOVED***object***REMOVED***
 */
MongoCR.prototype.reauthenticate = function(server, connections, callback) ***REMOVED***
  var authStore = this.authStore.slice(0);
  var count = authStore.length;
  if (count === 0) return callback(null, null);
  // Iterate over all the auth details stored
  for (var i = 0; i < authStore.length; i++) ***REMOVED***
    this.auth(
      server,
      connections,
      authStore[i].db,
      authStore[i].username,
      authStore[i].password,
      function(err) ***REMOVED***
        count = count - 1;
        // Done re-authenticating
        if (count === 0) ***REMOVED***
          callback(err, null);
        ***REMOVED***
      ***REMOVED***
    );
  ***REMOVED***
***REMOVED***;

/**
 * This is a result from a authentication strategy
 *
 * @callback authResultCallback
 * @param ***REMOVED***error***REMOVED*** error An error object. Set to null if no error present
 * @param ***REMOVED***boolean***REMOVED*** result The result of the authentication process
 */

module.exports = MongoCR;
