'use strict';

const f = require('util').format;
const Kerberos = require('../utils').Kerberos;
const MongoAuthProcess = require('../utils').MongoAuthProcess;
const Query = require('../connection/commands').Query;
const MongoError = require('../error').MongoError;

var AuthSession = function(db, username, password, options) ***REMOVED***
  this.db = db;
  this.username = username;
  this.password = password;
  this.options = options;
***REMOVED***;

AuthSession.prototype.equal = function(session) ***REMOVED***
  return (
    session.db === this.db &&
    session.username === this.username &&
    session.password === this.password
  );
***REMOVED***;

/**
 * Creates a new SSPI authentication mechanism
 * @class
 * @return ***REMOVED***SSPI***REMOVED*** A cursor instance
 */
var SSPI = function(bson) ***REMOVED***
  this.bson = bson;
  this.authStore = [];
***REMOVED***;

/**
 * Authenticate
 * @method
 * @param ***REMOVED******REMOVED***Server***REMOVED***|***REMOVED***ReplSet***REMOVED***|***REMOVED***Mongos***REMOVED******REMOVED*** server Topology the authentication method is being called on
 * @param ***REMOVED***[]Connections***REMOVED*** connections Connections to authenticate using this authenticator
 * @param ***REMOVED***string***REMOVED*** db Name of the database
 * @param ***REMOVED***string***REMOVED*** username Username
 * @param ***REMOVED***string***REMOVED*** password Password
 * @param ***REMOVED***authResultCallback***REMOVED*** callback The callback to return the result from the authentication
 * @return ***REMOVED***object***REMOVED***
 */
SSPI.prototype.auth = function(server, connections, db, username, password, options, callback) ***REMOVED***
  var self = this;
  // We don't have the Kerberos library
  if (Kerberos == null) return callback(new Error('Kerberos library is not installed'));
  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
  // Total connections
  var count = connections.length;
  if (count === 0) return callback(null, null);

  // Valid connections
  var numberOfValidConnections = 0;
  var errorObject = null;

  // For each connection we need to authenticate
  while (connections.length > 0) ***REMOVED***
    // Execute MongoCR
    var execute = function(connection) ***REMOVED***
      // Start Auth process for a connection
      SSIPAuthenticate(
        self,
        username,
        password,
        gssapiServiceName,
        server,
        connection,
        options,
        function(err, r) ***REMOVED***
          // Adjust count
          count = count - 1;

          // If we have an error
          if (err) ***REMOVED***
            errorObject = err;
          ***REMOVED*** else if (r && typeof r === 'object' && r.result['$err']) ***REMOVED***
            errorObject = r.result;
          ***REMOVED*** else if (r && typeof r === 'object' && r.result['errmsg']) ***REMOVED***
            errorObject = r.result;
          ***REMOVED*** else ***REMOVED***
            numberOfValidConnections = numberOfValidConnections + 1;
          ***REMOVED***

          // We have authenticated all connections
          if (count === 0 && numberOfValidConnections > 0) ***REMOVED***
            // Store the auth details
            addAuthSession(self.authStore, new AuthSession(db, username, password, options));
            // Return correct authentication
            callback(null, true);
          ***REMOVED*** else if (count === 0) ***REMOVED***
            if (errorObject == null)
              errorObject = new MongoError(f('failed to authenticate using mongocr'));
            callback(errorObject, false);
          ***REMOVED***
        ***REMOVED***
      );
    ***REMOVED***;

    var _execute = function(_connection) ***REMOVED***
      process.nextTick(function() ***REMOVED***
        execute(_connection);
      ***REMOVED***);
    ***REMOVED***;

    _execute(connections.shift());
  ***REMOVED***
***REMOVED***;

var SSIPAuthenticate = function(
  self,
  username,
  password,
  gssapiServiceName,
  server,
  connection,
  options,
  callback
) ***REMOVED***
  // Build Authentication command to send to MongoDB
  var command = ***REMOVED***
    saslStart: 1,
    mechanism: 'GSSAPI',
    payload: '',
    autoAuthorize: 1
  ***REMOVED***;

  // Create authenticator
  var mongo_auth_process = new MongoAuthProcess(
    connection.host,
    connection.port,
    gssapiServiceName,
    options
  );

  // Execute first sasl step
  server(
    connection,
    new Query(self.bson, '$external.$cmd', command, ***REMOVED***
      numberToSkip: 0,
      numberToReturn: 1
    ***REMOVED***),
    function(err, r) ***REMOVED***
      if (err) return callback(err, false);
      var doc = r.result;

      mongo_auth_process.init(username, password, function(err) ***REMOVED***
        if (err) return callback(err);

        mongo_auth_process.transition(doc.payload, function(err, payload) ***REMOVED***
          if (err) return callback(err);

          // Perform the next step against mongod
          var command = ***REMOVED***
            saslContinue: 1,
            conversationId: doc.conversationId,
            payload: payload
          ***REMOVED***;

          // Execute the command
          server(
            connection,
            new Query(self.bson, '$external.$cmd', command, ***REMOVED***
              numberToSkip: 0,
              numberToReturn: 1
            ***REMOVED***),
            function(err, r) ***REMOVED***
              if (err) return callback(err, false);
              var doc = r.result;

              mongo_auth_process.transition(doc.payload, function(err, payload) ***REMOVED***
                if (err) return callback(err);

                // Perform the next step against mongod
                var command = ***REMOVED***
                  saslContinue: 1,
                  conversationId: doc.conversationId,
                  payload: payload
                ***REMOVED***;

                // Execute the command
                server(
                  connection,
                  new Query(self.bson, '$external.$cmd', command, ***REMOVED***
                    numberToSkip: 0,
                    numberToReturn: 1
                  ***REMOVED***),
                  function(err, r) ***REMOVED***
                    if (err) return callback(err, false);
                    var doc = r.result;

                    mongo_auth_process.transition(doc.payload, function(err, payload) ***REMOVED***
                      // Perform the next step against mongod
                      var command = ***REMOVED***
                        saslContinue: 1,
                        conversationId: doc.conversationId,
                        payload: payload
                      ***REMOVED***;

                      // Execute the command
                      server(
                        connection,
                        new Query(self.bson, '$external.$cmd', command, ***REMOVED***
                          numberToSkip: 0,
                          numberToReturn: 1
                        ***REMOVED***),
                        function(err, r) ***REMOVED***
                          if (err) return callback(err, false);
                          var doc = r.result;

                          if (doc.done) return callback(null, true);
                          callback(new Error('Authentication failed'), false);
                        ***REMOVED***
                      );
                    ***REMOVED***);
                  ***REMOVED***
                );
              ***REMOVED***);
            ***REMOVED***
          );
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***
  );
***REMOVED***;

// Add to store only if it does not exist
var addAuthSession = function(authStore, session) ***REMOVED***
  var found = false;

  for (var i = 0; i < authStore.length; i++) ***REMOVED***
    if (authStore[i].equal(session)) ***REMOVED***
      found = true;
      break;
    ***REMOVED***
  ***REMOVED***

  if (!found) authStore.push(session);
***REMOVED***;

/**
 * Remove authStore credentials
 * @method
 * @param ***REMOVED***string***REMOVED*** db Name of database we are removing authStore details about
 * @return ***REMOVED***object***REMOVED***
 */
SSPI.prototype.logout = function(dbName) ***REMOVED***
  this.authStore = this.authStore.filter(function(x) ***REMOVED***
    return x.db !== dbName;
  ***REMOVED***);
***REMOVED***;

/**
 * Re authenticate pool
 * @method
 * @param ***REMOVED******REMOVED***Server***REMOVED***|***REMOVED***ReplSet***REMOVED***|***REMOVED***Mongos***REMOVED******REMOVED*** server Topology the authentication method is being called on
 * @param ***REMOVED***[]Connections***REMOVED*** connections Connections to authenticate using this authenticator
 * @param ***REMOVED***authResultCallback***REMOVED*** callback The callback to return the result from the authentication
 * @return ***REMOVED***object***REMOVED***
 */
SSPI.prototype.reauthenticate = function(server, connections, callback) ***REMOVED***
  var authStore = this.authStore.slice(0);
  var count = authStore.length;
  if (count === 0) return callback(null, null);
  // Iterate over all the auth details stored
  for (var i = 0; i < authStore.length; i++) ***REMOVED***
    this.auth(
      server,
      connections,
      authStore[i].db,
      authStore[i].username,
      authStore[i].password,
      authStore[i].options,
      function(err) ***REMOVED***
        count = count - 1;
        // Done re-authenticating
        if (count === 0) ***REMOVED***
          callback(err, null);
        ***REMOVED***
      ***REMOVED***
    );
  ***REMOVED***
***REMOVED***;

/**
 * This is a result from a authentication strategy
 *
 * @callback authResultCallback
 * @param ***REMOVED***error***REMOVED*** error An error object. Set to null if no error present
 * @param ***REMOVED***boolean***REMOVED*** result The result of the authentication process
 */

module.exports = SSPI;
