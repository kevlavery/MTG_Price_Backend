'use strict';

const crypto = require('crypto');
const requireOptional = require('require_optional');

/**
 * Generate a UUIDv4
 */
const uuidV4 = () => ***REMOVED***
  const result = crypto.randomBytes(16);
  result[6] = (result[6] & 0x0f) | 0x40;
  result[8] = (result[8] & 0x3f) | 0x80;
  return result;
***REMOVED***;

/**
 * Returns the duration calculated from two high resolution timers in milliseconds
 *
 * @param ***REMOVED***Object***REMOVED*** started A high resolution timestamp created from `process.hrtime()`
 * @returns ***REMOVED***Number***REMOVED*** The duration in milliseconds
 */
const calculateDurationInMs = started => ***REMOVED***
  const hrtime = process.hrtime(started);
  return (hrtime[0] * 1e9 + hrtime[1]) / 1e6;
***REMOVED***;

/**
 * Relays events for a given listener and emitter
 *
 * @param ***REMOVED***EventEmitter***REMOVED*** listener the EventEmitter to listen to the events from
 * @param ***REMOVED***EventEmitter***REMOVED*** emitter the EventEmitter to relay the events to
 */
function relayEvents(listener, emitter, events) ***REMOVED***
  events.forEach(eventName => listener.on(eventName, event => emitter.emit(eventName, event)));
***REMOVED***

// Grab Kerberos values if they exist, otherwise set them to null
let Kerberos = null;
let MongoAuthProcess = null;

try ***REMOVED***
  const kerberos = requireOptional('kerberos');
  if (kerberos) ***REMOVED***
    Kerberos = kerberos.Kerberos;
    MongoAuthProcess = kerberos.processes.MongoAuthProcess;
  ***REMOVED***
***REMOVED*** catch (err) ***REMOVED***
  console.warn(err.message);
***REMOVED***

module.exports = ***REMOVED***
  uuidV4,
  calculateDurationInMs,
  relayEvents,
  Kerberos,
  MongoAuthProcess
***REMOVED***;
