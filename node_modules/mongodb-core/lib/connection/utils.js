'use strict';

var f = require('util').format,
  require_optional = require('require_optional');

// Set property function
var setProperty = function(obj, prop, flag, values) ***REMOVED***
  Object.defineProperty(obj, prop.name, ***REMOVED***
    enumerable: true,
    set: function(value) ***REMOVED***
      if (typeof value !== 'boolean') throw new Error(f('%s required a boolean', prop.name));
      // Flip the bit to 1
      if (value === true) values.flags |= flag;
      // Flip the bit to 0 if it's set, otherwise ignore
      if (value === false && (values.flags & flag) === flag) values.flags ^= flag;
      prop.value = value;
    ***REMOVED***,
    get: function() ***REMOVED***
      return prop.value;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

// Set property function
var getProperty = function(obj, propName, fieldName, values, func) ***REMOVED***
  Object.defineProperty(obj, propName, ***REMOVED***
    enumerable: true,
    get: function() ***REMOVED***
      // Not parsed yet, parse it
      if (values[fieldName] == null && obj.isParsed && !obj.isParsed()) ***REMOVED***
        obj.parse();
      ***REMOVED***

      // Do we have a post processing function
      if (typeof func === 'function') return func(values[fieldName]);
      // Return raw value
      return values[fieldName];
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

// Set simple property
var getSingleProperty = function(obj, name, value) ***REMOVED***
  Object.defineProperty(obj, name, ***REMOVED***
    enumerable: true,
    get: function() ***REMOVED***
      return value;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

// Shallow copy
var copy = function(fObj, tObj) ***REMOVED***
  tObj = tObj || ***REMOVED******REMOVED***;
  for (var name in fObj) tObj[name] = fObj[name];
  return tObj;
***REMOVED***;

var debugOptions = function(debugFields, options) ***REMOVED***
  var finaloptions = ***REMOVED******REMOVED***;
  debugFields.forEach(function(n) ***REMOVED***
    finaloptions[n] = options[n];
  ***REMOVED***);

  return finaloptions;
***REMOVED***;

var retrieveBSON = function() ***REMOVED***
  var BSON = require('bson');
  BSON.native = false;

  try ***REMOVED***
    var optionalBSON = require_optional('bson-ext');
    if (optionalBSON) ***REMOVED***
      optionalBSON.native = true;
      return optionalBSON;
    ***REMOVED***
  ***REMOVED*** catch (err) ***REMOVED******REMOVED*** // eslint-disable-line

  return BSON;
***REMOVED***;

// Throw an error if an attempt to use Snappy is made when Snappy is not installed
var noSnappyWarning = function() ***REMOVED***
  throw new Error(
    'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.'
  );
***REMOVED***;

// Facilitate loading Snappy optionally
var retrieveSnappy = function() ***REMOVED***
  var snappy = null;
  try ***REMOVED***
    snappy = require_optional('snappy');
  ***REMOVED*** catch (error) ***REMOVED******REMOVED*** // eslint-disable-line
  if (!snappy) ***REMOVED***
    snappy = ***REMOVED***
      compress: noSnappyWarning,
      uncompress: noSnappyWarning,
      compressSync: noSnappyWarning,
      uncompressSync: noSnappyWarning
    ***REMOVED***;
  ***REMOVED***
  return snappy;
***REMOVED***;

exports.setProperty = setProperty;
exports.getProperty = getProperty;
exports.getSingleProperty = getSingleProperty;
exports.copy = copy;
exports.debugOptions = debugOptions;
exports.retrieveBSON = retrieveBSON;
exports.retrieveSnappy = retrieveSnappy;
