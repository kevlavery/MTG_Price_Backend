'use strict';

var Snappy = require('../connection/utils').retrieveSnappy(),
  zlib = require('zlib');

var compressorIDs = ***REMOVED***
  snappy: 1,
  zlib: 2
***REMOVED***;

var uncompressibleCommands = [
  'ismaster',
  'saslStart',
  'saslContinue',
  'getnonce',
  'authenticate',
  'createUser',
  'updateUser',
  'copydbSaslStart',
  'copydbgetnonce',
  'copydb'
];

// Facilitate compressing a message using an agreed compressor
var compress = function(self, dataToBeCompressed, callback) ***REMOVED***
  switch (self.options.agreedCompressor) ***REMOVED***
    case 'snappy':
      Snappy.compress(dataToBeCompressed, callback);
      break;
    case 'zlib':
      // Determine zlibCompressionLevel
      var zlibOptions = ***REMOVED******REMOVED***;
      if (self.options.zlibCompressionLevel) ***REMOVED***
        zlibOptions.level = self.options.zlibCompressionLevel;
      ***REMOVED***
      zlib.deflate(dataToBeCompressed, zlibOptions, callback);
      break;
    default:
      throw new Error(
        'Attempt to compress message using unknown compressor "' +
          self.options.agreedCompressor +
          '".'
      );
  ***REMOVED***
***REMOVED***;

// Decompress a message using the given compressor
var decompress = function(compressorID, compressedData, callback) ***REMOVED***
  if (compressorID < 0 || compressorID > compressorIDs.length) ***REMOVED***
    throw new Error(
      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +
        compressorID +
        ')'
    );
  ***REMOVED***
  switch (compressorID) ***REMOVED***
    case compressorIDs.snappy:
      Snappy.uncompress(compressedData, callback);
      break;
    case compressorIDs.zlib:
      zlib.inflate(compressedData, callback);
      break;
    default:
      callback(null, compressedData);
  ***REMOVED***
***REMOVED***;

module.exports = ***REMOVED***
  compressorIDs: compressorIDs,
  uncompressibleCommands: uncompressibleCommands,
  compress: compress,
  decompress: decompress
***REMOVED***;
