'use strict';

var traverse = module.exports = function (schema, opts, cb) ***REMOVED***
  if (typeof opts == 'function') ***REMOVED***
    cb = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  _traverse(opts, cb, schema, '', schema);
***REMOVED***;


traverse.keywords = ***REMOVED***
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
***REMOVED***;

traverse.arrayKeywords = ***REMOVED***
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
***REMOVED***;

traverse.propsKeywords = ***REMOVED***
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
***REMOVED***;

traverse.skipKeywords = ***REMOVED***
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
***REMOVED***;


function _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) ***REMOVED***
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) ***REMOVED***
    cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) ***REMOVED***
      var sch = schema[key];
      if (Array.isArray(sch)) ***REMOVED***
        if (key in traverse.arrayKeywords) ***REMOVED***
          for (var i=0; i<sch.length; i++)
            _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        ***REMOVED***
      ***REMOVED*** else if (key in traverse.propsKeywords) ***REMOVED***
        if (sch && typeof sch == 'object') ***REMOVED***
          for (var prop in sch)
            _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        ***REMOVED***
      ***REMOVED*** else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) ***REMOVED***
        _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***


function escapeJsonPtr(str) ***REMOVED***
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
***REMOVED***
