"use strict";
module.exports = function(Promise) ***REMOVED***
function returner() ***REMOVED***
    return this.value;
***REMOVED***
function thrower() ***REMOVED***
    throw this.reason;
***REMOVED***

Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) ***REMOVED***
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, ***REMOVED***value: value***REMOVED***, undefined);
***REMOVED***;

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) ***REMOVED***
    return this._then(
        thrower, undefined, undefined, ***REMOVED***reason: reason***REMOVED***, undefined);
***REMOVED***;

Promise.prototype.catchThrow = function (reason) ***REMOVED***
    if (arguments.length <= 1) ***REMOVED***
        return this._then(
            undefined, thrower, undefined, ***REMOVED***reason: reason***REMOVED***, undefined);
    ***REMOVED*** else ***REMOVED***
        var _reason = arguments[1];
        var handler = function() ***REMOVED***throw _reason;***REMOVED***;
        return this.caught(reason, handler);
    ***REMOVED***
***REMOVED***;

Promise.prototype.catchReturn = function (value) ***REMOVED***
    if (arguments.length <= 1) ***REMOVED***
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, ***REMOVED***value: value***REMOVED***, undefined);
    ***REMOVED*** else ***REMOVED***
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        var handler = function() ***REMOVED***return _value;***REMOVED***;
        return this.caught(value, handler);
    ***REMOVED***
***REMOVED***;
***REMOVED***;
