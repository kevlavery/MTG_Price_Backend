"use strict";
var es5 = require("./es5");
var Objectfreeze = es5.freeze;
var util = require("./util");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) ***REMOVED***
    function SubError(message) ***REMOVED***
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) ***REMOVED***
            Error.captureStackTrace(this, this.constructor);
        ***REMOVED*** else ***REMOVED***
            Error.call(this);
        ***REMOVED***
    ***REMOVED***
    inherits(SubError, Error);
    return SubError;
***REMOVED***

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try ***REMOVED***
    _TypeError = TypeError;
    _RangeError = RangeError;
***REMOVED*** catch(e) ***REMOVED***
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
***REMOVED***

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) ***REMOVED***
    if (typeof Array.prototype[methods[i]] === "function") ***REMOVED***
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    ***REMOVED***
***REMOVED***

es5.defineProperty(AggregateError.prototype, "length", ***REMOVED***
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
***REMOVED***);
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() ***REMOVED***
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) ***REMOVED***
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) ***REMOVED***
            lines[j] = indent + lines[j];
        ***REMOVED***
        str = lines.join("\n");
        ret += str + "\n";
    ***REMOVED***
    level--;
    return ret;
***REMOVED***;

function OperationalError(message) ***REMOVED***
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) ***REMOVED***
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    ***REMOVED*** else if (Error.captureStackTrace) ***REMOVED***
        Error.captureStackTrace(this, this.constructor);
    ***REMOVED***

***REMOVED***
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) ***REMOVED***
    errorTypes = Objectfreeze(***REMOVED***
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    ***REMOVED***);
    es5.defineProperty(Error, "__BluebirdErrorTypes__", ***REMOVED***
        value: errorTypes,
        writable: false,
        enumerable: false,
        configurable: false
    ***REMOVED***);
***REMOVED***

module.exports = ***REMOVED***
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
***REMOVED***;
