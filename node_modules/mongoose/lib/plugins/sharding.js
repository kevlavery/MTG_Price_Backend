'use strict';

var utils = require('../utils');

/*!
 * ignore
 */

module.exports = function shardingPlugin(schema) ***REMOVED***
  schema.post('init', function() ***REMOVED***
    storeShard.call(this);
    return this;
  ***REMOVED***);
  schema.pre('save', function(next) ***REMOVED***
    applyWhere.call(this);
    next();
  ***REMOVED***);
  schema.post('save', function() ***REMOVED***
    storeShard.call(this);
  ***REMOVED***);
***REMOVED***;

/*!
 * ignore
 */

function applyWhere() ***REMOVED***
  var paths;
  var len;

  if (this.$__.shardval) ***REMOVED***
    paths = Object.keys(this.$__.shardval);
    len = paths.length;

    this.$where = this.$where || ***REMOVED******REMOVED***;
    for (var i = 0; i < len; ++i) ***REMOVED***
      this.$where[paths[i]] = this.$__.shardval[paths[i]];
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/*!
 * ignore
 */

module.exports.storeShard = storeShard;

/*!
 * ignore
 */

function storeShard() ***REMOVED***
  // backwards compat
  var key = this.schema.options.shardKey || this.schema.options.shardkey;
  if (!(key && utils.getFunctionName(key.constructor) === 'Object')) ***REMOVED***
    return;
  ***REMOVED***

  var orig = this.$__.shardval = ***REMOVED******REMOVED***,
      paths = Object.keys(key),
      len = paths.length,
      val;

  for (var i = 0; i < len; ++i) ***REMOVED***
    val = this.getValue(paths[i]);
    if (utils.isMongooseObject(val)) ***REMOVED***
      orig[paths[i]] = val.toObject(***REMOVED***depopulate: true, _isNested: true***REMOVED***);
    ***REMOVED*** else if (val !== null && val !== undefined && val.valueOf &&
    // Explicitly don't take value of dates
        (!val.constructor || utils.getFunctionName(val.constructor) !== 'Date')) ***REMOVED***
      orig[paths[i]] = val.valueOf();
    ***REMOVED*** else ***REMOVED***
      orig[paths[i]] = val;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
