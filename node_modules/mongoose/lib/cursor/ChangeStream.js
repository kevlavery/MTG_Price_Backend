'use strict';

/*!
 * Module dependencies.
 */

const EventEmitter = require('events').EventEmitter;

/*!
 * ignore
 */

class ChangeStream extends EventEmitter ***REMOVED***
  constructor(model, pipeline, options) ***REMOVED***
    super();

    this.driverChangeStream = null;

    // This wrapper is necessary because of buffering.
    if (model.collection.buffer) ***REMOVED***
      model.collection.addQueue(() => ***REMOVED***
        this.driverChangeStream = model.collection.watch(pipeline, options);
        this._bindEvents();
        this.emit('ready');
      ***REMOVED***);
    ***REMOVED*** else ***REMOVED***
      this.driverChangeStream = model.collection.watch(pipeline, options);
      this._bindEvents();
      this.emit('ready');
    ***REMOVED***
  ***REMOVED***

  _bindEvents() ***REMOVED***
    ['close', 'change', 'end', 'error'].forEach(ev => ***REMOVED***
      this.driverChangeStream.on(ev, data => this.emit(ev, data));
    ***REMOVED***);
  ***REMOVED***

  _queue(cb) ***REMOVED***
    this.once('ready', () => cb());
  ***REMOVED***
***REMOVED***

/*!
 * ignore
 */

module.exports = ChangeStream;
