'use strict';

const get = require('lodash.get');

/*!
 * Register methods for this model
 *
 * @param ***REMOVED***Model***REMOVED*** model
 * @param ***REMOVED***Schema***REMOVED*** schema
 */

module.exports = function applyMethods(model, schema) ***REMOVED***
  function apply(method, schema) ***REMOVED***
    Object.defineProperty(model.prototype, method, ***REMOVED***
      get: function() ***REMOVED***
        var h = ***REMOVED******REMOVED***;
        for (var k in schema.methods[method]) ***REMOVED***
          h[k] = schema.methods[method][k].bind(this);
        ***REMOVED***
        return h;
      ***REMOVED***,
      configurable: true
    ***REMOVED***);
  ***REMOVED***
  for (const method of Object.keys(schema.methods)) ***REMOVED***
    const fn = schema.methods[method];
    if (schema.tree.hasOwnProperty(method)) ***REMOVED***
      throw new Error('You have a method and a property in your schema both ' +
        'named "' + method + '"');
    ***REMOVED***
    if (schema.reserved[method] &&
        !get(schema, `methodOptions.$***REMOVED***method***REMOVED***.suppressWarning`, false)) ***REMOVED***
      console.warn(`mongoose: the method name "$***REMOVED***method***REMOVED***" is used by mongoose ` +
        'internally, overwriting it may cause bugs. If you\'re sure you know ' +
        'what you\'re doing, you can suppress this error by using ' +
        `\`schema.method('$***REMOVED***method***REMOVED***', fn, ***REMOVED*** suppressWarning: true ***REMOVED***)\`.`);
    ***REMOVED***
    if (typeof fn === 'function') ***REMOVED***
      model.prototype[method] = fn;
    ***REMOVED*** else ***REMOVED***
      apply(method, schema);
    ***REMOVED***
  ***REMOVED***

  // Recursively call `applyMethods()` on child schemas
  model.$appliedMethods = true;
  for (let i = 0; i < schema.childSchemas.length; ++i) ***REMOVED***
    if (schema.childSchemas[i].model.$appliedMethods) ***REMOVED***
      continue;
    ***REMOVED***
    applyMethods(schema.childSchemas[i].model, schema.childSchemas[i].schema);
  ***REMOVED***
***REMOVED***;
