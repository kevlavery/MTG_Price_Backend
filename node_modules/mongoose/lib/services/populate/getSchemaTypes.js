'use strict';

/*!
 * ignore
 */

var Mixed = require('../../schema/mixed');
var mpath = require('mpath');

/*!
 * @param ***REMOVED***Schema***REMOVED*** schema
 * @param ***REMOVED***Object***REMOVED*** doc POJO
 * @param ***REMOVED***string***REMOVED*** path
 */

module.exports = function getSchemaTypes(schema, doc, path) ***REMOVED***
  const pathschema = schema.path(path);

  if (pathschema) ***REMOVED***
    return pathschema;
  ***REMOVED***

  function search(parts, schema) ***REMOVED***
    let p = parts.length + 1;
    let foundschema;
    let trypath;

    while (p--) ***REMOVED***
      trypath = parts.slice(0, p).join('.');
      foundschema = schema.path(trypath);
      if (foundschema) ***REMOVED***
        if (foundschema.caster) ***REMOVED***
          // array of Mixed?
          if (foundschema.caster instanceof Mixed) ***REMOVED***
            return foundschema.caster;
          ***REMOVED***

          let schemas = null;
          if (doc != null && foundschema.schema != null && foundschema.schema.discriminators != null) ***REMOVED***
            const discriminators = foundschema.schema.discriminators;
            const keys = mpath.get(trypath + '.' + foundschema.schema.options.discriminatorKey,
              doc);
            schemas = Object.keys(discriminators).
              reduce(function(cur, discriminator) ***REMOVED***
                if (keys.indexOf(discriminator) !== -1) ***REMOVED***
                  cur.push(discriminators[discriminator]);
                ***REMOVED***
                return cur;
              ***REMOVED***, []);
          ***REMOVED***

          // Now that we found the array, we need to check if there
          // are remaining document paths to look up for casting.
          // Also we need to handle array.$.path since schema.path
          // doesn't work for that.
          // If there is no foundschema.schema we are dealing with
          // a path like array.$
          if (p !== parts.length && foundschema.schema) ***REMOVED***
            let ret;
            if (parts[p] === '$') ***REMOVED***
              if (p + 1 === parts.length) ***REMOVED***
                // comments.$
                return foundschema;
              ***REMOVED***
              // comments.$.comments.$.title
              ret = search(parts.slice(p + 1), schema);
              if (ret) ***REMOVED***
                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
                  !foundschema.schema.$isSingleNested;
              ***REMOVED***
              return ret;
            ***REMOVED***

            if (schemas != null && schemas.length > 0) ***REMOVED***
              ret = [];
              for (var i = 0; i < schemas.length; ++i) ***REMOVED***
                let _ret = search(parts.slice(p), schemas[i]);
                if (_ret != null) ***REMOVED***
                  _ret.$isUnderneathDocArray = _ret.$isUnderneathDocArray ||
                    !foundschema.schema.$isSingleNested;
                  if (_ret.$isUnderneathDocArray) ***REMOVED***
                    ret.$isUnderneathDocArray = true;
                  ***REMOVED***
                  ret.push(_ret);
                ***REMOVED***
              ***REMOVED***
              return ret;
            ***REMOVED*** else ***REMOVED***
              ret = search(parts.slice(p), foundschema.schema);

              if (ret) ***REMOVED***
                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
                  !foundschema.schema.$isSingleNested;
              ***REMOVED***

              return ret;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***

        return foundschema;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  // look for arrays
  const parts = path.split('.');
  for (let i = 0; i < parts.length; ++i) ***REMOVED***
    if (parts[i] === '$') ***REMOVED***
      // Re: gh-5628, because `schema.path()` doesn't take $ into account.
      parts[i] = '0';
    ***REMOVED***
  ***REMOVED***
  return search(parts, schema);
***REMOVED***;
