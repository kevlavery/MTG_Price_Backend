'use strict';

var modifiedPaths = require('./common').modifiedPaths;

/**
 * Applies defaults to update and findOneAndUpdate operations.
 *
 * @param ***REMOVED***Object***REMOVED*** filter
 * @param ***REMOVED***Schema***REMOVED*** schema
 * @param ***REMOVED***Object***REMOVED*** castedDoc
 * @param ***REMOVED***Object***REMOVED*** options
 * @method setDefaultsOnInsert
 * @api private
 */

module.exports = function(filter, schema, castedDoc, options) ***REMOVED***
  var keys = Object.keys(castedDoc || ***REMOVED******REMOVED***);
  var updatedKeys = ***REMOVED******REMOVED***;
  var updatedValues = ***REMOVED******REMOVED***;
  var numKeys = keys.length;
  var hasDollarUpdate = false;
  var modified = ***REMOVED******REMOVED***;

  if (options && options.upsert) ***REMOVED***
    for (var i = 0; i < numKeys; ++i) ***REMOVED***
      if (keys[i].charAt(0) === '$') ***REMOVED***
        modifiedPaths(castedDoc[keys[i]], '', modified);
        hasDollarUpdate = true;
      ***REMOVED***
    ***REMOVED***

    if (!hasDollarUpdate) ***REMOVED***
      modifiedPaths(castedDoc, '', modified);
    ***REMOVED***

    var paths = Object.keys(filter);
    var numPaths = paths.length;
    for (i = 0; i < numPaths; ++i) ***REMOVED***
      var path = paths[i];
      var condition = filter[path];
      if (condition && typeof condition === 'object') ***REMOVED***
        var conditionKeys = Object.keys(condition);
        var numConditionKeys = conditionKeys.length;
        var hasDollarKey = false;
        for (var j = 0; j < numConditionKeys; ++j) ***REMOVED***
          if (conditionKeys[j].charAt(0) === '$') ***REMOVED***
            hasDollarKey = true;
            break;
          ***REMOVED***
        ***REMOVED***
        if (hasDollarKey) ***REMOVED***
          continue;
        ***REMOVED***
      ***REMOVED***
      updatedKeys[path] = true;
      modified[path] = true;
    ***REMOVED***

    if (options && options.overwrite && !hasDollarUpdate) ***REMOVED***
      // Defaults will be set later, since we're overwriting we'll cast
      // the whole update to a document
      return castedDoc;
    ***REMOVED***

    if (options.setDefaultsOnInsert) ***REMOVED***
      schema.eachPath(function(path, schemaType) ***REMOVED***
        if (schemaType.$isSingleNested) ***REMOVED***
          // Only handle nested schemas 1-level deep to avoid infinite
          // recursion re: https://github.com/mongodb-js/mongoose-autopopulate/issues/11
          schemaType.schema.eachPath(function(_path, _schemaType) ***REMOVED***
            if (_path === '_id' && _schemaType.auto) ***REMOVED***
              // Ignore _id if auto id so we don't create subdocs
              return;
            ***REMOVED***

            var def = _schemaType.getDefault(null, true);
            if (!isModified(modified, path + '.' + _path) &&
                typeof def !== 'undefined') ***REMOVED***
              castedDoc = castedDoc || ***REMOVED******REMOVED***;
              castedDoc.$setOnInsert = castedDoc.$setOnInsert || ***REMOVED******REMOVED***;
              castedDoc.$setOnInsert[path + '.' + _path] = def;
              updatedValues[path + '.' + _path] = def;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED*** else ***REMOVED***
          var def = schemaType.getDefault(null, true);
          if (!isModified(modified, path) && typeof def !== 'undefined') ***REMOVED***
            castedDoc = castedDoc || ***REMOVED******REMOVED***;
            castedDoc.$setOnInsert = castedDoc.$setOnInsert || ***REMOVED******REMOVED***;
            castedDoc.$setOnInsert[path] = def;
            updatedValues[path] = def;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***

  return castedDoc;
***REMOVED***;

function isModified(modified, path) ***REMOVED***
  if (modified[path]) ***REMOVED***
    return true;
  ***REMOVED***
  var sp = path.split('.');
  var cur = sp[0];
  for (var i = 0; i < sp.length; ++i) ***REMOVED***
    if (modified[cur]) ***REMOVED***
      return true;
    ***REMOVED***
    cur += '.' + sp[i];
  ***REMOVED***
  return false;
***REMOVED***
