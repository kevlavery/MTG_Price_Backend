/*!
 * Module requirements.
 */

var SchemaType = require('../schematype');
var CastError = SchemaType.CastError;
var handleBitwiseOperator = require('./operators/bitwise');
var MongooseError = require('../error');
var utils = require('../utils');
var Document;

/**
 * Number SchemaType constructor.
 *
 * @param ***REMOVED***String***REMOVED*** key
 * @param ***REMOVED***Object***REMOVED*** options
 * @inherits SchemaType
 * @api public
 */

function SchemaNumber(key, options) ***REMOVED***
  SchemaType.call(this, key, options, 'Number');
***REMOVED***

/**
 * This schema type's name, to defend against minifiers that mangle
 * function names.
 *
 * @api public
 */
SchemaNumber.schemaName = 'Number';

/*!
 * Inherits from SchemaType.
 */
SchemaNumber.prototype = Object.create(SchemaType.prototype);
SchemaNumber.prototype.constructor = SchemaNumber;

/**
 * Check if the given value satisfies a required validator.
 *
 * @param ***REMOVED***Any***REMOVED*** value
 * @param ***REMOVED***Document***REMOVED*** doc
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

SchemaNumber.prototype.checkRequired = function checkRequired(value, doc) ***REMOVED***
  if (SchemaType._isRef(this, value, doc, true)) ***REMOVED***
    return !!value;
  ***REMOVED***
  return typeof value === 'number' || value instanceof Number;
***REMOVED***;

/**
 * Sets a minimum number validator.
 *
 * ####Example:
 *
 *     var s = new Schema(***REMOVED*** n: ***REMOVED*** type: Number, min: 10 ***REMOVED***)
 *     var M = db.model('M', s)
 *     var m = new M(***REMOVED*** n: 9 ***REMOVED***)
 *     m.save(function (err) ***REMOVED***
 *       console.error(err) // validator error
 *       m.n = 10;
 *       m.save() // success
 *     ***REMOVED***)
 *
 *     // custom error messages
 *     // We can also use the special ***REMOVED***MIN***REMOVED*** token which will be replaced with the invalid value
 *     var min = [10, 'The value of path `***REMOVED***PATH***REMOVED***` (***REMOVED***VALUE***REMOVED***) is beneath the limit (***REMOVED***MIN***REMOVED***).'];
 *     var schema = new Schema(***REMOVED*** n: ***REMOVED*** type: Number, min: min ***REMOVED***)
 *     var M = mongoose.model('Measurement', schema);
 *     var s= new M(***REMOVED*** n: 4 ***REMOVED***);
 *     s.validate(function (err) ***REMOVED***
 *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).
 *     ***REMOVED***)
 *
 * @param ***REMOVED***Number***REMOVED*** value minimum number
 * @param ***REMOVED***String***REMOVED*** [message] optional custom error message
 * @return ***REMOVED***SchemaType***REMOVED*** this
 * @see Customized Error Messages #error_messages_MongooseError-messages
 * @api public
 */

SchemaNumber.prototype.min = function(value, message) ***REMOVED***
  if (this.minValidator) ***REMOVED***
    this.validators = this.validators.filter(function(v) ***REMOVED***
      return v.validator !== this.minValidator;
    ***REMOVED***, this);
  ***REMOVED***

  if (value !== null && value !== undefined) ***REMOVED***
    var msg = message || MongooseError.messages.Number.min;
    msg = msg.replace(/***REMOVED***MIN***REMOVED***/, value);
    this.validators.push(***REMOVED***
      validator: this.minValidator = function(v) ***REMOVED***
        return v == null || v >= value;
      ***REMOVED***,
      message: msg,
      type: 'min',
      min: value
    ***REMOVED***);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Sets a maximum number validator.
 *
 * ####Example:
 *
 *     var s = new Schema(***REMOVED*** n: ***REMOVED*** type: Number, max: 10 ***REMOVED***)
 *     var M = db.model('M', s)
 *     var m = new M(***REMOVED*** n: 11 ***REMOVED***)
 *     m.save(function (err) ***REMOVED***
 *       console.error(err) // validator error
 *       m.n = 10;
 *       m.save() // success
 *     ***REMOVED***)
 *
 *     // custom error messages
 *     // We can also use the special ***REMOVED***MAX***REMOVED*** token which will be replaced with the invalid value
 *     var max = [10, 'The value of path `***REMOVED***PATH***REMOVED***` (***REMOVED***VALUE***REMOVED***) exceeds the limit (***REMOVED***MAX***REMOVED***).'];
 *     var schema = new Schema(***REMOVED*** n: ***REMOVED*** type: Number, max: max ***REMOVED***)
 *     var M = mongoose.model('Measurement', schema);
 *     var s= new M(***REMOVED*** n: 4 ***REMOVED***);
 *     s.validate(function (err) ***REMOVED***
 *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).
 *     ***REMOVED***)
 *
 * @param ***REMOVED***Number***REMOVED*** maximum number
 * @param ***REMOVED***String***REMOVED*** [message] optional custom error message
 * @return ***REMOVED***SchemaType***REMOVED*** this
 * @see Customized Error Messages #error_messages_MongooseError-messages
 * @api public
 */

SchemaNumber.prototype.max = function(value, message) ***REMOVED***
  if (this.maxValidator) ***REMOVED***
    this.validators = this.validators.filter(function(v) ***REMOVED***
      return v.validator !== this.maxValidator;
    ***REMOVED***, this);
  ***REMOVED***

  if (value !== null && value !== undefined) ***REMOVED***
    var msg = message || MongooseError.messages.Number.max;
    msg = msg.replace(/***REMOVED***MAX***REMOVED***/, value);
    this.validators.push(***REMOVED***
      validator: this.maxValidator = function(v) ***REMOVED***
        return v == null || v <= value;
      ***REMOVED***,
      message: msg,
      type: 'max',
      max: value
    ***REMOVED***);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Casts to number
 *
 * @param ***REMOVED***Object***REMOVED*** value value to cast
 * @param ***REMOVED***Document***REMOVED*** doc document that triggers the casting
 * @param ***REMOVED***Boolean***REMOVED*** init
 * @api private
 */

SchemaNumber.prototype.cast = function(value, doc, init) ***REMOVED***
  if (SchemaType._isRef(this, value, doc, init)) ***REMOVED***
    // wait! we may need to cast this to a document

    if (value === null || value === undefined) ***REMOVED***
      return value;
    ***REMOVED***

    // lazy load
    Document || (Document = require('./../document'));

    if (value instanceof Document) ***REMOVED***
      value.$__.wasPopulated = true;
      return value;
    ***REMOVED***

    // setting a populated path
    if (typeof value === 'number') ***REMOVED***
      return value;
    ***REMOVED*** else if (Buffer.isBuffer(value) || !utils.isObject(value)) ***REMOVED***
      throw new CastError('number', value, this.path);
    ***REMOVED***

    // Handle the case where user directly sets a populated
    // path to a plain object; cast to the Model used in
    // the population query.
    var path = doc.$__fullPath(this.path);
    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;
    var pop = owner.populated(path, true);
    var ret = new pop.options.model(value);
    ret.$__.wasPopulated = true;
    return ret;
  ***REMOVED***

  var val = value && typeof value._id !== 'undefined' ?
    value._id : // documents
    value;

  if (!isNaN(val)) ***REMOVED***
    if (val === null) ***REMOVED***
      return val;
    ***REMOVED***
    if (val === '') ***REMOVED***
      return null;
    ***REMOVED***
    if (typeof val === 'string' || typeof val === 'boolean') ***REMOVED***
      val = Number(val);
    ***REMOVED***
    if (val instanceof Number) ***REMOVED***
      return val;
    ***REMOVED***
    if (typeof val === 'number') ***REMOVED***
      return val;
    ***REMOVED***
    if (!Array.isArray(val) && typeof val.valueOf === 'function') ***REMOVED***
      return Number(val.valueOf());
    ***REMOVED***
    if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) ***REMOVED***
      return new Number(val);
    ***REMOVED***
  ***REMOVED***

  throw new CastError('number', value, this.path);
***REMOVED***;

/*!
 * ignore
 */

function handleSingle(val) ***REMOVED***
  return this.cast(val);
***REMOVED***

function handleArray(val) ***REMOVED***
  var _this = this;
  if (!Array.isArray(val)) ***REMOVED***
    return [this.cast(val)];
  ***REMOVED***
  return val.map(function(m) ***REMOVED***
    return _this.cast(m);
  ***REMOVED***);
***REMOVED***

SchemaNumber.prototype.$conditionalHandlers =
    utils.options(SchemaType.prototype.$conditionalHandlers, ***REMOVED***
      $bitsAllClear: handleBitwiseOperator,
      $bitsAnyClear: handleBitwiseOperator,
      $bitsAllSet: handleBitwiseOperator,
      $bitsAnySet: handleBitwiseOperator,
      $gt: handleSingle,
      $gte: handleSingle,
      $lt: handleSingle,
      $lte: handleSingle,
      $mod: handleArray
    ***REMOVED***);

/**
 * Casts contents for queries.
 *
 * @param ***REMOVED***String***REMOVED*** $conditional
 * @param ***REMOVED***any***REMOVED*** [value]
 * @api private
 */

SchemaNumber.prototype.castForQuery = function($conditional, val) ***REMOVED***
  var handler;
  if (arguments.length === 2) ***REMOVED***
    handler = this.$conditionalHandlers[$conditional];
    if (!handler) ***REMOVED***
      throw new Error('Can\'t use ' + $conditional + ' with Number.');
    ***REMOVED***
    return handler.call(this, val);
  ***REMOVED***
  val = this._castForQuery($conditional);
  return val;
***REMOVED***;

/*!
 * Module exports.
 */

module.exports = SchemaNumber;
