/*!
 * Module dependencies
 */

var AggregationCursor = require('./cursor/AggregationCursor');
var Query = require('./query');
var util = require('util');
var utils = require('./utils');
var read = Query.prototype.read;

/**
 * Aggregate constructor used for building aggregation pipelines. Do not
 * instantiate this class directly, use [Model.aggregate()](/docs/api.html#aggregate_aggregate) instead.
 *
 * ####Example:
 *
 *     const aggregate = Model.aggregate([
 *       ***REMOVED*** $project: ***REMOVED*** a: 1, b: 1 ***REMOVED*** ***REMOVED***,
 *       ***REMOVED*** $skip: 5 ***REMOVED***
 *     ]);
 *
 *     Model.
 *       aggregate([***REMOVED*** $match: ***REMOVED*** age: ***REMOVED*** $gte: 21 ***REMOVED******REMOVED******REMOVED***]).
 *       unwind('tags').
 *       exec(callback);
 *
 * ####Note:
 *
 * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).
 * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database
 *
 * ```javascript
 *   new Aggregate([***REMOVED*** $match: ***REMOVED*** _id: '00000000000000000000000a' ***REMOVED*** ***REMOVED***]);
 *   // Do this instead to cast to an ObjectId
 *   new Aggregate([***REMOVED*** $match: ***REMOVED*** _id: mongoose.Types.ObjectId('00000000000000000000000a') ***REMOVED*** ***REMOVED***]);
 * ```
 *
 * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/
 * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate
 * @param ***REMOVED***Array***REMOVED*** [pipeline] aggregation pipeline as an array of objects
 * @api public
 */

function Aggregate(pipeline) ***REMOVED***
  this._pipeline = [];
  this._model = undefined;
  this.options = ***REMOVED******REMOVED***;

  if (arguments.length === 1 && util.isArray(pipeline)) ***REMOVED***
    this.append.apply(this, pipeline);
  ***REMOVED***
***REMOVED***

/**
 * Binds this aggregate to a model.
 *
 * @param ***REMOVED***Model***REMOVED*** model the model to which the aggregate is to be bound
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.model = function(model) ***REMOVED***
  this._model = model;
  if (model.schema != null) ***REMOVED***
    if (this.options.readPreference == null &&
        model.schema.options.read != null) ***REMOVED***
      this.options.readPreference = model.schema.options.read;
    ***REMOVED***
    if (this.options.collation == null &&
        model.schema.options.collation != null) ***REMOVED***
      this.options.collation = model.schema.options.collation;
    ***REMOVED***
  ***REMOVED***
  return this;
***REMOVED***;

/**
 * Appends new operators to this aggregate pipeline
 *
 * ####Examples:
 *
 *     aggregate.append(***REMOVED*** $project: ***REMOVED*** field: 1 ***REMOVED******REMOVED***, ***REMOVED*** $limit: 2 ***REMOVED***);
 *
 *     // or pass an array
 *     var pipeline = [***REMOVED*** $match: ***REMOVED*** daw: 'Logic Audio X' ***REMOVED******REMOVED*** ];
 *     aggregate.append(pipeline);
 *
 * @param ***REMOVED***Object***REMOVED*** ops operator(s) to append
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.append = function() ***REMOVED***
  var args = (arguments.length === 1 && util.isArray(arguments[0]))
    ? arguments[0]
    : utils.args(arguments);

  if (!args.every(isOperator)) ***REMOVED***
    throw new Error('Arguments must be aggregate pipeline operators');
  ***REMOVED***

  this._pipeline = this._pipeline.concat(args);

  return this;
***REMOVED***;

/**
 * Appends a new $addFields operator to this aggregate pipeline.
 * Requires MongoDB v3.4+ to work
 *
 * ####Examples:
  *
 *     // adding new fields based on existing fields
 *     aggregate.addFields(***REMOVED***
 *         newField: '$b.nested'
 *       , plusTen: ***REMOVED*** $add: ['$val', 10]***REMOVED***
 *       , sub: ***REMOVED***
 *            name: '$a'
 *         ***REMOVED***
 *     ***REMOVED***)
 *
 *     // etc
 *     aggregate.addFields(***REMOVED*** salary_k: ***REMOVED*** $divide: [ "$salary", 1000 ] ***REMOVED*** ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** arg field specification
 * @see $addFields https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */
Aggregate.prototype.addFields = function(arg) ***REMOVED***
  var fields = ***REMOVED******REMOVED***;
  if (typeof arg === 'object' && !util.isArray(arg)) ***REMOVED***
    Object.keys(arg).forEach(function(field) ***REMOVED***
      fields[field] = arg[field];
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    throw new Error('Invalid addFields() argument. Must be an object');
  ***REMOVED***
  return this.append(***REMOVED***$addFields: fields***REMOVED***);
***REMOVED***;

/**
 * Appends a new $project operator to this aggregate pipeline.
 *
 * Mongoose query [selection syntax](#query_Query-select) is also supported.
 *
 * ####Examples:
 *
 *     // include a, include b, exclude _id
 *     aggregate.project("a b -_id");
 *
 *     // or you may use object notation, useful when
 *     // you have keys already prefixed with a "-"
 *     aggregate.project(***REMOVED***a: 1, b: 1, _id: 0***REMOVED***);
 *
 *     // reshaping documents
 *     aggregate.project(***REMOVED***
 *         newField: '$b.nested'
 *       , plusTen: ***REMOVED*** $add: ['$val', 10]***REMOVED***
 *       , sub: ***REMOVED***
 *            name: '$a'
 *         ***REMOVED***
 *     ***REMOVED***)
 *
 *     // etc
 *     aggregate.project(***REMOVED*** salary_k: ***REMOVED*** $divide: [ "$salary", 1000 ] ***REMOVED*** ***REMOVED***);
 *
 * @param ***REMOVED***Object|String***REMOVED*** arg field specification
 * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.project = function(arg) ***REMOVED***
  var fields = ***REMOVED******REMOVED***;

  if (typeof arg === 'object' && !util.isArray(arg)) ***REMOVED***
    Object.keys(arg).forEach(function(field) ***REMOVED***
      fields[field] = arg[field];
    ***REMOVED***);
  ***REMOVED*** else if (arguments.length === 1 && typeof arg === 'string') ***REMOVED***
    arg.split(/\s+/).forEach(function(field) ***REMOVED***
      if (!field) ***REMOVED***
        return;
      ***REMOVED***
      var include = field[0] === '-' ? 0 : 1;
      if (include === 0) ***REMOVED***
        field = field.substring(1);
      ***REMOVED***
      fields[field] = include;
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    throw new Error('Invalid project() argument. Must be string or object');
  ***REMOVED***

  return this.append(***REMOVED***$project: fields***REMOVED***);
***REMOVED***;

/**
 * Appends a new custom $group operator to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.group(***REMOVED*** _id: "$department" ***REMOVED***);
 *
 * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/
 * @method group
 * @memberOf Aggregate
 * @instance
 * @param ***REMOVED***Object***REMOVED*** arg $group operator contents
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

/**
 * Appends a new custom $match operator to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.match(***REMOVED*** department: ***REMOVED*** $in: [ "sales", "engineering" ] ***REMOVED*** ***REMOVED***);
 *
 * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/
 * @method match
 * @memberOf Aggregate
 * @instance
 * @param ***REMOVED***Object***REMOVED*** arg $match operator contents
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

/**
 * Appends a new $skip operator to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.skip(10);
 *
 * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/
 * @method skip
 * @memberOf Aggregate
 * @instance
 * @param ***REMOVED***Number***REMOVED*** num number of records to skip before next stage
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

/**
 * Appends a new $limit operator to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.limit(10);
 *
 * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/
 * @method limit
 * @memberOf Aggregate
 * @instance
 * @param ***REMOVED***Number***REMOVED*** num maximum number of records to pass to the next stage
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

/**
 * Appends a new $geoNear operator to this aggregate pipeline.
 *
 * ####NOTE:
 *
 * **MUST** be used as the first operator in the pipeline.
 *
 * ####Examples:
 *
 *     aggregate.near(***REMOVED***
 *       near: [40.724, -73.997],
 *       distanceField: "dist.calculated", // required
 *       maxDistance: 0.008,
 *       query: ***REMOVED*** type: "public" ***REMOVED***,
 *       includeLocs: "dist.location",
 *       uniqueDocs: true,
 *       num: 5
 *     ***REMOVED***);
 *
 * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/
 * @method near
 * @memberOf Aggregate
 * @instance
 * @param ***REMOVED***Object***REMOVED*** arg
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.near = function(arg) ***REMOVED***
  var op = ***REMOVED******REMOVED***;
  op.$geoNear = arg;
  return this.append(op);
***REMOVED***;

/*!
 * define methods
 */

'group match skip limit out'.split(' ').forEach(function($operator) ***REMOVED***
  Aggregate.prototype[$operator] = function(arg) ***REMOVED***
    var op = ***REMOVED******REMOVED***;
    op['$' + $operator] = arg;
    return this.append(op);
  ***REMOVED***;
***REMOVED***);

/**
 * Appends new custom $unwind operator(s) to this aggregate pipeline.
 *
 * Note that the `$unwind` operator requires the path name to start with '$'.
 * Mongoose will prepend '$' if the specified field doesn't start '$'.
 *
 * ####Examples:
 *
 *     aggregate.unwind("tags");
 *     aggregate.unwind("a", "b", "c");
 *
 * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/
 * @param ***REMOVED***String***REMOVED*** fields the field(s) to unwind
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.unwind = function() ***REMOVED***
  var args = utils.args(arguments);

  var res = [];
  for (var i = 0; i < args.length; ++i) ***REMOVED***
    var arg = args[i];
    if (arg && typeof arg === 'object') ***REMOVED***
      res.push(***REMOVED*** $unwind: arg ***REMOVED***);
    ***REMOVED*** else if (typeof arg === 'string') ***REMOVED***
      res.push(***REMOVED***
        $unwind: (arg && arg.charAt(0) === '$') ? arg : '$' + arg
      ***REMOVED***);
    ***REMOVED*** else ***REMOVED***
      throw new Error('Invalid arg "' + arg + '" to unwind(), ' +
        'must be string or object');
    ***REMOVED***
  ***REMOVED***

  return this.append.apply(this, res);
***REMOVED***;

/**
 * Appends a new $replaceRoot operator to this aggregate pipeline.
 *
 * Note that the `$replaceRoot` operator requires field strings to start with '$'.
 * If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'.
 * If you are passing in an object the strings in your expression will not be altered.
 *
 * ####Examples:
 *
 *     aggregate.replaceRoot("user");
 *
 *     aggregate.replaceRoot(***REMOVED*** x: ***REMOVED*** $concat: ['$this', '$that'] ***REMOVED*** ***REMOVED***);
 *
 * @see $replaceRoot https://docs.mongodb.org/manual/reference/operator/aggregation/replaceRoot
 * @param ***REMOVED***String|Object***REMOVED*** the field or document which will become the new root document
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.replaceRoot = function(newRoot) ***REMOVED***
  var ret;

  if (typeof newRoot === 'string') ***REMOVED***
    ret = newRoot.startsWith('$') ? newRoot : '$' + newRoot;
  ***REMOVED*** else ***REMOVED***
    ret = newRoot;
  ***REMOVED***

  return this.append(***REMOVED***
    $replaceRoot: ***REMOVED***
      newRoot: ret
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

/**
 * Appends a new $count operator to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.count("userCount");
 *
 * @see $count https://docs.mongodb.org/manual/reference/operator/aggregation/count
 * @param ***REMOVED***String***REMOVED*** the name of the count field
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.count = function(countName) ***REMOVED***
  return this.append(***REMOVED*** $count: countName ***REMOVED***);
***REMOVED***;

/**
 * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name
 * or a pipeline object.
 *
 * Note that the `$sortByCount` operator requires the new root to start with '$'.
 * Mongoose will prepend '$' if the specified field name doesn't start with '$'.
 *
 * ####Examples:
 *
 *     aggregate.sortByCount('users');
 *     aggregate.sortByCount(***REMOVED*** $mergeObjects: [ "$employee", "$business" ] ***REMOVED***)
 *
 * @see $sortByCount https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/
 * @param ***REMOVED***Object|String***REMOVED*** arg
 * @return ***REMOVED***Aggregate***REMOVED*** this
 * @api public
 */

Aggregate.prototype.sortByCount = function(arg) ***REMOVED***
  if (arg && typeof arg === 'object') ***REMOVED***
    return this.append(***REMOVED*** $sortByCount: arg ***REMOVED***);
  ***REMOVED*** else if (typeof arg === 'string') ***REMOVED***
    return this.append(***REMOVED***
      $sortByCount: (arg && arg.charAt(0) === '$') ? arg : '$' + arg
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    throw new TypeError('Invalid arg "' + arg + '" to sortByCount(), ' +
      'must be string or object');
  ***REMOVED***
***REMOVED***;

/**
 * Appends new custom $lookup operator(s) to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.lookup(***REMOVED*** from: 'users', localField: 'userId', foreignField: '_id', as: 'users' ***REMOVED***);
 *
 * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup
 * @param ***REMOVED***Object***REMOVED*** options to $lookup as described in the above link
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.lookup = function(options) ***REMOVED***
  return this.append(***REMOVED***$lookup: options***REMOVED***);
***REMOVED***;

/**
 * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.
 *
 * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `***REMOVED*** allowDiskUse: true ***REMOVED***` is specified.
 *
 * #### Examples:
 *      // Suppose we have a collection of courses, where a document might look like `***REMOVED*** _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'***REMOVED***` and `***REMOVED*** _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' ***REMOVED***`
 *      aggregate.graphLookup(***REMOVED*** from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 ***REMOVED***) // this will recursively search the 'courses' collection up to 3 prerequisites
 *
 * @see $graphLookup https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup
 * @param ***REMOVED***Object***REMOVED*** options to $graphLookup as described in the above link
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.graphLookup = function(options) ***REMOVED***
  var cloneOptions = ***REMOVED******REMOVED***;
  if (options) ***REMOVED***
    if (!utils.isObject(options)) ***REMOVED***
      throw new TypeError('Invalid graphLookup() argument. Must be an object.');
    ***REMOVED***

    utils.mergeClone(cloneOptions, options);
    var startWith = cloneOptions.startWith;

    if (startWith && typeof startWith === 'string') ***REMOVED***
      cloneOptions.startWith = cloneOptions.startWith.charAt(0) === '$' ?
        cloneOptions.startWith :
        '$' + cloneOptions.startWith;
    ***REMOVED***

  ***REMOVED***
  return this.append(***REMOVED*** $graphLookup: cloneOptions ***REMOVED***);
***REMOVED***;

/**
 * Appends new custom $sample operator(s) to this aggregate pipeline.
 *
 * ####Examples:
 *
 *     aggregate.sample(3); // Add a pipeline that picks 3 random documents
 *
 * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample
 * @param ***REMOVED***Number***REMOVED*** size number of random documents to pick
 * @return ***REMOVED***Aggregate***REMOVED***
 * @api public
 */

Aggregate.prototype.sample = function(size) ***REMOVED***
  return this.append(***REMOVED***$sample: ***REMOVED***size: size***REMOVED******REMOVED***);
***REMOVED***;

/**
 * Appends a new $sort operator to this aggregate pipeline.
 *
 * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.
 *
 * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.
 *
 * ####Examples:
 *
 *     // these are equivalent
 *     aggregate.sort(***REMOVED*** field: 'asc', test: -1 ***REMOVED***);
 *     aggregate.sort('field -test');
 *
 * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/
 * @param ***REMOVED***Object|String***REMOVED*** arg
 * @return ***REMOVED***Aggregate***REMOVED*** this
 * @api public
 */

Aggregate.prototype.sort = function(arg) ***REMOVED***
  // TODO refactor to reuse the query builder logic

  var sort = ***REMOVED******REMOVED***;

  if (arg.constructor.name === 'Object') ***REMOVED***
    var desc = ['desc', 'descending', -1];
    Object.keys(arg).forEach(function(field) ***REMOVED***
      // If sorting by text score, skip coercing into 1/-1
      if (arg[field] instanceof Object && arg[field].$meta) ***REMOVED***
        sort[field] = arg[field];
        return;
      ***REMOVED***
      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;
    ***REMOVED***);
  ***REMOVED*** else if (arguments.length === 1 && typeof arg === 'string') ***REMOVED***
    arg.split(/\s+/).forEach(function(field) ***REMOVED***
      if (!field) ***REMOVED***
        return;
      ***REMOVED***
      var ascend = field[0] === '-' ? -1 : 1;
      if (ascend === -1) ***REMOVED***
        field = field.substring(1);
      ***REMOVED***
      sort[field] = ascend;
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    throw new TypeError('Invalid sort() argument. Must be a string or object.');
  ***REMOVED***

  return this.append(***REMOVED***$sort: sort***REMOVED***);
***REMOVED***;

/**
 * Sets the readPreference option for the aggregation query.
 *
 * ####Example:
 *
 *     Model.aggregate(..).read('primaryPreferred').exec(callback)
 *
 * @param ***REMOVED***String***REMOVED*** pref one of the listed preference options or their aliases
 * @param ***REMOVED***Array***REMOVED*** [tags] optional tags for this query
 * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference
 * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences
 */

Aggregate.prototype.read = function(pref, tags) ***REMOVED***
  if (!this.options) ***REMOVED***
    this.options = ***REMOVED******REMOVED***;
  ***REMOVED***
  read.call(this, pref, tags);
  return this;
***REMOVED***;

/**
 * Execute the aggregation with explain
 *
 * ####Example:
 *
 *     Model.aggregate(..).explain(callback)
 *
 * @param ***REMOVED***Function***REMOVED*** callback
 * @return ***REMOVED***Promise***REMOVED***
 */

Aggregate.prototype.explain = function(callback) ***REMOVED***
  return utils.promiseOrCallback(callback, cb => ***REMOVED***
    if (!this._pipeline.length) ***REMOVED***
      var err = new Error('Aggregate has empty pipeline');
      return cb(err);
    ***REMOVED***

    prepareDiscriminatorPipeline(this);

    this._model.collection.
      aggregate(this._pipeline, this.options || ***REMOVED******REMOVED***).
      explain(function(error, result) ***REMOVED***
        if (error) ***REMOVED***
          return cb(error);
        ***REMOVED***
        cb(null, result);
      ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)
 *
 * ####Example:
 *
 *     Model.aggregate(..).allowDiskUse(true).exec(callback)
 *
 * @param ***REMOVED***Boolean***REMOVED*** value Should tell server it can use hard drive to store data during aggregation.
 * @param ***REMOVED***Array***REMOVED*** [tags] optional tags for this query
 * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/
 */

Aggregate.prototype.allowDiskUse = function(value) ***REMOVED***
  this.options.allowDiskUse = value;
  return this;
***REMOVED***;

/**
 * Sets the hint option for the aggregation query (ignored for < 3.6.0)
 *
 * ####Example:
 *
 *     Model.aggregate(..).hint(***REMOVED*** qty: 1, category: 1 ***REMOVED*** ***REMOVED***).exec(callback)
 *
 * @param ***REMOVED***Object|String***REMOVED*** value a hint object or the index name
 * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/
 */

Aggregate.prototype.hint = function(value) ***REMOVED***
  this.options.hint = value;
  return this;
***REMOVED***;

/**
 * Lets you set arbitrary options, for middleware or plugins.
 *
 * ####Example:
 *
 *     var agg = Model.aggregate(..).option(***REMOVED*** allowDiskUse: true ***REMOVED***); // Set the `allowDiskUse` option
 *     agg.options; // `***REMOVED*** allowDiskUse: true ***REMOVED***`
 *
 * @param ***REMOVED***Object***REMOVED*** options keys to merge into current options
 * @param [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)
 * @param [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation
 * @param [options.collation] object see [`Aggregate.prototype.collation()`](./docs/api.html#aggregate_Aggregate-collation)
 * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/
 * @return ***REMOVED***Aggregate***REMOVED*** this
 * @api public
 */

Aggregate.prototype.option = function(value) ***REMOVED***
  for (var key in value) ***REMOVED***
    this.options[key] = value[key];
  ***REMOVED***
  return this;
***REMOVED***;

/**
 * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).
 * Note the different syntax below: .exec() returns a cursor object, and no callback
 * is necessary.
 *
 * ####Example:
 *
 *     var cursor = Model.aggregate(..).cursor(***REMOVED*** batchSize: 1000 ***REMOVED***).exec();
 *     cursor.each(function(error, doc) ***REMOVED***
 *       // use doc
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @param ***REMOVED***Number***REMOVED*** options.batchSize set the cursor batch size
 * @param ***REMOVED***Boolean***REMOVED*** [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)
 * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html
 */

Aggregate.prototype.cursor = function(options) ***REMOVED***
  if (!this.options) ***REMOVED***
    this.options = ***REMOVED******REMOVED***;
  ***REMOVED***
  this.options.cursor = options || ***REMOVED******REMOVED***;
  return this;
***REMOVED***;

/**
 * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag)
 *
 * ####Example:
 *
 *     Model.aggregate(..).addCursorFlag('noCursorTimeout', true).exec();
 *
 * @param ***REMOVED***String***REMOVED*** flag
 * @param ***REMOVED***Boolean***REMOVED*** value
 * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag
 */

Aggregate.prototype.addCursorFlag = function(flag, value) ***REMOVED***
  if (!this.options) ***REMOVED***
    this.options = ***REMOVED******REMOVED***;
  ***REMOVED***
  this.options[flag] = value;
  return this;
***REMOVED***;

/**
 * Adds a collation
 *
 * ####Example:
 *
 *     Model.aggregate(..).collation(***REMOVED*** locale: 'en_US', strength: 1 ***REMOVED***).exec();
 *
 * @param ***REMOVED***Object***REMOVED*** collation options
 * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#aggregate
 */

Aggregate.prototype.collation = function(collation) ***REMOVED***
  if (!this.options) ***REMOVED***
    this.options = ***REMOVED******REMOVED***;
  ***REMOVED***
  this.options.collation = collation;
  return this;
***REMOVED***;

/**
 * Combines multiple aggregation pipelines.
 *
 * ####Example:
 *     Model.aggregate(...)
 *      .facet(***REMOVED***
 *        books: [***REMOVED*** groupBy: '$author' ***REMOVED***],
 *        price: [***REMOVED*** $bucketAuto: ***REMOVED*** groupBy: '$price', buckets: 2 ***REMOVED*** ***REMOVED***]
 *      ***REMOVED***)
 *      .exec();
 *
 *     // Output: ***REMOVED*** books: [...], price: [***REMOVED***...***REMOVED***, ***REMOVED***...***REMOVED***] ***REMOVED***
 *
 * @param ***REMOVED***Object***REMOVED*** facet options
 * @return ***REMOVED***Aggregate***REMOVED*** this
 * @see $facet https://docs.mongodb.com/v3.4/reference/operator/aggregation/facet/
 * @api public
 */

Aggregate.prototype.facet = function(options) ***REMOVED***
  return this.append(***REMOVED***$facet: options***REMOVED***);
***REMOVED***;

/**
 * Returns the current pipeline
 *
 * ####Example:
 *
 *     MyModel.aggregate().match(***REMOVED*** test: 1 ***REMOVED***).pipeline(); // [***REMOVED*** $match: ***REMOVED*** test: 1 ***REMOVED*** ***REMOVED***]
 *
 * @return ***REMOVED***Array***REMOVED***
 * @api public
 */


Aggregate.prototype.pipeline = function() ***REMOVED***
  return this._pipeline;
***REMOVED***;

/**
 * Executes the aggregate pipeline on the currently bound Model.
 *
 * ####Example:
 *
 *     aggregate.exec(callback);
 *
 *     // Because a promise is returned, the `callback` is optional.
 *     var promise = aggregate.exec();
 *     promise.then(..);
 *
 * @see Promise #promise_Promise
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Aggregate.prototype.exec = function(callback) ***REMOVED***
  if (!this._model) ***REMOVED***
    throw new Error('Aggregate not bound to any Model');
  ***REMOVED***
  var model = this._model;
  var options = utils.clone(this.options || ***REMOVED******REMOVED***);
  var pipeline = this._pipeline;
  var collection = this._model.collection;

  if (options && options.cursor) ***REMOVED***
    return new AggregationCursor(this);
  ***REMOVED***

  return utils.promiseOrCallback(callback, cb => ***REMOVED***
    if (!pipeline.length) ***REMOVED***
      var err = new Error('Aggregate has empty pipeline');
      return cb(err);
    ***REMOVED***

    prepareDiscriminatorPipeline(this);

    model.hooks.execPre('aggregate', this, error => ***REMOVED***
      if (error) ***REMOVED***
        var _opts = ***REMOVED*** error: error ***REMOVED***;
        return model.hooks.execPost('aggregate', this, [null], _opts, error => ***REMOVED***
          cb(error);
        ***REMOVED***);
      ***REMOVED***

      collection.aggregate(pipeline, options, (error, cursor) => ***REMOVED***
        if (error) ***REMOVED***
          var _opts = ***REMOVED*** error: error ***REMOVED***;
          return model.hooks.execPost('aggregate', this, [null], _opts, error => ***REMOVED***
            if (error) ***REMOVED***
              return cb(error);
            ***REMOVED***
            return cb(null);
          ***REMOVED***);
        ***REMOVED***
        cursor.toArray((error, result) => ***REMOVED***
          var _opts = ***REMOVED*** error: error ***REMOVED***;
          model.hooks.execPost('aggregate', this, [result], _opts, (error, result) => ***REMOVED***
            if (error) ***REMOVED***
              return cb(error);
            ***REMOVED***

            cb(null, result);
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * Provides promise for aggregate.
 *
 * ####Example:
 *
 *     Model.aggregate(..).then(successCallback, errorCallback);
 *
 * @see Promise #promise_Promise
 * @param ***REMOVED***Function***REMOVED*** [resolve] successCallback
 * @param ***REMOVED***Function***REMOVED*** [reject]  errorCallback
 * @return ***REMOVED***Promise***REMOVED***
 */
Aggregate.prototype.then = function(resolve, reject) ***REMOVED***
  return this.exec().then(resolve, reject);
***REMOVED***;

/*!
 * Helpers
 */

/**
 * Checks whether an object is likely a pipeline operator
 *
 * @param ***REMOVED***Object***REMOVED*** obj object to check
 * @return ***REMOVED***Boolean***REMOVED***
 * @api private
 */

function isOperator(obj) ***REMOVED***
  var k;

  if (typeof obj !== 'object') ***REMOVED***
    return false;
  ***REMOVED***

  k = Object.keys(obj);

  return k.length === 1 && k
    .some(function(key) ***REMOVED***
      return key[0] === '$';
    ***REMOVED***);
***REMOVED***

/*!
 * Adds the appropriate `$match` pipeline step to the top of an aggregate's
 * pipeline, should it's model is a non-root discriminator type. This is
 * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.
 *
 * @param ***REMOVED***Aggregate***REMOVED*** aggregate Aggregate to prepare
 */

Aggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;

function prepareDiscriminatorPipeline(aggregate) ***REMOVED***
  var schema = aggregate._model.schema,
      discriminatorMapping = schema && schema.discriminatorMapping;

  if (discriminatorMapping && !discriminatorMapping.isRoot) ***REMOVED***
    var originalPipeline = aggregate._pipeline,
        discriminatorKey = discriminatorMapping.key,
        discriminatorValue = discriminatorMapping.value;

    // If the first pipeline stage is a match and it doesn't specify a `__t`
    // key, add the discriminator key to it. This allows for potential
    // aggregation query optimizations not to be disturbed by this feature.
    if (originalPipeline[0] && originalPipeline[0].$match && !originalPipeline[0].$match[discriminatorKey]) ***REMOVED***
      originalPipeline[0].$match[discriminatorKey] = discriminatorValue;
      // `originalPipeline` is a ref, so there's no need for
      // aggregate._pipeline = originalPipeline
    ***REMOVED*** else if (originalPipeline[0] && originalPipeline[0].$geoNear) ***REMOVED***
      originalPipeline[0].$geoNear.query =
          originalPipeline[0].$geoNear.query || ***REMOVED******REMOVED***;
      originalPipeline[0].$geoNear.query[discriminatorKey] = discriminatorValue;
    ***REMOVED*** else ***REMOVED***
      var match = ***REMOVED******REMOVED***;
      match[discriminatorKey] = discriminatorValue;
      aggregate._pipeline.unshift(***REMOVED*** $match: match ***REMOVED***);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/*!
 * Exports
 */

module.exports = Aggregate;
