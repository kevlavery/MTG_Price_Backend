/* eslint no-func-assign: 1 */

/*!
 * Module dependencies.
 */

const Document = require('../document_provider')();
const EventEmitter = require('events').EventEmitter;
const internalToObjectOptions = require('../options').internalToObjectOptions;
const utils = require('../utils');

/**
 * EmbeddedDocument constructor.
 *
 * @param ***REMOVED***Object***REMOVED*** obj js object returned from the db
 * @param ***REMOVED***MongooseDocumentArray***REMOVED*** parentArr the parent array of this document
 * @param ***REMOVED***Boolean***REMOVED*** skipId
 * @inherits Document
 * @api private
 */

function EmbeddedDocument(obj, parentArr, skipId, fields, index) ***REMOVED***
  if (parentArr) ***REMOVED***
    this.__parentArray = parentArr;
    this.__parent = parentArr._parent;
  ***REMOVED*** else ***REMOVED***
    this.__parentArray = undefined;
    this.__parent = undefined;
  ***REMOVED***
  this.__index = index;

  Document.call(this, obj, fields, skipId);

  var _this = this;
  this.on('isNew', function(val) ***REMOVED***
    _this.isNew = val;
  ***REMOVED***);

  _this.on('save', function() ***REMOVED***
    _this.constructor.emit('save', _this);
  ***REMOVED***);
***REMOVED***

/*!
 * Inherit from Document
 */
EmbeddedDocument.prototype = Object.create(Document.prototype);
EmbeddedDocument.prototype.constructor = EmbeddedDocument;

for (var i in EventEmitter.prototype) ***REMOVED***
  EmbeddedDocument[i] = EventEmitter.prototype[i];
***REMOVED***

EmbeddedDocument.prototype.toBSON = function() ***REMOVED***
  return this.toObject(internalToObjectOptions);
***REMOVED***;

/**
 * Marks the embedded doc modified.
 *
 * ####Example:
 *
 *     var doc = blogpost.comments.id(hexstring);
 *     doc.mixed.type = 'changed';
 *     doc.markModified('mixed.type');
 *
 * @param ***REMOVED***String***REMOVED*** path the path which changed
 * @api public
 * @receiver EmbeddedDocument
 */

EmbeddedDocument.prototype.markModified = function(path) ***REMOVED***
  this.$__.activePaths.modify(path);
  if (!this.__parentArray) ***REMOVED***
    return;
  ***REMOVED***

  if (this.isNew) ***REMOVED***
    // Mark the WHOLE parent array as modified
    // if this is a new document (i.e., we are initializing
    // a document),
    this.__parentArray._markModified();
  ***REMOVED*** else ***REMOVED***
    this.__parentArray._markModified(this, path);
  ***REMOVED***
***REMOVED***;

/*!
 * ignore
 */

EmbeddedDocument.prototype.populate = function() ***REMOVED***
  throw new Error('Mongoose does not support calling populate() on nested ' +
    'docs. Instead of `doc.arr[0].populate("path")`, use ' +
    '`doc.populate("arr.0.path")`');
***REMOVED***;

/**
 * Used as a stub for [hooks.js](https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3)
 *
 * ####NOTE:
 *
 * _This is a no-op. Does not actually save the doc to the db._
 *
 * @param ***REMOVED***Function***REMOVED*** [fn]
 * @return ***REMOVED***Promise***REMOVED*** resolved Promise
 * @api private
 */

EmbeddedDocument.prototype.save = function(options, fn) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    fn = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  if (!options.suppressWarning) ***REMOVED***
    console.warn('mongoose: calling `save()` on a subdoc does **not** save ' +
      'the document to MongoDB, it only runs save middleware. ' +
      'Use `subdoc.save(***REMOVED*** suppressWarning: true ***REMOVED***)` to hide this warning ' +
      'if you\'re sure this behavior is right for your app.');
  ***REMOVED***

  return utils.promiseOrCallback(fn, cb => ***REMOVED***
    this.$__save(cb);
  ***REMOVED***);
***REMOVED***;

/**
 * Used as a stub for middleware
 *
 * ####NOTE:
 *
 * _This is a no-op. Does not actually save the doc to the db._
 *
 * @param ***REMOVED***Function***REMOVED*** [fn]
 * @method $__save
 * @api private
 */

EmbeddedDocument.prototype.$__save = function(fn) ***REMOVED***
  return utils.immediate(() => fn(null, this));
***REMOVED***;

/*!
 * Registers remove event listeners for triggering
 * on subdocuments.
 *
 * @param ***REMOVED***EmbeddedDocument***REMOVED*** sub
 * @api private
 */

function registerRemoveListener(sub) ***REMOVED***
  var owner = sub.ownerDocument();

  function emitRemove() ***REMOVED***
    owner.removeListener('save', emitRemove);
    owner.removeListener('remove', emitRemove);
    sub.emit('remove', sub);
    sub.constructor.emit('remove', sub);
    owner = sub = null;
  ***REMOVED***

  owner.on('save', emitRemove);
  owner.on('remove', emitRemove);
***REMOVED***

/*!
 * no-op for hooks
 */

EmbeddedDocument.prototype.$__remove = function(cb) ***REMOVED***
  return cb(null, this);
***REMOVED***;

/**
 * Removes the subdocument from its parent array.
 *
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [fn]
 * @api public
 */

EmbeddedDocument.prototype.remove = function(options, fn) ***REMOVED***
  if ( typeof options === 'function' && !fn ) ***REMOVED***
    fn = options;
    options = undefined;
  ***REMOVED***
  if (!this.__parentArray || (options && options.noop)) ***REMOVED***
    fn && fn(null);
    return this;
  ***REMOVED***

  var _id;
  if (!this.willRemove) ***REMOVED***
    _id = this._doc._id;
    if (!_id) ***REMOVED***
      throw new Error('For your own good, Mongoose does not know ' +
          'how to remove an EmbeddedDocument that has no _id');
    ***REMOVED***
    this.__parentArray.pull(***REMOVED***_id: _id***REMOVED***);
    this.willRemove = true;
    registerRemoveListener(this);
  ***REMOVED***

  if (fn) ***REMOVED***
    fn(null);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Override #update method of parent documents.
 * @api private
 */

EmbeddedDocument.prototype.update = function() ***REMOVED***
  throw new Error('The #update method is not available on EmbeddedDocuments');
***REMOVED***;

/**
 * Helper for console.log
 *
 * @api public
 */

EmbeddedDocument.prototype.inspect = function() ***REMOVED***
  return this.toObject(***REMOVED***
    transform: false,
    virtuals: false,
    flattenDecimals: false
  ***REMOVED***);
***REMOVED***;

/**
 * Marks a path as invalid, causing validation to fail.
 *
 * @param ***REMOVED***String***REMOVED*** path the field to invalidate
 * @param ***REMOVED***String|Error***REMOVED*** err error which states the reason `path` was invalid
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

EmbeddedDocument.prototype.invalidate = function(path, err, val, first) ***REMOVED***
  if (!this.__parent) ***REMOVED***
    Document.prototype.invalidate.call(this, path, err, val);
    if (err.$isValidatorError) ***REMOVED***
      return true;
    ***REMOVED***
    throw err;
  ***REMOVED***

  var index = this.__index;
  if (typeof index !== 'undefined') ***REMOVED***
    var parentPath = this.__parentArray._path;
    var fullPath = [parentPath, index, path].join('.');
    this.__parent.invalidate(fullPath, err, val);
  ***REMOVED***

  if (first) ***REMOVED***
    this.$__.validationError = this.ownerDocument().$__.validationError;
  ***REMOVED***

  return true;
***REMOVED***;

/**
 * Marks a path as valid, removing existing validation errors.
 *
 * @param ***REMOVED***String***REMOVED*** path the field to mark as valid
 * @api private
 * @method $markValid
 * @receiver EmbeddedDocument
 */

EmbeddedDocument.prototype.$markValid = function(path) ***REMOVED***
  if (!this.__parent) ***REMOVED***
    return;
  ***REMOVED***

  var index = this.__index;
  if (typeof index !== 'undefined') ***REMOVED***
    var parentPath = this.__parentArray._path;
    var fullPath = [parentPath, index, path].join('.');
    this.__parent.$markValid(fullPath);
  ***REMOVED***
***REMOVED***;

/*!
 * ignore
 */

EmbeddedDocument.prototype.$ignore = function(path) ***REMOVED***
  Document.prototype.$ignore.call(this, path);

  if (!this.__parent) ***REMOVED***
    return;
  ***REMOVED***

  var index = this.__index;
  if (typeof index !== 'undefined') ***REMOVED***
    var parentPath = this.__parentArray._path;
    var fullPath = [parentPath, index, path].join('.');
    this.__parent.$ignore(fullPath);
  ***REMOVED***
***REMOVED***;

/**
 * Checks if a path is invalid
 *
 * @param ***REMOVED***String***REMOVED*** path the field to check
 * @api private
 * @method $isValid
 * @receiver EmbeddedDocument
 */

EmbeddedDocument.prototype.$isValid = function(path) ***REMOVED***
  var index = this.__index;
  if (typeof index !== 'undefined' && this.__parent) ***REMOVED***
    return !this.__parent.$__.validationError ||
      !this.__parent.$__.validationError.errors[this.$__fullPath(path)];
  ***REMOVED***

  return true;
***REMOVED***;

/**
 * Returns the top level document of this sub-document.
 *
 * @return ***REMOVED***Document***REMOVED***
 */

EmbeddedDocument.prototype.ownerDocument = function() ***REMOVED***
  if (this.$__.ownerDocument) ***REMOVED***
    return this.$__.ownerDocument;
  ***REMOVED***

  var parent = this.__parent;
  if (!parent) ***REMOVED***
    return this;
  ***REMOVED***

  while (parent.__parent || parent.$parent) ***REMOVED***
    parent = parent.__parent || parent.$parent;
  ***REMOVED***

  this.$__.ownerDocument = parent;
  return this.$__.ownerDocument;
***REMOVED***;

/**
 * Returns the full path to this document. If optional `path` is passed, it is appended to the full path.
 *
 * @param ***REMOVED***String***REMOVED*** [path]
 * @return ***REMOVED***String***REMOVED***
 * @api private
 * @method $__fullPath
 * @memberOf EmbeddedDocument
 */

EmbeddedDocument.prototype.$__fullPath = function(path) ***REMOVED***
  if (!this.$__.fullPath) ***REMOVED***
    var parent = this; // eslint-disable-line consistent-this
    if (!parent.__parent) ***REMOVED***
      return path;
    ***REMOVED***

    var paths = [];
    while (parent.__parent || parent.$parent) ***REMOVED***
      if (parent.__parent) ***REMOVED***
        paths.unshift(parent.__parentArray._path);
      ***REMOVED*** else ***REMOVED***
        paths.unshift(parent.$basePath);
      ***REMOVED***
      parent = parent.__parent || parent.$parent;
    ***REMOVED***

    this.$__.fullPath = paths.join('.');

    if (!this.$__.ownerDocument) ***REMOVED***
      // optimization
      this.$__.ownerDocument = parent;
    ***REMOVED***
  ***REMOVED***

  return path
    ? this.$__.fullPath + '.' + path
    : this.$__.fullPath;
***REMOVED***;

/**
 * Returns this sub-documents parent document.
 *
 * @api public
 */

EmbeddedDocument.prototype.parent = function() ***REMOVED***
  return this.__parent;
***REMOVED***;

/**
 * Returns this sub-documents parent array.
 *
 * @api public
 */

EmbeddedDocument.prototype.parentArray = function() ***REMOVED***
  return this.__parentArray;
***REMOVED***;

/*!
 * Module exports.
 */

module.exports = EmbeddedDocument;
