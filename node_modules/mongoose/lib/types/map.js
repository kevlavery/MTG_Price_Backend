'use strict';

/*!
 * ignore
 */

class MongooseMap extends Map ***REMOVED***
  constructor(v, path, doc, schemaType) ***REMOVED***
    if (v != null && v.constructor.name === 'Object') ***REMOVED***
      v = Object.keys(v).reduce((arr, key) => arr.concat([[key, v[key]]]), []);
    ***REMOVED***
    super(v);

    this.$__parent = doc;
    this.$__path = path;
    this.$__schemaType = schemaType;

    this.$__runDeferred();
  ***REMOVED***

  $init(key, value) ***REMOVED***
    if (key.startsWith('$')) ***REMOVED***
      throw new Error('Mongoose maps do not support keys that start with ' +
        '`$`, got "' + key + '"');
    ***REMOVED***
    if (key.indexOf('.') !== -1) ***REMOVED***
      throw new Error('Mongoose maps do not support keys that contain `.`, ' +
        'got "' + key + '"');
    ***REMOVED***

    super.set(key, value);

    if (value != null && value.$isSingleNested) ***REMOVED***
      value.$basePath = this.$__path + '.' + key;
    ***REMOVED***
  ***REMOVED***

  set(key, value) ***REMOVED***
    if (key.startsWith('$')) ***REMOVED***
      throw new Error('Mongoose maps do not support keys that start with ' +
        '`$`, got "' + key + '"');
    ***REMOVED***
    if (key.indexOf('.') !== -1) ***REMOVED***
      throw new Error('Mongoose maps do not support keys that contain `.`, ' +
        'got "' + key + '"');
    ***REMOVED***

    // Weird, but because you can't assign to `this` before calling `super()`
    // you can't get access to `$__schemaType` to cast in the initial call to
    // `set()` from the `super()` constructor.

    if (this.$__schemaType == null) ***REMOVED***
      this.$__deferred = this.$__deferred || [];
      this.$__deferred.push(***REMOVED*** key: key, value: value ***REMOVED***);
      return;
    ***REMOVED***

    const fullPath = this.$__path + '.' + key;
    const populated = this.$__parent != null && this.$__parent.$__ ?
      this.$__parent.populated(fullPath) || this.$__parent.populated(this.$__path) :
      null;

    if (populated != null) ***REMOVED***
      if (value.$__ == null) ***REMOVED***
        value = new populated.options.model(value);
      ***REMOVED***
      value.$__.wasPopulated = true;
    ***REMOVED*** else ***REMOVED***
      try ***REMOVED***
        value = this.$__schemaType.
          applySetters(value, this.$__parent, false, this.get(key));
      ***REMOVED*** catch (error) ***REMOVED***
        this.$__parent.invalidate(fullPath, error);
        return;
      ***REMOVED***
    ***REMOVED***

    super.set(key, value);

    if (value != null && value.$isSingleNested) ***REMOVED***
      value.$basePath = this.$__path + '.' + key;
    ***REMOVED***

    if (this.$__parent != null && this.$__parent.$__) ***REMOVED***
      this.$__parent.markModified(this.$__path + '.' + key);
    ***REMOVED***
  ***REMOVED***

  toBSON() ***REMOVED***
    return new Map(this);
  ***REMOVED***

  toJSON() ***REMOVED***
    let ret = ***REMOVED******REMOVED***;
    const keys = this.keys();
    for (let key of keys) ***REMOVED***
      ret[key] = this.get(key);
    ***REMOVED***
    return ret;
  ***REMOVED***

  inspect() ***REMOVED***
    return new Map(this);
  ***REMOVED***

  $__runDeferred() ***REMOVED***
    if (!this.$__deferred) ***REMOVED***
      return;
    ***REMOVED***
    for (let i = 0; i < this.$__deferred.length; ++i) ***REMOVED***
      this.set(this.$__deferred[i].key, this.$__deferred[i].value);
    ***REMOVED***
    this.$__deferred = null;
  ***REMOVED***
***REMOVED***

Object.defineProperty(MongooseMap.prototype, '$__parent', ***REMOVED***
  enumerable: false,
  writable: true,
  configurable: false
***REMOVED***);

Object.defineProperty(MongooseMap.prototype, '$__path', ***REMOVED***
  enumerable: false,
  writable: true,
  configurable: false
***REMOVED***);

Object.defineProperty(MongooseMap.prototype, '$__schemaType', ***REMOVED***
  enumerable: false,
  writable: true,
  configurable: false
***REMOVED***);

Object.defineProperty(MongooseMap.prototype, '$isMongooseMap', ***REMOVED***
  enumerable: false,
  writable: false,
  configurable: false,
  value: true
***REMOVED***);

Object.defineProperty(MongooseMap.prototype, '$__deferredCalls', ***REMOVED***
  enumerable: false,
  writable: false,
  configurable: false,
  value: true
***REMOVED***);

module.exports = MongooseMap;
