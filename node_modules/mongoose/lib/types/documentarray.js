'use strict';

/*!
 * Module dependencies.
 */

const MongooseArray = require('./array');
const ObjectId = require('./objectid');
const ObjectIdSchema = require('../schema/objectid');
const get = require('lodash.get');
const internalToObjectOptions = require('../options').internalToObjectOptions;
const utils = require('../utils');
const Document = require('../document');
const getDiscriminatorByValue = require('../queryhelpers').getDiscriminatorByValue;

/*!
 * ignore
 */

class CoreMongooseArray extends Array ***REMOVED***
  get isMongooseArray() ***REMOVED***
    return true;
  ***REMOVED***

  remove() ***REMOVED******REMOVED***
***REMOVED***

/**
 * DocumentArray constructor
 *
 * @param ***REMOVED***Array***REMOVED*** values
 * @param ***REMOVED***String***REMOVED*** path the path to this array
 * @param ***REMOVED***Document***REMOVED*** doc parent document
 * @api private
 * @return ***REMOVED***MongooseDocumentArray***REMOVED***
 * @inherits MongooseArray
 * @see http://bit.ly/f6CnZU
 */

function MongooseDocumentArray(values, path, doc) ***REMOVED***
  // TODO: replace this with `new CoreMongooseArray().concat()` when we remove
  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png
  var arr = new CoreMongooseArray();
  if (Array.isArray(values)) values.forEach(v => arr.push(v));
  arr._path = path;

  var props = ***REMOVED***
    isMongooseDocumentArray: true,
    validators: [],
    _atomics: ***REMOVED******REMOVED***,
    _schema: void 0,
    _handlers: void 0
  ***REMOVED***;

  // Values always have to be passed to the constructor to initialize, since
  // otherwise MongooseArray#push will mark the array as modified to the parent.
  var keysMA = Object.keys(MongooseArray.mixin);
  var numKeys = keysMA.length;
  for (var j = 0; j < numKeys; ++j) ***REMOVED***
    arr[keysMA[j]] = MongooseArray.mixin[keysMA[j]];
  ***REMOVED***

  var keysMDA = Object.keys(MongooseDocumentArray.mixin);
  numKeys = keysMDA.length;
  for (var i = 0; i < numKeys; ++i) ***REMOVED***
    arr[keysMDA[i]] = MongooseDocumentArray.mixin[keysMDA[i]];
  ***REMOVED***

  var keysP = Object.keys(props);
  numKeys = keysP.length;
  for (var k = 0; k < numKeys; ++k) ***REMOVED***
    arr[keysP[k]] = props[keysP[k]];
  ***REMOVED***

  // Because doc comes from the context of another function, doc === global
  // can happen if there was a null somewhere up the chain (see #3020 && #3034)
  // RB Jun 17, 2015 updated to check for presence of expected paths instead
  // to make more proof against unusual node environments
  if (doc && doc instanceof Document) ***REMOVED***
    arr._parent = doc;
    arr._schema = doc.schema.path(path);

    // `schema.path()` doesn't drill into nested arrays properly yet, see
    // gh-6398, gh-6602. This is a workaround because nested arrays are
    // always plain non-document arrays, so once you get to a document array
    // nesting is done. Matryoshka code.
    while (get(arr, '_schema.$isMongooseArray') &&
        !get(arr, '_schema.$isMongooseDocumentArray')) ***REMOVED***
      arr._schema = arr._schema.casterConstructor;
    ***REMOVED***

    // Tricky but this may be a document array embedded in a normal array,
    // in which case `path` would point to the embedded array. See #6405, #6398
    if (arr._schema && !arr._schema.$isMongooseDocumentArray) ***REMOVED***
      arr._schema = arr._schema.casterConstructor;
    ***REMOVED***

    arr._handlers = ***REMOVED***
      isNew: arr.notify('isNew'),
      save: arr.notify('save')
    ***REMOVED***;

    doc.on('save', arr._handlers.save);
    doc.on('isNew', arr._handlers.isNew);
  ***REMOVED***

  return arr;
***REMOVED***

/*!
 * Inherits from MongooseArray
 */

MongooseDocumentArray.mixin = ***REMOVED***
  /*!
   * ignore
   */
  toBSON: function() ***REMOVED***
    return this.toObject(internalToObjectOptions);
  ***REMOVED***,

  /**
   * Overrides MongooseArray#cast
   *
   * @method _cast
   * @api private
   * @receiver MongooseDocumentArray
   */

  _cast: function(value, index) ***REMOVED***
    let Constructor = this._schema.casterConstructor;
    const isInstance = Constructor.$isMongooseDocumentArray ?
      value && value.isMongooseDocumentArray :
      value instanceof Constructor;
    if (isInstance ||
        // Hack re: #5001, see #5005
        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) ***REMOVED***
      if (!(value.__parent && value.__parentArray)) ***REMOVED***
        // value may have been created using array.create()
        value.__parent = this._parent;
        value.__parentArray = this;
      ***REMOVED***
      value.__index = index;
      return value;
    ***REMOVED***

    if (value === undefined || value === null) ***REMOVED***
      return null;
    ***REMOVED***

    // handle cast('string') or cast(ObjectId) etc.
    // only objects are permitted so we can safely assume that
    // non-objects are to be interpreted as _id
    if (Buffer.isBuffer(value) ||
        value instanceof ObjectId || !utils.isObject(value)) ***REMOVED***
      value = ***REMOVED***_id: value***REMOVED***;
    ***REMOVED***

    if (value &&
        Constructor.discriminators &&
        Constructor.schema &&
        Constructor.schema.options &&
        Constructor.schema.options.discriminatorKey) ***REMOVED***
      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&
          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) ***REMOVED***
        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];
      ***REMOVED*** else ***REMOVED***
        var constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);
        if (constructorByValue) ***REMOVED***
          Constructor = constructorByValue;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    if (Constructor.$isMongooseDocumentArray) ***REMOVED***
      return Constructor.cast(value, this, undefined, undefined, index);
    ***REMOVED***
    return new Constructor(value, this, undefined, undefined, index);
  ***REMOVED***,

  /**
   * Searches array items for the first document with a matching _id.
   *
   * ####Example:
   *
   *     var embeddedDoc = m.array.id(some_id);
   *
   * @return ***REMOVED***EmbeddedDocument|null***REMOVED*** the subdocument or null if not found.
   * @param ***REMOVED***ObjectId|String|Number|Buffer***REMOVED*** id
   * @TODO cast to the _id based on schema for proper comparison
   * @method id
   * @api public
   * @receiver MongooseDocumentArray
   */

  id: function(id) ***REMOVED***
    var casted,
        sid,
        _id;

    try ***REMOVED***
      var casted_ = ObjectIdSchema.prototype.cast.call(***REMOVED******REMOVED***, id);
      if (casted_) ***REMOVED***
        casted = String(casted_);
      ***REMOVED***
    ***REMOVED*** catch (e) ***REMOVED***
      casted = null;
    ***REMOVED***

    for (var i = 0, l = this.length; i < l; i++) ***REMOVED***
      if (!this[i]) ***REMOVED***
        continue;
      ***REMOVED***
      _id = this[i].get('_id');

      if (_id === null || typeof _id === 'undefined') ***REMOVED***
        continue;
      ***REMOVED*** else if (_id instanceof Document) ***REMOVED***
        sid || (sid = String(id));
        if (sid == _id._id) ***REMOVED***
          return this[i];
        ***REMOVED***
      ***REMOVED*** else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) ***REMOVED***
        if (utils.deepEqual(id, _id)) ***REMOVED***
          return this[i];
        ***REMOVED***
      ***REMOVED*** else if (casted == _id) ***REMOVED***
        return this[i];
      ***REMOVED***
    ***REMOVED***

    return null;
  ***REMOVED***,

  /**
   * Returns a native js Array of plain js objects
   *
   * ####NOTE:
   *
   * _Each sub-document is converted to a plain object by calling its `#toObject` method._
   *
   * @param ***REMOVED***Object***REMOVED*** [options] optional options to pass to each documents `toObject` method call during conversion
   * @return ***REMOVED***Array***REMOVED***
   * @method toObject
   * @api public
   * @receiver MongooseDocumentArray
   */

  toObject: function(options) ***REMOVED***
    return this.map(function(doc) ***REMOVED***
      try ***REMOVED***
        return doc.toObject(options);
      ***REMOVED*** catch (e) ***REMOVED***
        return doc || null;
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***,

  /**
   * Helper for console.log
   *
   * @method inspect
   * @api public
   * @receiver MongooseDocumentArray
   */

  inspect: function() ***REMOVED***
    return Array.prototype.slice.call(this);
  ***REMOVED***,

  /**
   * Creates a subdocument casted to this schema.
   *
   * This is the same subdocument constructor used for casting.
   *
   * @param ***REMOVED***Object***REMOVED*** obj the value to cast to this arrays SubDocument schema
   * @method create
   * @api public
   * @receiver MongooseDocumentArray
   */

  create: function(obj) ***REMOVED***
    var Constructor = this._schema.casterConstructor;
    if (obj &&
        Constructor.discriminators &&
        Constructor.schema &&
        Constructor.schema.options &&
        Constructor.schema.options.discriminatorKey) ***REMOVED***
      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&
          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) ***REMOVED***
        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];
      ***REMOVED*** else ***REMOVED***
        var constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);
        if (constructorByValue) ***REMOVED***
          Constructor = constructorByValue;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    return new Constructor(obj);
  ***REMOVED***,

  /**
   * Creates a fn that notifies all child docs of `event`.
   *
   * @param ***REMOVED***String***REMOVED*** event
   * @return ***REMOVED***Function***REMOVED***
   * @method notify
   * @api private
   * @receiver MongooseDocumentArray
   */

  notify: function notify(event) ***REMOVED***
    const _this = this;
    return function notify(val, _arr) ***REMOVED***
      _arr = _arr || _this;
      let i = _arr.length;
      while (i--) ***REMOVED***
        if (_arr[i] == null) ***REMOVED***
          continue;
        ***REMOVED***
        switch (event) ***REMOVED***
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        ***REMOVED***

        if (_arr[i].isMongooseArray) ***REMOVED***
          notify(val, _arr[i]);
        ***REMOVED*** else if (_arr[i]) ***REMOVED***
          _arr[i].emit(event, val);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***

***REMOVED***;

/*!
 * Module exports.
 */

module.exports = MongooseDocumentArray;
