'use strict';

/*!
 * Module dependencies.
 */

var ObjectId = require('../types/objectid');
var utils = require('../utils');

exports.flatten = flatten;
exports.modifiedPaths = modifiedPaths;

/*!
 * ignore
 */

function flatten(update, path, options) ***REMOVED***
  var keys;
  if (update && utils.isMongooseObject(update) && !Buffer.isBuffer(update)) ***REMOVED***
    keys = Object.keys(update.toObject(***REMOVED*** transform: false, virtuals: false ***REMOVED***));
  ***REMOVED*** else ***REMOVED***
    keys = Object.keys(update || ***REMOVED******REMOVED***);
  ***REMOVED***

  var numKeys = keys.length;
  var result = ***REMOVED******REMOVED***;
  path = path ? path + '.' : '';

  for (var i = 0; i < numKeys; ++i) ***REMOVED***
    var key = keys[i];
    var val = update[key];
    result[path + key] = val;
    if (shouldFlatten(val)) ***REMOVED***
      if (options && options.skipArrays && Array.isArray(val)) ***REMOVED***
        continue;
      ***REMOVED***
      var flat = flatten(val, path + key, options);
      for (var k in flat) ***REMOVED***
        result[k] = flat[k];
      ***REMOVED***
      if (Array.isArray(val)) ***REMOVED***
        result[path + key] = val;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return result;
***REMOVED***

/*!
 * ignore
 */

function modifiedPaths(update, path, result) ***REMOVED***
  var keys = Object.keys(update || ***REMOVED******REMOVED***);
  var numKeys = keys.length;
  result = result || ***REMOVED******REMOVED***;
  path = path ? path + '.' : '';

  for (var i = 0; i < numKeys; ++i) ***REMOVED***
    var key = keys[i];
    var val = update[key];

    result[path + key] = true;
    if (utils.isMongooseObject(val) && !Buffer.isBuffer(val)) ***REMOVED***
      val = val.toObject(***REMOVED*** transform: false, virtuals: false ***REMOVED***);
    ***REMOVED***
    if (shouldFlatten(val)) ***REMOVED***
      modifiedPaths(val, path + key, result);
    ***REMOVED***
  ***REMOVED***

  return result;
***REMOVED***

/*!
 * ignore
 */

function shouldFlatten(val) ***REMOVED***
  return val &&
    typeof val === 'object' &&
    !(val instanceof Date) &&
    !(val instanceof ObjectId) &&
    (!Array.isArray(val) || val.length > 0) &&
    !(val instanceof Buffer);
***REMOVED***
