'use strict';

let Document;
const get = require('lodash.get');
const utils = require('../../utils');

/*!
 * exports
 */

exports.compile = compile;
exports.defineKey = defineKey;

/*!
 * Compiles schemas.
 */

function compile(tree, proto, prefix, options) ***REMOVED***
  Document = Document || require('../../document');
  const keys = Object.keys(tree);
  const len = keys.length;
  let limb;
  let key;

  for (let i = 0; i < len; ++i) ***REMOVED***
    key = keys[i];
    limb = tree[key];

    const hasSubprops = utils.getFunctionName(limb.constructor) === 'Object' &&
      Object.keys(limb).length &&
      (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type));
    const subprops = hasSubprops ? limb : null;

    defineKey(key, subprops, proto, prefix, keys, options);
  ***REMOVED***
***REMOVED***

/*!
 * Defines the accessor named prop on the incoming prototype.
 */

function defineKey(prop, subprops, prototype, prefix, keys, options) ***REMOVED***
  Document = Document || require('../../document');
  var path = (prefix ? prefix + '.' : '') + prop;
  prefix = prefix || '';

  if (subprops) ***REMOVED***
    Object.defineProperty(prototype, prop, ***REMOVED***
      enumerable: true,
      configurable: true,
      get: function() ***REMOVED***
        var _this = this;
        if (!this.$__.getters) ***REMOVED***
          this.$__.getters = ***REMOVED******REMOVED***;
        ***REMOVED***

        if (!this.$__.getters[path]) ***REMOVED***
          var nested = Object.create(Document.prototype, getOwnPropertyDescriptors(this));

          // save scope for nested getters/setters
          if (!prefix) ***REMOVED***
            nested.$__.scope = this;
          ***REMOVED***
          nested.$__.nestedPath = path;

          Object.defineProperty(nested, 'schema', ***REMOVED***
            enumerable: false,
            configurable: true,
            writable: false,
            value: prototype.schema
          ***REMOVED***);

          Object.defineProperty(nested, 'toObject', ***REMOVED***
            enumerable: false,
            configurable: true,
            writable: false,
            value: function() ***REMOVED***
              return utils.clone(_this.get(path, null, ***REMOVED***
                virtuals: get(this, 'schema.options.toObject.virtuals', null)
              ***REMOVED***));
            ***REMOVED***
          ***REMOVED***);

          Object.defineProperty(nested, 'toJSON', ***REMOVED***
            enumerable: false,
            configurable: true,
            writable: false,
            value: function() ***REMOVED***
              return _this.get(path, null, ***REMOVED***
                virtuals: get(_this, 'schema.options.toJSON.virtuals', null)
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***);

          Object.defineProperty(nested, '$__isNested', ***REMOVED***
            enumerable: false,
            configurable: true,
            writable: false,
            value: true
          ***REMOVED***);

          compile(subprops, nested, path, options);
          this.$__.getters[path] = nested;
        ***REMOVED***

        return this.$__.getters[path];
      ***REMOVED***,
      set: function(v) ***REMOVED***
        if (v instanceof Document) ***REMOVED***
          v = v.toObject(***REMOVED*** transform: false ***REMOVED***);
        ***REMOVED***
        var doc = this.$__.scope || this;
        return doc.$set(path, v);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    Object.defineProperty(prototype, prop, ***REMOVED***
      enumerable: true,
      configurable: true,
      get: function() ***REMOVED***
        return this.get.call(this.$__.scope || this, path);
      ***REMOVED***,
      set: function(v) ***REMOVED***
        return this.$set.call(this.$__.scope || this, path, v);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

// gets descriptors for all properties of `object`
// makes all properties non-enumerable to match previous behavior to #2211
function getOwnPropertyDescriptors(object) ***REMOVED***
  var result = ***REMOVED******REMOVED***;

  Object.getOwnPropertyNames(object).forEach(function(key) ***REMOVED***
    result[key] = Object.getOwnPropertyDescriptor(object, key);
    // Assume these are schema paths, ignore them re: #5470
    if (result[key].get) ***REMOVED***
      delete result[key];
      return;
    ***REMOVED***
    result[key].enumerable = ['isNew', '$__', 'errors', '_doc'].indexOf(key) === -1;
  ***REMOVED***);

  return result;
***REMOVED***
