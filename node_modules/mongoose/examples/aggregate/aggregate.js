
// import async to make control flow simplier
var async = require('async');

// import the rest of the normal stuff
var mongoose = require('../../lib');

require('./person.js')();

var Person = mongoose.model('Person');

// define some dummy data
var data = [
  ***REMOVED***
    name: 'bill',
    age: 25,
    birthday: new Date().setFullYear((new Date().getFullYear() - 25)),
    gender: 'Male',
    likes: ['movies', 'games', 'dogs']
  ***REMOVED***,
  ***REMOVED***
    name: 'mary',
    age: 30,
    birthday: new Date().setFullYear((new Date().getFullYear() - 30)),
    gender: 'Female',
    likes: ['movies', 'birds', 'cats']
  ***REMOVED***,
  ***REMOVED***
    name: 'bob',
    age: 21,
    birthday: new Date().setFullYear((new Date().getFullYear() - 21)),
    gender: 'Male',
    likes: ['tv', 'games', 'rabbits']
  ***REMOVED***,
  ***REMOVED***
    name: 'lilly',
    age: 26,
    birthday: new Date().setFullYear((new Date().getFullYear() - 26)),
    gender: 'Female',
    likes: ['books', 'cats', 'dogs']
  ***REMOVED***,
  ***REMOVED***
    name: 'alucard',
    age: 1000,
    birthday: new Date().setFullYear((new Date().getFullYear() - 1000)),
    gender: 'Male',
    likes: ['glasses', 'wine', 'the night']
  ***REMOVED***
];


mongoose.connect('mongodb://localhost/persons', function(err) ***REMOVED***
  if (err) throw err;

  // create all of the dummy people
  async.each(data, function(item, cb) ***REMOVED***
    Person.create(item, cb);
  ***REMOVED***, function(err) ***REMOVED***
    if (err) ***REMOVED***
      // handle error
    ***REMOVED***

    // run an aggregate query that will get all of the people who like a given
    // item. To see the full documentation on ways to use the aggregate
    // framework, see http://docs.mongodb.org/manual/core/aggregation/
    Person.aggregate(
      // select the fields we want to deal with
      ***REMOVED***$project: ***REMOVED***name: 1, likes: 1***REMOVED******REMOVED***,
      // unwind 'likes', which will create a document for each like
      ***REMOVED***$unwind: '$likes'***REMOVED***,
      // group everything by the like and then add each name with that like to
      // the set for the like
      ***REMOVED***$group: ***REMOVED***
        _id: ***REMOVED***likes: '$likes'***REMOVED***,
        likers: ***REMOVED***$addToSet: '$name'***REMOVED***
      ***REMOVED******REMOVED***,
      function(err, result) ***REMOVED***
        if (err) throw err;
        console.log(result);
        /* [
         ***REMOVED*** _id: ***REMOVED*** likes: 'the night' ***REMOVED***, likers: [ 'alucard' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'wine' ***REMOVED***, likers: [ 'alucard' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'books' ***REMOVED***, likers: [ 'lilly' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'glasses' ***REMOVED***, likers: [ 'alucard' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'birds' ***REMOVED***, likers: [ 'mary' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'rabbits' ***REMOVED***, likers: [ 'bob' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'cats' ***REMOVED***, likers: [ 'lilly', 'mary' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'dogs' ***REMOVED***, likers: [ 'lilly', 'bill' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'tv' ***REMOVED***, likers: [ 'bob' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'games' ***REMOVED***, likers: [ 'bob', 'bill' ] ***REMOVED***,
         ***REMOVED*** _id: ***REMOVED*** likes: 'movies' ***REMOVED***, likers: [ 'mary', 'bill' ] ***REMOVED***
         ] */

        cleanup();
      ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

function cleanup() ***REMOVED***
  Person.remove(function() ***REMOVED***
    mongoose.disconnect();
  ***REMOVED***);
***REMOVED***
