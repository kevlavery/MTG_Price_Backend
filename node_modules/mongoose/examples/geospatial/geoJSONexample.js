// import async to make control flow simplier
var async = require('async');

// import the rest of the normal stuff
var mongoose = require('../../lib');

require('./geoJSONSchema.js')();

var Location = mongoose.model('Location');

// define some dummy data
// note: the type can be Point, LineString, or Polygon
var data = [
  ***REMOVED***loc: ***REMOVED***type: 'Point', coordinates: [-20.0, 5.0]***REMOVED******REMOVED***,
  ***REMOVED***loc: ***REMOVED***type: 'Point', coordinates: [6.0, 10.0]***REMOVED******REMOVED***,
  ***REMOVED***loc: ***REMOVED***type: 'Point', coordinates: [34.0, -50.0]***REMOVED******REMOVED***,
  ***REMOVED***loc: ***REMOVED***type: 'Point', coordinates: [-100.0, 70.0]***REMOVED******REMOVED***,
  ***REMOVED***loc: ***REMOVED***type: 'Point', coordinates: [38.0, 38.0]***REMOVED******REMOVED***
];


mongoose.connect('mongodb://localhost/locations', function(err) ***REMOVED***
  if (err) ***REMOVED***
    throw err;
  ***REMOVED***

  Location.on('index', function(err) ***REMOVED***
    if (err) ***REMOVED***
      throw err;
    ***REMOVED***
    // create all of the dummy locations
    async.each(data, function(item, cb) ***REMOVED***
      Location.create(item, cb);
    ***REMOVED***, function(err) ***REMOVED***
      if (err) ***REMOVED***
        throw err;
      ***REMOVED***
      // create the location we want to search for
      var coords = ***REMOVED***type: 'Point', coordinates: [-5, 5]***REMOVED***;
      // search for it
      Location.find(***REMOVED***loc: ***REMOVED***$near: coords***REMOVED******REMOVED***).limit(1).exec(function(err, res) ***REMOVED***
        if (err) ***REMOVED***
          throw err;
        ***REMOVED***
        console.log('Closest to %s is %s', JSON.stringify(coords), res);
        cleanup();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

function cleanup() ***REMOVED***
  Location.remove(function() ***REMOVED***
    mongoose.disconnect();
  ***REMOVED***);
***REMOVED***
