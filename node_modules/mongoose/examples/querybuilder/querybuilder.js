
// import async to make control flow simplier
var async = require('async');

// import the rest of the normal stuff
var mongoose = require('../../lib');

require('./person.js')();

var Person = mongoose.model('Person');

// define some dummy data
var data = [
  ***REMOVED***
    name: 'bill',
    age: 25,
    birthday: new Date().setFullYear((new Date().getFullYear() - 25))
  ***REMOVED***,
  ***REMOVED***
    name: 'mary',
    age: 30,
    birthday: new Date().setFullYear((new Date().getFullYear() - 30))
  ***REMOVED***,
  ***REMOVED***
    name: 'bob',
    age: 21,
    birthday: new Date().setFullYear((new Date().getFullYear() - 21))
  ***REMOVED***,
  ***REMOVED***
    name: 'lilly',
    age: 26,
    birthday: new Date().setFullYear((new Date().getFullYear() - 26))
  ***REMOVED***,
  ***REMOVED***
    name: 'alucard',
    age: 1000,
    birthday: new Date().setFullYear((new Date().getFullYear() - 1000))
  ***REMOVED***
];


mongoose.connect('mongodb://localhost/persons', function(err) ***REMOVED***
  if (err) throw err;

  // create all of the dummy people
  async.each(data, function(item, cb) ***REMOVED***
    Person.create(item, cb);
  ***REMOVED***, function(err) ***REMOVED***
    if (err) throw err;

    // when querying data, instead of providing a callback, you can instead
    // leave that off and get a query object returned
    var query = Person.find(***REMOVED***age: ***REMOVED***$lt: 1000***REMOVED******REMOVED***);

    // this allows you to continue applying modifiers to it
    query.sort('birthday');
    query.select('name');

    // you can chain them together as well
    // a full list of methods can be found:
    // http://mongoosejs.com/docs/api.html#query-js
    query.where('age').gt(21);

    // finally, when ready to execute the query, call the exec() function
    query.exec(function(err, results) ***REMOVED***
      if (err) throw err;

      console.log(results);

      cleanup();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

function cleanup() ***REMOVED***
  Person.remove(function() ***REMOVED***
    mongoose.disconnect();
  ***REMOVED***);
***REMOVED***
