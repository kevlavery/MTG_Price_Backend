/**
 * Module dependencies.
 */

var mongoose = require('../../lib'),
    Schema = mongoose.Schema;

/**
 * Schema definition
 */

// recursive embedded-document schema

var Comment = new Schema();

Comment.add(***REMOVED***
  title: ***REMOVED***
    type: String,
    index: true
  ***REMOVED***,
  date: Date,
  body: String,
  comments: [Comment]
***REMOVED***);

var BlogPost = new Schema(***REMOVED***
  title: ***REMOVED***
    type: String,
    index: true
  ***REMOVED***,
  slug: ***REMOVED***
    type: String,
    lowercase: true,
    trim: true
  ***REMOVED***,
  date: Date,
  buf: Buffer,
  comments: [Comment],
  creator: Schema.ObjectId
***REMOVED***);

var Person = new Schema(***REMOVED***
  name: ***REMOVED***
    first: String,
    last: String
  ***REMOVED***,
  email: ***REMOVED***
    type: String,
    required: true,
    index: ***REMOVED***
      unique: true,
      sparse: true
    ***REMOVED***
  ***REMOVED***,
  alive: Boolean
***REMOVED***);

/**
 * Accessing a specific schema type by key
 */

BlogPost.path('date')
  .default(function() ***REMOVED***
    return new Date();
  ***REMOVED***)
  .set(function(v) ***REMOVED***
    return v === 'now' ? new Date() : v;
  ***REMOVED***);

/**
 * Pre hook.
 */

BlogPost.pre('save', function(next, done) ***REMOVED***
  /* global emailAuthor */
  emailAuthor(done); // some async function
  next();
***REMOVED***);

/**
 * Methods
 */

BlogPost.methods.findCreator = function(callback) ***REMOVED***
  return this.db.model('Person').findById(this.creator, callback);
***REMOVED***;

BlogPost.statics.findByTitle = function(title, callback) ***REMOVED***
  return this.find(***REMOVED***title: title***REMOVED***, callback);
***REMOVED***;

BlogPost.methods.expressiveQuery = function(creator, date, callback) ***REMOVED***
  return this.find('creator', creator).where('date').gte(date).run(callback);
***REMOVED***;

/**
 * Plugins
 */

function slugGenerator(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  var key = options.key || 'title';

  return function slugGenerator(schema) ***REMOVED***
    schema.path(key).set(function(v) ***REMOVED***
      this.slug = v.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/-+/g, '');
      return v;
    ***REMOVED***);
  ***REMOVED***;
***REMOVED***

BlogPost.plugin(slugGenerator());

/**
 * Define model.
 */

mongoose.model('BlogPost', BlogPost);
mongoose.model('Person', Person);
