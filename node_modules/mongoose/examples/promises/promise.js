// import async to make control flow simplier
var async = require('async');

// import the rest of the normal stuff
var mongoose = require('../../lib');

require('./person.js')();

var Person = mongoose.model('Person');

// define some dummy data
var data = [
  ***REMOVED***
    name: 'bill',
    age: 25,
    birthday: new Date().setFullYear((new Date().getFullYear() - 25))
  ***REMOVED***,
  ***REMOVED***
    name: 'mary',
    age: 30,
    birthday: new Date().setFullYear((new Date().getFullYear() - 30))
  ***REMOVED***,
  ***REMOVED***
    name: 'bob',
    age: 21,
    birthday: new Date().setFullYear((new Date().getFullYear() - 21))
  ***REMOVED***,
  ***REMOVED***
    name: 'lilly',
    age: 26,
    birthday: new Date().setFullYear((new Date().getFullYear() - 26))
  ***REMOVED***,
  ***REMOVED***
    name: 'alucard',
    age: 1000,
    birthday: new Date().setFullYear((new Date().getFullYear() - 1000))
  ***REMOVED***
];


mongoose.connect('mongodb://localhost/persons', function(err) ***REMOVED***
  if (err) ***REMOVED***
    throw err;
  ***REMOVED***

  // create all of the dummy people
  async.each(data, function(item, cb) ***REMOVED***
    Person.create(item, cb);
  ***REMOVED***, function(err) ***REMOVED***
    if (err) ***REMOVED***
      // handle error
    ***REMOVED***

    // create a promise (get one from the query builder)
    var prom = Person.find(***REMOVED***age: ***REMOVED***$lt: 1000***REMOVED******REMOVED***).exec();

    // add a callback on the promise. This will be called on both error and
    // complete
    prom.addBack(function() ***REMOVED***
      console.log('completed');
    ***REMOVED***);

    // add a callback that is only called on complete (success) events
    prom.addCallback(function() ***REMOVED***
      console.log('Successful Completion!');
    ***REMOVED***);

    // add a callback that is only called on err (rejected) events
    prom.addErrback(function() ***REMOVED***
      console.log('Fail Boat');
    ***REMOVED***);

    // you can chain things just like in the promise/A+ spec
    // note: each then() is returning a new promise, so the above methods
    // that we defined will all fire after the initial promise is fulfilled
    prom.then(function(people) ***REMOVED***
      // just getting the stuff for the next query
      var ids = people.map(function(p) ***REMOVED***
        return p._id;
      ***REMOVED***);

      // return the next promise
      return Person.find(***REMOVED***_id: ***REMOVED***$nin: ids***REMOVED******REMOVED***).exec();
    ***REMOVED***).then(function(oldest) ***REMOVED***
      console.log('Oldest person is: %s', oldest);
    ***REMOVED***).then(cleanup);
  ***REMOVED***);
***REMOVED***);

function cleanup() ***REMOVED***
  Person.remove(function() ***REMOVED***
    mongoose.disconnect();
  ***REMOVED***);
***REMOVED***
