'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = queue;

var _baseIndexOf = require('lodash/_baseIndexOf');

var _baseIndexOf2 = _interopRequireDefault(_baseIndexOf);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _rest = require('./rest');

var _rest2 = _interopRequireDefault(_rest);

var _onlyOnce = require('./onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _setImmediate = require('./setImmediate');

var _setImmediate2 = _interopRequireDefault(_setImmediate);

var _DoublyLinkedList = require('./DoublyLinkedList');

var _DoublyLinkedList2 = _interopRequireDefault(_DoublyLinkedList);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

function queue(worker, concurrency, payload) ***REMOVED***
    if (concurrency == null) ***REMOVED***
        concurrency = 1;
    ***REMOVED*** else if (concurrency === 0) ***REMOVED***
        throw new Error('Concurrency must not be zero');
    ***REMOVED***

    function _insert(data, insertAtFront, callback) ***REMOVED***
        if (callback != null && typeof callback !== 'function') ***REMOVED***
            throw new Error('task callback must be a function');
        ***REMOVED***
        q.started = true;
        if (!(0, _isArray2.default)(data)) ***REMOVED***
            data = [data];
        ***REMOVED***
        if (data.length === 0 && q.idle()) ***REMOVED***
            // call drain immediately if there are no tasks
            return (0, _setImmediate2.default)(function () ***REMOVED***
                q.drain();
            ***REMOVED***);
        ***REMOVED***

        for (var i = 0, l = data.length; i < l; i++) ***REMOVED***
            var item = ***REMOVED***
                data: data[i],
                callback: callback || _noop2.default
            ***REMOVED***;

            if (insertAtFront) ***REMOVED***
                q._tasks.unshift(item);
            ***REMOVED*** else ***REMOVED***
                q._tasks.push(item);
            ***REMOVED***
        ***REMOVED***
        (0, _setImmediate2.default)(q.process);
    ***REMOVED***

    function _next(tasks) ***REMOVED***
        return (0, _rest2.default)(function (args) ***REMOVED***
            workers -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) ***REMOVED***
                var task = tasks[i];
                var index = (0, _baseIndexOf2.default)(workersList, task, 0);
                if (index >= 0) ***REMOVED***
                    workersList.splice(index);
                ***REMOVED***

                task.callback.apply(task, args);

                if (args[0] != null) ***REMOVED***
                    q.error(args[0], task.data);
                ***REMOVED***
            ***REMOVED***

            if (workers <= q.concurrency - q.buffer) ***REMOVED***
                q.unsaturated();
            ***REMOVED***

            if (q.idle()) ***REMOVED***
                q.drain();
            ***REMOVED***
            q.process();
        ***REMOVED***);
    ***REMOVED***

    var workers = 0;
    var workersList = [];
    var q = ***REMOVED***
        _tasks: new _DoublyLinkedList2.default(),
        concurrency: concurrency,
        payload: payload,
        saturated: _noop2.default,
        unsaturated: _noop2.default,
        buffer: concurrency / 4,
        empty: _noop2.default,
        drain: _noop2.default,
        error: _noop2.default,
        started: false,
        paused: false,
        push: function (data, callback) ***REMOVED***
            _insert(data, false, callback);
        ***REMOVED***,
        kill: function () ***REMOVED***
            q.drain = _noop2.default;
            q._tasks.empty();
        ***REMOVED***,
        unshift: function (data, callback) ***REMOVED***
            _insert(data, true, callback);
        ***REMOVED***,
        process: function () ***REMOVED***
            while (!q.paused && workers < q.concurrency && q._tasks.length) ***REMOVED***
                var tasks = [],
                    data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) ***REMOVED***
                    var node = q._tasks.shift();
                    tasks.push(node);
                    data.push(node.data);
                ***REMOVED***

                if (q._tasks.length === 0) ***REMOVED***
                    q.empty();
                ***REMOVED***
                workers += 1;
                workersList.push(tasks[0]);

                if (workers === q.concurrency) ***REMOVED***
                    q.saturated();
                ***REMOVED***

                var cb = (0, _onlyOnce2.default)(_next(tasks));
                worker(data, cb);
            ***REMOVED***
        ***REMOVED***,
        length: function () ***REMOVED***
            return q._tasks.length;
        ***REMOVED***,
        running: function () ***REMOVED***
            return workers;
        ***REMOVED***,
        workersList: function () ***REMOVED***
            return workersList;
        ***REMOVED***,
        idle: function () ***REMOVED***
            return q._tasks.length + workers === 0;
        ***REMOVED***,
        pause: function () ***REMOVED***
            q.paused = true;
        ***REMOVED***,
        resume: function () ***REMOVED***
            if (q.paused === false) ***REMOVED***
                return;
            ***REMOVED***
            q.paused = false;
            var resumeCount = Math.min(q.concurrency, q._tasks.length);
            // Need to call q.process once per concurrent
            // worker to preserve full concurrency after pause
            for (var w = 1; w <= resumeCount; w++) ***REMOVED***
                (0, _setImmediate2.default)(q.process);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    return q;
***REMOVED***
module.exports = exports['default'];