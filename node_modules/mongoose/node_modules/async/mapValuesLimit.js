'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = mapValuesLimit;

var _eachOfLimit = require('./eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * The same as [`mapValues`]***REMOVED***@link module:Collections.mapValues***REMOVED*** but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]***REMOVED***@link module:Collections.mapValues***REMOVED***
 * @category Collection
 * @param ***REMOVED***Object***REMOVED*** obj - A collection to iterate over.
 * @param ***REMOVED***number***REMOVED*** limit - The maximum number of async operations at a time.
 * @param ***REMOVED***AsyncFunction***REMOVED*** iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param ***REMOVED***Function***REMOVED*** [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
function mapValuesLimit(obj, limit, iteratee, callback) ***REMOVED***
    callback = (0, _once2.default)(callback || _noop2.default);
    var newObj = ***REMOVED******REMOVED***;
    var _iteratee = (0, _wrapAsync2.default)(iteratee);
    (0, _eachOfLimit2.default)(obj, limit, function (val, key, next) ***REMOVED***
        _iteratee(val, key, function (err, result) ***REMOVED***
            if (err) return next(err);
            newObj[key] = result;
            next();
        ***REMOVED***);
    ***REMOVED***, function (err) ***REMOVED***
        callback(err, newObj);
    ***REMOVED***);
***REMOVED***
module.exports = exports['default'];