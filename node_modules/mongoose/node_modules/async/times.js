'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);

var _timesLimit = require('./timesLimit');

var _timesLimit2 = _interopRequireDefault(_timesLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]***REMOVED***@link module:Collections.map***REMOVED***.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]***REMOVED***@link module:Collections.map***REMOVED***
 * @category Control Flow
 * @param ***REMOVED***number***REMOVED*** n - The number of times to run the function.
 * @param ***REMOVED***AsyncFunction***REMOVED*** iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param ***REMOVED***Function***REMOVED*** callback - see ***REMOVED***@link module:Collections.map***REMOVED***.
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) ***REMOVED***
 *     callback(null, ***REMOVED***
 *         id: 'user' + id
 *     ***REMOVED***);
 * ***REMOVED***;
 *
 * // generate 5 users
 * async.times(5, function(n, next) ***REMOVED***
 *     createUser(n, function(err, user) ***REMOVED***
 *         next(err, user);
 *     ***REMOVED***);
 * ***REMOVED***, function(err, users) ***REMOVED***
 *     // we should now have 5 users
 * ***REMOVED***);
 */
exports.default = (0, _doLimit2.default)(_timesLimit2.default, Infinity);
module.exports = exports['default'];