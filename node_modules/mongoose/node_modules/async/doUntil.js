'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = doUntil;

var _doWhilst = require('./doWhilst');

var _doWhilst2 = _interopRequireDefault(_doWhilst);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * Like ['doWhilst']***REMOVED***@link module:ControlFlow.doWhilst***REMOVED***, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]***REMOVED***@link module:ControlFlow.doWhilst***REMOVED***
 * @category Control Flow
 * @param ***REMOVED***Function***REMOVED*** fn - A function which is called each time `test` fails.
 * The function is passed a `callback(err)`, which must be called once it has
 * completed with an optional `err` argument. Invoked with (callback).
 * @param ***REMOVED***Function***REMOVED*** test - synchronous truth test to perform after each
 * execution of `fn`. Invoked with the non-error callback results of `fn`.
 * @param ***REMOVED***Function***REMOVED*** [callback] - A callback which is called after the test
 * function has passed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `fn`'s
 * callback. Invoked with (err, [results]);
 */
function doUntil(fn, test, callback) ***REMOVED***
    (0, _doWhilst2.default)(fn, function () ***REMOVED***
        return !test.apply(this, arguments);
    ***REMOVED***, callback);
***REMOVED***
module.exports = exports['default'];