'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);

exports.default = function (coll, iteratee, callback) ***REMOVED***
    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
***REMOVED***;

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _breakLoop = require('./internal/breakLoop');

var _breakLoop2 = _interopRequireDefault(_breakLoop);

var _eachOfLimit = require('./eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _onlyOnce = require('./internal/onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) ***REMOVED***
    callback = (0, _once2.default)(callback || _noop2.default);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) ***REMOVED***
        callback(null);
    ***REMOVED***

    function iteratorCallback(err, value) ***REMOVED***
        if (err) ***REMOVED***
            callback(err);
        ***REMOVED*** else if (++completed === length || value === _breakLoop2.default) ***REMOVED***
            callback(null);
        ***REMOVED***
    ***REMOVED***

    for (; index < length; index++) ***REMOVED***
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
    ***REMOVED***
***REMOVED***

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);

/**
 * Like [`each`]***REMOVED***@link module:Collections.each***REMOVED***, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]***REMOVED***@link module:Collections.each***REMOVED***
 * @param ***REMOVED***Array|Iterable|Object***REMOVED*** coll - A collection to iterate over.
 * @param ***REMOVED***AsyncFunction***REMOVED*** iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param ***REMOVED***Function***REMOVED*** [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = ***REMOVED***dev: "/dev.json", test: "/test.json", prod: "/prod.json"***REMOVED***;
 * var configs = ***REMOVED******REMOVED***;
 *
 * async.forEachOf(obj, function (value, key, callback) ***REMOVED***
 *     fs.readFile(__dirname + value, "utf8", function (err, data) ***REMOVED***
 *         if (err) return callback(err);
 *         try ***REMOVED***
 *             configs[key] = JSON.parse(data);
 *         ***REMOVED*** catch (e) ***REMOVED***
 *             return callback(e);
 *         ***REMOVED***
 *         callback();
 *     ***REMOVED***);
 * ***REMOVED***, function (err) ***REMOVED***
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * ***REMOVED***);
 */
module.exports = exports['default'];