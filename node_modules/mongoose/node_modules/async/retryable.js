'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);

exports.default = function (opts, task) ***REMOVED***
    if (!task) ***REMOVED***
        task = opts;
        opts = null;
    ***REMOVED***
    var _task = (0, _wrapAsync2.default)(task);
    return (0, _initialParams2.default)(function (args, callback) ***REMOVED***
        function taskFn(cb) ***REMOVED***
            _task.apply(null, args.concat(cb));
        ***REMOVED***

        if (opts) (0, _retry2.default)(opts, taskFn, callback);else (0, _retry2.default)(taskFn, callback);
    ***REMOVED***);
***REMOVED***;

var _retry = require('./retry');

var _retry2 = _interopRequireDefault(_retry);

var _initialParams = require('./internal/initialParams');

var _initialParams2 = _interopRequireDefault(_initialParams);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

module.exports = exports['default'];

/**
 * A close relative of [`retry`]***REMOVED***@link module:ControlFlow.retry***REMOVED***.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]***REMOVED***@link module:ControlFlow.retry***REMOVED***
 * @category Control Flow
 * @param ***REMOVED***Object|number***REMOVED*** [opts = ***REMOVED***times: 5, interval: 0***REMOVED***| 5] - optional
 * options, exactly the same as from `retry`
 * @param ***REMOVED***AsyncFunction***REMOVED*** task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns ***REMOVED***AsyncFunction***REMOVED*** The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto(***REMOVED***
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) ***REMOVED***
 *         maybeProcessData(results.dep1, cb);
 *     ***REMOVED***)]
 * ***REMOVED***, callback);
 */