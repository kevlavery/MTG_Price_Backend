'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);
exports.default = parallelLimit;

var _eachOfLimit = require('./internal/eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _parallel = require('./internal/parallel');

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * The same as [`parallel`]***REMOVED***@link module:ControlFlow.parallel***REMOVED*** but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]***REMOVED***@link module:ControlFlow.parallel***REMOVED***
 * @category Control Flow
 * @param ***REMOVED***Array|Iterable|Object***REMOVED*** tasks - A collection of
 * [async functions]***REMOVED***@link AsyncFunction***REMOVED*** to run.
 * Each async function can complete with any number of optional `result` values.
 * @param ***REMOVED***number***REMOVED*** limit - The maximum number of async operations at a time.
 * @param ***REMOVED***Function***REMOVED*** [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 */
function parallelLimit(tasks, limit, callback) ***REMOVED***
  (0, _parallel2.default)((0, _eachOfLimit2.default)(limit), tasks, callback);
***REMOVED***
module.exports = exports['default'];