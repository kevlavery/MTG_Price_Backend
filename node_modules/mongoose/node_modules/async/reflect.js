'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
exports.default = reflect;

var _initialParams = require('./internal/initialParams');

var _initialParams2 = _interopRequireDefault(_initialParams);

var _rest = require('./internal/rest');

var _rest2 = _interopRequireDefault(_rest);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * Wraps the function in another function that always returns data even when it
 * errors.
 *
 * The object returned has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param ***REMOVED***Function***REMOVED*** fn - The function you want to wrap
 * @returns ***REMOVED***Function***REMOVED*** - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) ***REMOVED***
 *         // do some stuff ...
 *         callback(null, 'one');
 *     ***REMOVED***),
 *     async.reflect(function(callback) ***REMOVED***
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     ***REMOVED***),
 *     async.reflect(function(callback) ***REMOVED***
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     ***REMOVED***)
 * ],
 * // optional callback
 * function(err, results) ***REMOVED***
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * ***REMOVED***);
 */
function reflect(fn) ***REMOVED***
    return (0, _initialParams2.default)(function reflectOn(args, reflectCallback) ***REMOVED***
        args.push((0, _rest2.default)(function callback(err, cbArgs) ***REMOVED***
            if (err) ***REMOVED***
                reflectCallback(null, ***REMOVED***
                    error: err
                ***REMOVED***);
            ***REMOVED*** else ***REMOVED***
                var value = null;
                if (cbArgs.length === 1) ***REMOVED***
                    value = cbArgs[0];
                ***REMOVED*** else if (cbArgs.length > 1) ***REMOVED***
                    value = cbArgs;
                ***REMOVED***
                reflectCallback(null, ***REMOVED***
                    value: value
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***));

        return fn.apply(this, args);
    ***REMOVED***);
***REMOVED***
module.exports = exports['default'];