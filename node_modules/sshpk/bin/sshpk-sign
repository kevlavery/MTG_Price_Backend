#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2015 Joyent, Inc.  All rights reserved.

var dashdash = require('dashdash');
var sshpk = require('../lib/index');
var fs = require('fs');
var path = require('path');
var getPassword = require('getpass').getPass;

var options = [
	***REMOVED***
		names: ['hash', 'H'],
		type: 'string',
		help: 'Hash algorithm (sha1, sha256, sha384, sha512)'
	***REMOVED***,
	***REMOVED***
		names: ['verbose', 'v'],
		type: 'bool',
		help: 'Display verbose info about key and hash used'
	***REMOVED***,
	***REMOVED***
		names: ['identity', 'i'],
		type: 'string',
		help: 'Path to key to use'
	***REMOVED***,
	***REMOVED***
		names: ['file', 'f'],
		type: 'string',
		help: 'Input filename'
	***REMOVED***,
	***REMOVED***
		names: ['out', 'o'],
		type: 'string',
		help: 'Output filename'
	***REMOVED***,
	***REMOVED***
		names: ['format', 't'],
		type: 'string',
		help: 'Signature format (asn1, ssh, raw)'
	***REMOVED***,
	***REMOVED***
		names: ['binary', 'b'],
		type: 'bool',
		help: 'Output raw binary instead of base64'
	***REMOVED***,
	***REMOVED***
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	***REMOVED***
];

var parseOpts = ***REMOVED******REMOVED***;

if (require.main === module) ***REMOVED***
	var parser = dashdash.createParser(***REMOVED***
		options: options
	***REMOVED***);

	try ***REMOVED***
		var opts = parser.parse(process.argv);
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-sign: error: %s', e.message);
		process.exit(1);
	***REMOVED***

	if (opts.help || opts._args.length > 1) ***REMOVED***
		var help = parser.help(***REMOVED******REMOVED***).trimRight();
		console.error('sshpk-sign: sign data using an SSH key\n');
		console.error(help);
		process.exit(1);
	***REMOVED***

	if (!opts.identity) ***REMOVED***
		var help = parser.help(***REMOVED******REMOVED***).trimRight();
		console.error('sshpk-sign: the -i or --identity option ' +
		    'is required\n');
		console.error(help);
		process.exit(1);
	***REMOVED***

	var keyData = fs.readFileSync(opts.identity);
	parseOpts.filename = opts.identity;

	run();
***REMOVED***

function run() ***REMOVED***
	var key;
	try ***REMOVED***
		key = sshpk.parsePrivateKey(keyData, 'auto', parseOpts);
	***REMOVED*** catch (e) ***REMOVED***
		if (e.name === 'KeyEncryptedError') ***REMOVED***
			getPassword(function (err, pw) ***REMOVED***
				parseOpts.passphrase = pw;
				run();
			***REMOVED***);
			return;
		***REMOVED***
		console.error('sshpk-sign: error loading private key "' +
		    opts.identity + '": ' + e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	var hash = opts.hash || key.defaultHashAlgorithm();

	var signer;
	try ***REMOVED***
		signer = key.createSign(hash);
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-sign: error creating signer: ' +
		    e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	if (opts.verbose) ***REMOVED***
		console.error('sshpk-sign: using %s-%s with a %d bit key',
		    key.type, hash, key.size);
	***REMOVED***

	var inFile = process.stdin;
	var inFileName = 'stdin';

	var inFilePath;
	if (opts.file) ***REMOVED***
		inFilePath = opts.file;
	***REMOVED*** else if (opts._args.length === 1) ***REMOVED***
		inFilePath = opts._args[0];
	***REMOVED***

	if (inFilePath)
		inFileName = path.basename(inFilePath);

	try ***REMOVED***
		if (inFilePath) ***REMOVED***
			fs.accessSync(inFilePath, fs.R_OK);
			inFile = fs.createReadStream(inFilePath);
		***REMOVED***
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-sign: error opening input file' +
		     ': ' + e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	var outFile = process.stdout;

	try ***REMOVED***
		if (opts.out && !opts.identify) ***REMOVED***
			fs.accessSync(path.dirname(opts.out), fs.W_OK);
			outFile = fs.createWriteStream(opts.out);
		***REMOVED***
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-sign: error opening output file' +
		    ': ' + e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	inFile.pipe(signer);
	inFile.on('end', function () ***REMOVED***
		var sig;
		try ***REMOVED***
			sig = signer.sign();
		***REMOVED*** catch (e) ***REMOVED***
			console.error('sshpk-sign: error signing data: ' +
			    e.name + ': ' + e.message);
			process.exit(1);
		***REMOVED***

		var fmt = opts.format || 'asn1';
		var output;
		try ***REMOVED***
			output = sig.toBuffer(fmt);
			if (!opts.binary)
				output = output.toString('base64');
		***REMOVED*** catch (e) ***REMOVED***
			console.error('sshpk-sign: error converting signature' +
			    ' to ' + fmt + ' format: ' + e.name + ': ' +
			    e.message);
			process.exit(1);
		***REMOVED***

		outFile.write(output);
		if (!opts.binary)
			outFile.write('\n');
		outFile.once('drain', function () ***REMOVED***
			process.exit(0);
		***REMOVED***);
	***REMOVED***);
***REMOVED***
