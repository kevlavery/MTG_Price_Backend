#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2015 Joyent, Inc.	All rights reserved.

var dashdash = require('dashdash');
var sshpk = require('../lib/index');
var fs = require('fs');
var path = require('path');
var tty = require('tty');
var readline = require('readline');
var getPassword = require('getpass').getPass;

var options = [
	***REMOVED***
		names: ['outformat', 't'],
		type: 'string',
		help: 'Output format'
	***REMOVED***,
	***REMOVED***
		names: ['informat', 'T'],
		type: 'string',
		help: 'Input format'
	***REMOVED***,
	***REMOVED***
		names: ['file', 'f'],
		type: 'string',
		help: 'Input file name (default stdin)'
	***REMOVED***,
	***REMOVED***
		names: ['out', 'o'],
		type: 'string',
		help: 'Output file name (default stdout)'
	***REMOVED***,
	***REMOVED***
		names: ['private', 'p'],
		type: 'bool',
		help: 'Produce a private key as output'
	***REMOVED***,
	***REMOVED***
		names: ['derive', 'd'],
		type: 'string',
		help: 'Output a new key derived from this one, with given algo'
	***REMOVED***,
	***REMOVED***
		names: ['identify', 'i'],
		type: 'bool',
		help: 'Print key metadata instead of converting'
	***REMOVED***,
	***REMOVED***
		names: ['comment', 'c'],
		type: 'string',
		help: 'Set key comment, if output format supports'
	***REMOVED***,
	***REMOVED***
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	***REMOVED***
];

if (require.main === module) ***REMOVED***
	var parser = dashdash.createParser(***REMOVED***
		options: options
	***REMOVED***);

	try ***REMOVED***
		var opts = parser.parse(process.argv);
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-conv: error: %s', e.message);
		process.exit(1);
	***REMOVED***

	if (opts.help || opts._args.length > 1) ***REMOVED***
		var help = parser.help(***REMOVED******REMOVED***).trimRight();
		console.error('sshpk-conv: converts between SSH key formats\n');
		console.error(help);
		console.error('\navailable formats:');
		console.error('	 - pem, pkcs1	  eg id_rsa');
		console.error('	 - ssh		  eg id_rsa.pub');
		console.error('	 - pkcs8	  format you want for openssl');
		console.error('	 - openssh	  like output of ssh-keygen -o');
		console.error('	 - rfc4253	  raw OpenSSH wire format');
		console.error('	 - dnssec	  dnssec-keygen format');
		process.exit(1);
	***REMOVED***

	/*
	 * Key derivation can only be done on private keys, so use of the -d
	 * option necessarily implies -p.
	 */
	if (opts.derive)
		opts.private = true;

	var inFile = process.stdin;
	var inFileName = 'stdin';

	var inFilePath;
	if (opts.file) ***REMOVED***
		inFilePath = opts.file;
	***REMOVED*** else if (opts._args.length === 1) ***REMOVED***
		inFilePath = opts._args[0];
	***REMOVED***

	if (inFilePath)
		inFileName = path.basename(inFilePath);

	try ***REMOVED***
		if (inFilePath) ***REMOVED***
			fs.accessSync(inFilePath, fs.R_OK);
			inFile = fs.createReadStream(inFilePath);
		***REMOVED***
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-conv: error opening input file' +
		     ': ' + e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	var outFile = process.stdout;

	try ***REMOVED***
		if (opts.out && !opts.identify) ***REMOVED***
			fs.accessSync(path.dirname(opts.out), fs.W_OK);
			outFile = fs.createWriteStream(opts.out);
		***REMOVED***
	***REMOVED*** catch (e) ***REMOVED***
		console.error('sshpk-conv: error opening output file' +
		    ': ' + e.name + ': ' + e.message);
		process.exit(1);
	***REMOVED***

	var bufs = [];
	inFile.on('readable', function () ***REMOVED***
		var data;
		while ((data = inFile.read()))
			bufs.push(data);
	***REMOVED***);
	var parseOpts = ***REMOVED******REMOVED***;
	parseOpts.filename = inFileName;
	inFile.on('end', function processKey() ***REMOVED***
		var buf = Buffer.concat(bufs);
		var fmt = 'auto';
		if (opts.informat)
			fmt = opts.informat;
		var f = sshpk.parseKey;
		if (opts.private)
			f = sshpk.parsePrivateKey;
		try ***REMOVED***
			var key = f(buf, fmt, parseOpts);
		***REMOVED*** catch (e) ***REMOVED***
			if (e.name === 'KeyEncryptedError') ***REMOVED***
				getPassword(function (err, pw) ***REMOVED***
					if (err) ***REMOVED***
						console.log('sshpk-conv: ' +
						    err.name + ': ' +
						    err.message);
						process.exit(1);
					***REMOVED***
					parseOpts.passphrase = pw;
					processKey();
				***REMOVED***);
				return;
			***REMOVED***
			console.error('sshpk-conv: ' +
			    e.name + ': ' + e.message);
			process.exit(1);
		***REMOVED***

		if (opts.derive)
			key = key.derive(opts.derive);

		if (opts.comment)
			key.comment = opts.comment;

		if (!opts.identify) ***REMOVED***
			fmt = undefined;
			if (opts.outformat)
				fmt = opts.outformat;
			outFile.write(key.toBuffer(fmt));
			if (fmt === 'ssh' ||
			    (!opts.private && fmt === undefined))
				outFile.write('\n');
			outFile.once('drain', function () ***REMOVED***
				process.exit(0);
			***REMOVED***);
		***REMOVED*** else ***REMOVED***
			var kind = 'public';
			if (sshpk.PrivateKey.isPrivateKey(key))
				kind = 'private';
			console.log('%s: a %d bit %s %s key', inFileName,
			    key.size, key.type.toUpperCase(), kind);
			if (key.type === 'ecdsa')
				console.log('ECDSA curve: %s', key.curve);
			if (key.comment)
				console.log('Comment: %s', key.comment);
			console.log('Fingerprint:');
			console.log('  ' + key.fingerprint().toString());
			console.log('  ' + key.fingerprint('md5').toString());
			process.exit(0);
		***REMOVED***
	***REMOVED***);
***REMOVED***
